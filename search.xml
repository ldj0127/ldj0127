<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java中的同步代码块和同步方法</title>
    <url>/blog/2020/04/19/java-zhong-de-tong-bu-dai-ma-kuai-tong-bu-fang-fa/</url>
    <content><![CDATA[<h2 id="多线程容易出现问题的原因"><a href="#多线程容易出现问题的原因" class="headerlink" title="多线程容易出现问题的原因"></a>多线程容易出现问题的原因</h2><p>当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。即多个线程执行的不确定性引起执行结果的不稳定。<br><strong>举个栗子：火车站售票，多个窗口同时售票。</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticketing</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Ticketing</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖票，剩余"</span> <span class="token operator">+</span> <span class="token operator">--</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"票已售完---"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="http://qiniuyun.dajienihao.cn/image/0419/1.png" alt="运行结果"></p>
<h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>锁非this对象具有一定的优点：如果一个类中有很多个synchronized方法，这时虽然能实现同步，但会受到阻塞，所以影响消息；但如果使用同步代码块锁非this对象，则synchronized(非this)代码块的程序与同步方法是异步的。不与其他锁this同步方法争抢this锁，则可以大大提高运行效率。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticketing</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Ticketing</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖票，剩余"</span> <span class="token operator">+</span> <span class="token operator">--</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"票已售完---"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="http://qiniuyun.dajienihao.cn/image/0419/2.png" alt="运行结果"><br>程序使用synchronized将run（）方法里的方法修改成同步代码块，同步监视器就是ojb对象，这样的做法符合“加锁-修改-释放锁”的逻辑，这样就可以保证并发线程在任一时刻只有一个线程进入修改共享资源的代码区。多次运行，结果只有一个。<br>这里<code>synchronize</code>的括号里是一个对象。</p>
<blockquote>
<p>当括号里是this时，锁的是当前调用方法的对象<br>当括号里是一个Class对象时，锁的是这个类，也就是同一个类的实例，任意时刻只会有一个线程能获得资源</p>
</blockquote>
<h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>使用synchronized声明的方法在 某些情况下是有弊端的，比如A线程调用同步的方法执行一个长时间的任务，那么B线程就必须等待比较长的时间才能执行。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticketing</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Ticketing</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖票，剩余"</span> <span class="token operator">+</span> <span class="token operator">--</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"票已售完---"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>对于关键字synchronized修饰的方法，不需要再指定同步监视器，这个同步方法（非static方法）无需显式地指定同步监视器，同步方法的同步监视器就是this，也就是调用该方法的对象。</p>
<blockquote>
<p>注意，synchronized可以修饰方法，修饰代码块，但是不能修饰构造器、成员变量等。<br>synchronized关键字也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个类。</p>
</blockquote>
<h2 id="释放同步监视器的锁定"><a href="#释放同步监视器的锁定" class="headerlink" title="释放同步监视器的锁定"></a>释放同步监视器的锁定</h2><p>1.任何线程进入同步代码块，同步方法之前，必须先获得对同步监视器的锁定，那么如何释放对同步监视器的锁定呢，线程会在以下几种情况下释放同步监视器：</p>
<ul>
<li>当前线程的同步方法、同步代码块执行结束，当前线程即释放同步监视器；</li>
<li>当前线程在同步代码块、同步方法中遇到break，return终止了该代码块、方法的继续执行；</li>
<li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致了该代码块、方法的异常结束；</li>
<li>当前线程执行同步代码块或同步方法时，程序执行了同步监视器对象的wait（）方法，则当前线程暂停，并释放同步监视器。</li>
</ul>
<p>2.以下几种情况，线程不会释放同步监视器：</p>
<ul>
<li>线程执行同步代码块或同步方法时，程序调用Thread.sleep()，Thread.yield()方法来暂停当前线程的执行，当前线程不会释放同步监视器；</li>
<li>线程执行同步代码块时，其他线程调用了该线程的suspend（）方法将该线程挂起，该线程不会释放同步监视器，当然，程序应尽量避免使用suspend（）和resume（）方法来控制线程。</li>
</ul>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>1.通过同步方法可以非常方便的实现线程安全的类，线程安全的类有如下特征：</p>
<ul>
<li>该类的对象可以方便被多个线程安全的访问；</li>
<li>每个线程调用该对象的任意方法之后都得到正确的结果；</li>
<li>每个线程调用该对象的任意方法之后；该对象状态依然能保持合理状态。</li>
</ul>
<p>2.不可变类总是线程安全的，因为它的对象状态不可改变可变类需要额外的方法来保证其线程安全</p>
<blockquote>
<p>但是可变类的线程安全是以减低程序的运行效率为代价，不要对线程安全类的所有方法都进行同步，只对那些会改变竞争资源（共享资源）的方法进行同步。同时可变类有两种运行环境：单线程环境和多线程环境，则应该为可变类提供两个版本，即线程安全版本和线程不安全版本。如jdk提供的StringBuilder在单线程环境下保证更好的性能，StringBuffer可以保证多线程安全。</p>
</blockquote>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>synchronized</tag>
        <tag>多线程</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>内部类</title>
    <url>/blog/2020/04/19/nei-bu-lei/</url>
    <content><![CDATA[<h1 id="内部类详解"><a href="#内部类详解" class="headerlink" title="内部类详解"></a>内部类详解</h1><h2 id="成员内部类-普通内部类"><a href="#成员内部类-普通内部类" class="headerlink" title="成员内部类(普通内部类)"></a>成员内部类(普通内部类)</h2><p>个是最常见的内部类之一了，其定义也很简单，在一个类里面作为类的一个字段直接定义就可以了，例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Inner inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner<span class="token punctuation">.</span><span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Outer<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Outer outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outer<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Outer<span class="token punctuation">.</span>Inner inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>在这里Inner类为Outer类的普通内部类，在这种定义方式下，普通内部类对象依赖外部类对象而存在，即在创建一个普通内部类对象时首先需要创建其外部类对象。</p>
<p><strong>内部类访问权限：</strong>成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。<br><strong>外部类访问权限：</strong>虽然成员内部类可以无条件地访问外部类的成员，而外部类想访问成员内部类的成员却不是这么随心所欲了。在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问。</p>
<blockquote>
<p>注意：当成员内部类拥有和外部类同名的成员变量或者方法时默认访问的是成员内部类的成员。如果要访问外部类的同名成员，需要以<code>外部类.this.成员</code>来访问</p>
</blockquote>
<h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//当内部有同名变量时是访问不到的</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
        <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
            <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>

            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Outer<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        Inner inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner<span class="token punctuation">.</span><span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner<span class="token punctuation">.</span><span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Outer outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outer<span class="token punctuation">.</span><span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>内部类访问权限：</strong>局部内部类里面可以访问外部类对象的所有访问权限的字段。<br><strong>外部类访问权限：</strong>外部类却不能访问局部内部类中定义的字段，因为局部内部类的定义只在其特定的方法体 / 代码块中有效，一旦出了这个定义域，那么其定义就失效了，就像代码注释中描述的那样，即外部类不能获取局部内部类的对象，因而无法访问局部内部类的字段。</p>
<blockquote>
<p>注意: 局部内部类就像是方法里面的一个局部变量一样，是不能有 public、protected、private 以及 static 修饰符的。<br>且内部类访问的局部变量必须声明为final</p>
</blockquote>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>我们知道，一个类的静态成员独立于这个类的任何一个对象存在，只要在具有访问权限的地方，我们就可以通过 类名.静态成员名 的形式来访问这个静态成员，同样的，静态内部类也是作为一个外部类的静态成员而存在，创建一个类的静态内部类对象不需要依赖其外部类对象。例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String name<span class="token operator">=</span><span class="token string">"花花"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Outer<span class="token punctuation">.</span>Inner inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>注意：<br>非静态内部类中不允许定义静态成员<br>外部类的静态成员不可以直接使用非静态内部类<br>静态内部类，不能访问外部类的实例成员，只能访问外部类的类成员</p>
</blockquote>
<h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>匿名内部类也就是没有名字的内部类正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写，但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口，但最多只能继承一个父类，或实现一个接口。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String name<span class="token operator">=</span><span class="token string">"花花"</span><span class="token punctuation">;</span>


    <span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showAge被调用了"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showName被调用了"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>1、匿名内部类不能定义任何静态成员、方法。</li>
<li>2、匿名内部类中的方法不能是抽象的；</li>
<li>3、匿名内部类必须实现接口或抽象父类的所有抽象方法。</li>
<li>4、匿名内部类不能定义构造器；</li>
<li>5、匿名内部类访问的外部类成员变量或成员方法必须用static修饰；</li>
<li>6、内部类可以访问外部类私有变量和方法。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>内部类</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>向上转型和向下转型</title>
    <url>/blog/2020/04/19/xiang-shang-zhuan-xing-he-xiang-xia-zhuan-xing/</url>
    <content><![CDATA[<h1 id="向上转型与向下转型"><a href="#向上转型与向下转型" class="headerlink" title="向上转型与向下转型"></a>向上转型与向下转型</h1><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>子类引用的对象转换为父类类型称为向上转型。通俗地说就是是将子类对象转为父类对象。此处父类对象可以是接口。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"animal eatting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我会跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//向上转型</span>
        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//结果:</span>
<span class="token comment" spellcheck="true">//我吃鱼</span>
<span class="token comment" spellcheck="true">//我吃骨头</span></code></pre>
<p>这就是向上转型，<code>Animal animal = new Cat();</code>将子类对象Cat转化为父类对象Animal。这个时候animal这个引用调用的方法是子类方法。</p>
<h3 id="转型过程中需要注意的问题"><a href="#转型过程中需要注意的问题" class="headerlink" title="转型过程中需要注意的问题:"></a>转型过程中需要注意的问题:</h3><ul>
<li>向上转型时，子类特有的方法会丢失。比如上面Dog类中定义的run方法，当animal引用指向Dog类实例时是访问不到run方法的，animal.run()会报错。</li>
<li>子类引用不能指向父类对象。Cat c = (Cat)new Animal()这样是不行的。</li>
</ul>
<h3 id="向上转型的好处"><a href="#向上转型的好处" class="headerlink" title="向上转型的好处"></a>向上转型的好处</h3><ul>
<li>减少重复代码，使代码变得简洁。</li>
<li>提高系统扩展性。</li>
</ul>
<p>举个栗子，比如我现在有很多种类的动物，要喂它们吃东西。如果不用向上转型，那我需要这样写：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Cat c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    c<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Dog d<span class="token punctuation">)</span><span class="token punctuation">{</span>
    d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>那如果我使用向上转型呢？我只需要这样写：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>恩，搞定了。代码是不是简洁了许多？而且这个时候，如果我又有一种新的动物加进来，我只需要实现它自己的类，让他继承Animal就可以了，而不需要为它单独写一个eat方法。是不是提高了扩展性？</p>
<h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p>与向上转型相对应的就是向下转型了。向下转型是把父类对象转为子类对象。(请注意！这里是有坑的。)<br>还是先来一个例子：</p>
<pre><code>//还是上面的animal和cat dog
Animal a = new Cat();
Cat c = ((Cat) a);
c.eat();//输出  我吃鱼

Dog d = ((Dog) a);
d.eat();// 报错 

Animal a1 = new Animal();
Cat c1 = ((Cat) a1);
c1.eat();// 报错 </code></pre><p>为什么第一段代码不报错呢？相比你也知道了，因为a本身就是Cat对象，所以它理所当然的可以向下转型为Cat，也理所当然的不能转为Dog，你见过一条狗突然就变成一只猫这种操蛋现象？<br>而a1为Animal对象，它也不能被向下转型为任何子类对象。比如你去考古，发现了一个新生物，知道它是一种动物，但是你不能直接说，啊，它是猫，或者说它是狗</p>
<h3 id="向下转型注意事项"><a href="#向下转型注意事项" class="headerlink" title="向下转型注意事项"></a>向下转型注意事项</h3><ul>
<li>向下转型的前提是父类对象指向的是子类对象（也就是说，在向下转型之前，它得先向上转型）</li>
<li>向下转型只能转型为本类对象（猫是不能变成狗的）。<blockquote>
<p>大概你会说，我特么有病啊，我先向上转型再向下转型？？</p>
</blockquote>
</li>
</ul>
<h3 id="向下转型的好处"><a href="#向下转型的好处" class="headerlink" title="向下转型的好处"></a>向下转型的好处</h3><p>我们回到上面的问题：喂动物吃饭，吃了饭做点什么呢？不同的动物肯定做不同的事，怎么做呢？</p>
<pre class=" language-java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        Dog d <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>a<span class="token punctuation">;</span>
        d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//狗有一个跑的方法      </span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        Cat c <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a<span class="token punctuation">;</span>
        c<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我也想跑，但是不会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//猫会抱怨    </span>
    <span class="token punctuation">}</span> 
    a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其他动物只会吃</span>
<span class="token punctuation">}</span>

<span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>现在，你懂了么？这就是向下转型的简单应用，可能举得例子不恰当，但是也可以说明一些问题。</p>
<h2 id="多说一点"><a href="#多说一点" class="headerlink" title="多说一点"></a>多说一点</h2><p>当父类对象引用变量引用子类对象时，被引用对象的类型决定了调用谁的成员方法，引用变量类型决定可调用的方法。如果子类中没有覆盖该方法，那么会去父类中寻找。<br>举个栗子：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>Y y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x and y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"only x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Y</span> <span class="token keyword">extends</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>Y y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y and y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">main</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        X x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//结果</span>
<span class="token comment" spellcheck="true">//y and y</span>
<span class="token comment" spellcheck="true">//only x</span></code></pre>
<p>Y继承了X，覆盖了X中的show（Y y)方法，但是没有覆盖show（）方法。<br>这个时候，引用类型为X的x指向的对象为Y，这个时候，调用的方法由Y决定，会先从Y中寻找。执行x.show(new Y());，该方法在Y中定义了，所以执行的是Y里面的方法；<br>但是执行x.show();的时候，有的人会说，Y中没有这个方法啊？它好像是去父类中找该方法了，因为调用了X中的方法。<br>事实上，Y类中是有show（）方法的，这个方法继承自X，只不过没有覆盖该方法，所以没有在Y中明确写出来而已，看起来像是调用了X中的方法，实际上调用的还是Y中的</p>
<blockquote>
<p>这个时候再看上面那句难理解的话就不难理解了吧。X是引用变量类型，它决定哪些方法可以调用；show（）和show(Y y)可以调用，而show(int i)不可以调用。Y是被引用对象的类型，它决定了调用谁的方法：调用y的方法。</p>
</blockquote>
]]></content>
      <categories>
        <category>多态</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程之线程死锁</title>
    <url>/blog/2020/04/19/duo-xian-cheng-zhi-xian-cheng-si-suo/</url>
    <content><![CDATA[<h2 id="死锁讲解"><a href="#死锁讲解" class="headerlink" title="死锁讲解"></a>死锁讲解</h2><p>在Java中使用多线程，就会有可能导致死锁问题。死锁会让程序一直卡住，不再程序往下执行。我们只能通过中止并重启的方式来让程序重新执行。<br>这是我们非常不愿意看到的一种现象，我们要尽可能避免死锁的情况发生！造成死锁的原因可以概括成三句话：</p>
<ul>
<li>当前线程拥有其他线程需要的资源</li>
<li>当前线程等待其他线程已拥有的资源</li>
<li>都不放弃自己拥有的资源</li>
</ul>
<p>举个栗子：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticketing</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Object obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Object obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Boolean flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Ticketing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Ticketing</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlag</span><span class="token punctuation">(</span>Boolean flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码块1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖票，剩余"</span> <span class="token operator">+</span> <span class="token operator">--</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"票已售完---"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">return</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码块2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖票，剩余"</span> <span class="token operator">+</span> <span class="token operator">--</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"票已售完---"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">return</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
            Ticketing ticketing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticketing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketing<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketing<span class="token punctuation">)</span><span class="token punctuation">;</span>
            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ticketing<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="http://qiniuyun.dajienihao.cn/image/0419/3.png" alt="运行过程"><br>所以他们都只能等待，而这种等待是无期限的–&gt;永久等待–&gt;死锁</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之单例模式</title>
    <url>/blog/2020/04/19/she-ji-mo-shi-zhi-dan-li-mo-shi/</url>
    <content><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br><strong>注意:</strong></p>
<ul>
<li>1、单例类只能有一个实例。</li>
<li>2、单例类必须自己创建自己的唯一实例。</li>
<li>3、单例类必须给所有其他对象提供这一实例。</li>
</ul>
<h3 id="懒汉加载-延迟加载"><a href="#懒汉加载-延迟加载" class="headerlink" title="懒汉加载(延迟加载)"></a>懒汉加载(延迟加载)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> User u<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            u<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>懒汉式，顾名思义就是实例在用到的时候才去创建，”比较懒”,用的时候才去检查有没有实例，如果有则返回，没有则新建。有线程安全和线程不安全两种写法，区别就是<code>synchronized</code>关键字。</p>
<h3 id="饿汉加载"><a href="#饿汉加载" class="headerlink" title="饿汉加载"></a>饿汉加载</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>饿汉式，从名字上也很好理解，就是“比较勤”，实例在初始化的时候就已经建好了，不管你有没有用到，都先建好了再说。好处是没有线程安全的问题，坏处是浪费内存空间。</p>
<h3 id="双检锁"><a href="#双检锁" class="headerlink" title="双检锁"></a>双检锁</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> User user<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>双检锁，又叫双重校验锁，综合了懒汉式和饿汉式两者的优缺点整合而成。看上面代码实现中，特点是在synchronized关键字内外都加了一层 if 条件判断，这样既保证了线程安全，又比直接上锁提高了执行效率，还节省了内存空间。</p>
<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">UserHolder</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> UserHolder<span class="token punctuation">.</span>user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>静态内部类的方式效果类似双检锁，但实现更简单。但这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span>  User <span class="token punctuation">{</span>

    Instance<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">anyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>枚举的方式是比较少见的一种实现方式，但是看上面的代码实现，却更简洁清晰。并且她还自动支持序列化机制，绝对防止多次实例化。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结下，一般情况下，懒汉式（包含线程安全和线程不安全两种方式）都比较少用；饿汉式和双检锁都可以使用，可根据具体情况自主选择；在要明确实现 lazy loading 效果时，可以考虑静态内部类的实现方式；若涉及到反序列化创建对象时，大家也可以尝试使用枚举方式。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下的安装部署fastdfs</title>
    <url>/blog/2020/04/17/linux-an-zhuang-fastdfs/</url>
    <content><![CDATA[<h1 id="Linux下的安装部署fastdfs"><a href="#Linux下的安装部署fastdfs" class="headerlink" title="Linux下的安装部署fastdfs"></a>Linux下的安装部署fastdfs</h1><p>安装fastDFS需要分别安装<code>fastdfs-nginx-module，fastdfs，nginx，libfastcommon</code></p>
<h2 id="1-安装gcc-编译时需要"><a href="#1-安装gcc-编译时需要" class="headerlink" title="1.安装gcc(编译时需要)"></a>1.安装gcc(编译时需要)</h2><p><code>yum install -y gcc gcc-c++</code></p>
<h2 id="2-安装libevent-运行时需要"><a href="#2-安装libevent-运行时需要" class="headerlink" title="2.安装libevent(运行时需要)"></a>2.安装libevent(运行时需要)</h2><p><code>yum -y install libevent</code></p>
<h2 id="3-安装创建目录上传所有文件"><a href="#3-安装创建目录上传所有文件" class="headerlink" title="3.安装创建目录上传所有文件"></a>3.安装创建目录上传所有文件</h2><ol>
<li><code>mkdir -p /fileservice/fast</code></li>
<li><code>cd /fileservice/fast</code></li>
</ol>
<p><img src="http://qiniuyun.dajienihao.cn/image/0417/1.png" alt="需要的文件"></p>
<h2 id="4-安装libfastcommon"><a href="#4-安装libfastcommon" class="headerlink" title="4.安装libfastcommon"></a>4.安装libfastcommon</h2><ol>
<li>解压文件： <code>tar -zxvf libfastcommon-1.0.35.tar.gz</code></li>
<li>进入libfast文件目录：<code>cd libfastcommon-1.0.35</code></li>
<li>执行编译：<code>./make.sh</code></li>
<li>安装：<code>./make.sh install</code></li>
</ol>
<h2 id="5-安装fastdfs"><a href="#5-安装fastdfs" class="headerlink" title="5.安装fastdfs"></a>5.安装fastdfs</h2><h3 id="5-1-下载"><a href="#5-1-下载" class="headerlink" title="5.1 下载"></a>5.1 下载</h3><p><a href="https://sourceforge.net/projects/fastdfs/files/" target="_blank" rel="noopener">官网</a><br>网官下载很慢，看我准备的安装文件</p>
<h3 id="5-2-安装相关依赖库"><a href="#5-2-安装相关依赖库" class="headerlink" title="5.2 安装相关依赖库"></a>5.2 安装相关依赖库</h3><ol>
<li><code>yum install perl</code></li>
<li><code>yum install pcre</code></li>
<li><code>yum install pcre-devel</code></li>
<li><code>yum install zlib</code></li>
<li><code>yum install zlib-devel</code></li>
<li><code>yum install openssl</code></li>
<li><code>yum install openssl-devel</code></li>
</ol>
<h3 id="5-3-安装fastdfs"><a href="#5-3-安装fastdfs" class="headerlink" title="5.3 安装fastdfs"></a>5.3 安装fastdfs</h3><ol>
<li>进入fast目录：<code>cd /fileservice/fast</code></li>
<li>解压文件：<code>tar -zxvf fastdfs-5.11.tar.gz</code></li>
<li>进入解压后的目录：<code>cd fastdfs-5.11</code></li>
<li>执行编译：<code>./make.sh</code></li>
<li>安装：<code>./make.sh install</code></li>
</ol>
<h3 id="5-4-查看tracker和storage的可执行脚本-后面有用"><a href="#5-4-查看tracker和storage的可执行脚本-后面有用" class="headerlink" title="5.4 查看tracker和storage的可执行脚本(后面有用)"></a>5.4 查看tracker和storage的可执行脚本(后面有用)</h3><p><code>ll /etc/init.d/ | grep fdfs</code></p>
<h3 id="5-5-准备配置文件-默认在-etc-fdfs-下面"><a href="#5-5-准备配置文件-默认在-etc-fdfs-下面" class="headerlink" title="5.5 准备配置文件  默认在/etc/fdfs/下面"></a>5.5 准备配置文件  默认在/etc/fdfs/下面</h3><ol>
<li><code>cd /etc/fdfs/</code> </li>
<li><code>cp client.conf.sample client.conf</code></li>
<li><code>cp storage.conf.sample storage.conf</code></li>
<li><code>cp storage_ids.conf.sample storage_ids.conf</code></li>
<li><code>cp tracker.conf.sample tracker.conf</code></li>
<li>然后修改tracker的存放数据和日志的目录。 <code>mkdir -p /home/dajie/fastdfs/tracker</code></li>
</ol>
<h2 id="6-配置和启动tracker"><a href="#6-配置和启动tracker" class="headerlink" title="6.配置和启动tracker"></a>6.配置和启动tracker</h2><h3 id="6-1-切换目录到：-etc-fdfs-目录下；"><a href="#6-1-切换目录到：-etc-fdfs-目录下；" class="headerlink" title="6.1 切换目录到： /etc/fdfs/ 目录下；"></a>6.1 切换目录到： /etc/fdfs/ 目录下；</h3><p><code>cd /etc/fdfs/</code></p>
<h3 id="6-2-修改tracker-conf"><a href="#6-2-修改tracker-conf" class="headerlink" title="6.2 修改tracker.conf"></a>6.2 修改tracker.conf</h3><p><code>vim tracker.conf</code><br>base_path=/home/yuqing/fastdfs 改为: base_path=/home/dajie/fastdfs/tracker</p>
<h3 id="6-3-启动tracker，运行如下命令："><a href="#6-3-启动tracker，运行如下命令：" class="headerlink" title="6.3 启动tracker，运行如下命令："></a>6.3 启动tracker，运行如下命令：</h3><p><code>service fdfs_trackerd  start</code></p>
<blockquote>
<p>注意：在/home/dajie/fastdfs/tracker 目录下生成两个目录， 一个是数据，一个是日志；</p>
</blockquote>
<h2 id="7-配置和启动storage"><a href="#7-配置和启动storage" class="headerlink" title="7.配置和启动storage"></a>7.配置和启动storage</h2><p>由于上面已经安装过FastDFS，这里只需要配置storage就好了；</p>
<h3 id="7-1-切换目录到：-etc-fdfs-目录下；"><a href="#7-1-切换目录到：-etc-fdfs-目录下；" class="headerlink" title="7.1 切换目录到： /etc/fdfs/ 目录下；"></a>7.1 切换目录到： /etc/fdfs/ 目录下；</h3><p><code>cd /etc/fdfs/</code></p>
<h3 id="7-2-修改storage-conf"><a href="#7-2-修改storage-conf" class="headerlink" title="7.2 修改storage.conf"></a>7.2 修改storage.conf</h3><p><code>vim storage.conf</code><br>base_path=/home/yuqing/fastdfs 改为: base_path=/home/dajie/fastdfs/storage</p>
<h4 id="7-2-1-store存放文件的位置-store-path"><a href="#7-2-1-store存放文件的位置-store-path" class="headerlink" title="7.2.1 store存放文件的位置(store_path)"></a>7.2.1 store存放文件的位置(store_path)</h4><p>store_path0=/home/yuqing/fastdfs 改为： store_path0=/home/dajie/fastdfs/storage</p>
<blockquote>
<p>如果有多个挂载磁盘则定义多个store_path，如下<br>store_path1=…..<br>store_path2=……</p>
</blockquote>
<h4 id="7-2-2-配置tracker服务器-IP"><a href="#7-2-2-配置tracker服务器-IP" class="headerlink" title="7.2.2 配置tracker服务器:IP"></a>7.2.2 配置tracker服务器:IP</h4><p>tracker_server=192.168.247.129:22122</p>
<blockquote>
<p>如果有多个则配置多个tracker</p>
</blockquote>
<h3 id="7-3-创建-home-dajie-fastdfs-storage-目录"><a href="#7-3-创建-home-dajie-fastdfs-storage-目录" class="headerlink" title="7.3 创建/home/dajie/fastdfs/storage 目录"></a>7.3 创建/home/dajie/fastdfs/storage 目录</h3><p><code>mkdir -p /home/dajie/fastdfs/storage</code></p>
<h3 id="7-4-启动storage，-运行命令如下："><a href="#7-4-启动storage，-运行命令如下：" class="headerlink" title="7.4 启动storage， 运行命令如下："></a>7.4 启动storage， 运行命令如下：</h3><p><code>service fdfs_storaged start</code><br>启动完成后进入 /home/dajie/fastdfs/storage/data 目录下，显示目录如下：<br><img src="http://qiniuyun.dajienihao.cn/image/0417/2.png" alt=""></p>
<h2 id="8-使用FastDFS自带工具测试"><a href="#8-使用FastDFS自带工具测试" class="headerlink" title="8.使用FastDFS自带工具测试"></a>8.使用FastDFS自带工具测试</h2><h3 id="8-1-切换目录到-etc-fdfs-目录下；"><a href="#8-1-切换目录到-etc-fdfs-目录下；" class="headerlink" title="8.1 切换目录到 /etc/fdfs/ 目录下；"></a>8.1 切换目录到 /etc/fdfs/ 目录下；</h3><p><code>cd /etc/fdfs</code></p>
<h3 id="8-2-修改client-conf"><a href="#8-2-修改client-conf" class="headerlink" title="8.2 修改client.conf"></a>8.2 修改client.conf</h3><p><code>vim client.conf</code><br>修改基本路径和tracker_server<br>base_path=/home/dajie/fastdfs/storage<br>tracker_server=192.168.247.129:22122</p>
<blockquote>
<p>注意：若tracker有多个，可以配置多个，如下:<br>tracker_server=……<br>tracker_server=……</p>
</blockquote>
<h3 id="8-3-拷贝一张图片111-jpg到Centos服务器上的-etc-fdfs-目录下"><a href="#8-3-拷贝一张图片111-jpg到Centos服务器上的-etc-fdfs-目录下" class="headerlink" title="8.3 拷贝一张图片111.jpg到Centos服务器上的/etc/fdfs/目录下"></a>8.3 拷贝一张图片111.jpg到Centos服务器上的/etc/fdfs/目录下</h3><h3 id="8-4-进行测试"><a href="#8-4-进行测试" class="headerlink" title="8.4 进行测试"></a>8.4 进行测试</h3><p>运行如下（运行测试程序，读取/etc/fdfs/client.conf 文件，上传/root/目录下的baobao.png文件）<br><code>/usr/bin/fdfs_upload_file /etc/fdfs/client.conf ./111.jpg</code><br>结果如下，表示搭建成功；<br><img src="http://qiniuyun.dajienihao.cn/image/0417/3.png" alt=""><br>以上图中的文件地址：<code>http://192.168.247.129/group1/M00/00/00/wKj3gV6ZDXiARK31AAEhFux3hUc421.jpg</code>对应storage服务器上的<code>/home/dajie/fastdfs/storage/data/00/00/wKj3gV6ZDXiARK31AAEhFux3hUc421.jpg</code>文件<br>由于现在还没有和nginx整合无法使用http下载。</p>
<h2 id="9-FastDFS-和nginx整合"><a href="#9-FastDFS-和nginx整合" class="headerlink" title="9.FastDFS 和nginx整合"></a>9.FastDFS 和nginx整合</h2><h3 id="9-1-在tracker上安装-nginx"><a href="#9-1-在tracker上安装-nginx" class="headerlink" title="9.1 在tracker上安装 nginx"></a>9.1 在tracker上安装 nginx</h3><p>在每个tracker上安装nginx，的主要目的是做负载均衡及实现高可用。如果只有一台tracker可以不配置nginx。<br>一个tracker对应多个storage，通过nginx对storage负载均衡；</p>
<h3 id="9-2-在storage-上安装nginx"><a href="#9-2-在storage-上安装nginx" class="headerlink" title="9.2 在storage 上安装nginx"></a>9.2 在storage 上安装nginx</h3><ol>
<li><p>解压<code>tar -zxvf  fastdfs-nginx-module-1.20.tar.gz</code></p>
</li>
<li><p>切换目录到fastdfs-nginx-module-1.20/src 目录下<code>cd fastdfs-nginx-module-1.20/src</code></p>
</li>
<li><p>修改config文件，将文件中的所有 /usr/local/ 路径改为 /usr/<br>vim config<br><img src="http://qiniuyun.dajienihao.cn/image/0417/4.png" alt="/usr/include/fastdfs /usr/include/fastcommon/"></p>
</li>
<li><p>将fastdfs-nginx-module/src下的mod_fastdfs.conf拷贝至/etc/fdfs/下<code>cp mod_fastdfs.conf /etc/fdfs/</code></p>
</li>
<li><p>修改 /etc/fdfs/mod_fastdfs.conf 的内容；<code>vim /etc/fdfs/mod_fastdfs.conf</code><br>tracker_server=192.168.247.129:22122<br>url_have_group_name=true #url中包含group名称<br>store_path0=/home/dajie/fastdfs/storage #指定文件存储路径（上面配置的store路径）</p>
<blockquote>
<p>tracker_server=192.168.172.20:22122 #(多个tracker配置多行)</p>
</blockquote>
</li>
</ol>
<h3 id="9-3-进入之前解压的fastdfs目录下，把http-conf、mime-conf移动至-etc-fdfs"><a href="#9-3-进入之前解压的fastdfs目录下，把http-conf、mime-conf移动至-etc-fdfs" class="headerlink" title="9.3 进入之前解压的fastdfs目录下，把http.conf、mime.conf移动至/etc/fdfs"></a>9.3 进入之前解压的fastdfs目录下，把http.conf、mime.conf移动至/etc/fdfs</h3><ol>
<li><code>cd /fileservice/fast/fastdfs-5.11/conf/</code></li>
<li><code>cp http.conf mime.types /etc/fdfs/</code></li>
</ol>
<h2 id="10-Nginx的安装"><a href="#10-Nginx的安装" class="headerlink" title="10.Nginx的安装"></a>10.Nginx的安装</h2><h3 id="10-1-解压-nginx-1-15-2-tar-gz"><a href="#10-1-解压-nginx-1-15-2-tar-gz" class="headerlink" title="10.1.解压 nginx-1.15.2.tar.gz"></a>10.1.解压 nginx-1.15.2.tar.gz</h3><ol>
<li><code>cd /fileservice/fast/</code></li>
<li><code>tar -zxvf nginx-1.15.2.tar.gz</code> </li>
</ol>
<h3 id="10-2-进入nginx解压的目录下"><a href="#10-2-进入nginx解压的目录下" class="headerlink" title="10.2.进入nginx解压的目录下"></a>10.2.进入nginx解压的目录下</h3><p><code>cd nginx-1.15.2/</code></p>
<h3 id="10-3-加入模块命令配置"><a href="#10-3-加入模块命令配置" class="headerlink" title="10.3. 加入模块命令配置"></a>10.3. 加入模块命令配置</h3><p><code>./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx --add-module=/fileservice/fast/fastdfs-nginx-module-1.20/src</code></p>
<h3 id="10-4-编译并安装"><a href="#10-4-编译并安装" class="headerlink" title="10.4. 编译并安装"></a>10.4. 编译并安装</h3><p><code>make &amp;&amp; make install</code></p>
<h3 id="10-5-修改nginx配置"><a href="#10-5-修改nginx配置" class="headerlink" title="10.5. 修改nginx配置"></a>10.5. 修改nginx配置</h3><ol>
<li><code>cd /opt/nginx/conf</code></li>
<li><code>vim nginx.conf</code><br><img src="http://qiniuyun.dajienihao.cn/image/0417/8.png" alt=""></li>
</ol>
<h3 id="10-6-启动nginx"><a href="#10-6-启动nginx" class="headerlink" title="10.6. 启动nginx"></a>10.6. 启动nginx</h3><ol>
<li><code>cd /usr/bin/</code></li>
<li><code>./nginx</code>#启动</li>
</ol>
<h3 id="11、在浏览器中访问上传到fastDFS的图片"><a href="#11、在浏览器中访问上传到fastDFS的图片" class="headerlink" title="11、在浏览器中访问上传到fastDFS的图片"></a>11、在浏览器中访问上传到fastDFS的图片</h3><p>在谷歌浏览器中访问刚才上传的图片：<br>刚才上传的图片地址为：<a href="http://192.168.247.129/group1/M00/00/00/wKj3gV6ZDXiARK31AAEhFux3hUc421.jpg" target="_blank" rel="noopener">http://192.168.247.129/group1/M00/00/00/wKj3gV6ZDXiARK31AAEhFux3hUc421.jpg</a><br><img src="http://qiniuyun.dajienihao.cn/image/0417/6.png" alt="访问成功"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis简介及常用命令</title>
    <url>/blog/2020/04/14/redis-jian-jie-ji-chang-yong-ming-ling/</url>
    <content><![CDATA[<h2 id="1-Redis简介"><a href="#1-Redis简介" class="headerlink" title="1. Redis简介"></a>1. Redis简介</h2><h3 id="1-1-Redis简介"><a href="#1-1-Redis简介" class="headerlink" title="1.1 Redis简介"></a>1.1 Redis简介</h3><p>Redis:Remote Dictionary Server(远程字典服务器)<br>Redis是当前比较热门的NOSQL系统之一，它是一个开源的使用ANSI c语言编写的key-value存储系统（区别于MySQL的二维表格的形式储）。和Memcache类似，但很大程度补偿了Memcache的不足。和Memcache一样，Redis数据都是缓存在计算机内存中，不同的是，Memcache只能将数据缓存到内存中，无法自动定期写入硬盘，这就表示，一断电或重启，内存清空，数据丢失。所以Memcache的应用场景适用于缓存无需持久化的数据。而Redis不同的是它会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，实现数据的持久化</p>
<h3 id="1-2-Redis的特点"><a href="#1-2-Redis的特点" class="headerlink" title="1.2 Redis的特点"></a>1.2 Redis的特点</h3><ol>
<li>Redis读取的速度是110000次/s，写的速度是81000次/s</li>
<li>原子 。Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li>
<li>支持多种数据结构：string（字符串）；list（列表）；hash（哈希），set（集合）；zset(有序集合)</li>
<li>持久化，主从复制（集群）</li>
<li>支持过期时间，支持事务，消息订阅。</li>
<li>官方不支持window,但是又第三方版本。</li>
</ol>
<h3 id="1-3-Redis的应用场景"><a href="#1-3-Redis的应用场景" class="headerlink" title="1.3 Redis的应用场景"></a>1.3 Redis的应用场景</h3><h4 id="1-3-1-数据缓存（提高访问性能）"><a href="#1-3-1-数据缓存（提高访问性能）" class="headerlink" title="1.3.1 数据缓存（提高访问性能）"></a>1.3.1 数据缓存（提高访问性能）</h4><p>将一些数据在短时间之内不会发生变化，而且它们还要被频繁访问，为了提高用户的请求速度和降低网站的负载，降低数据库的读写次数，就把这些数据放到缓存中。</p>
<h4 id="1-3-2-会话缓存"><a href="#1-3-2-会话缓存" class="headerlink" title="1.3.2 会话缓存"></a>1.3.2 会话缓存</h4><p>session cache，保存web会话信息</p>
<h4 id="1-3-3-排行榜-计数器"><a href="#1-3-3-排行榜-计数器" class="headerlink" title="1.3.3 排行榜/计数器"></a>1.3.3 排行榜/计数器</h4><p>NGINX+lua+redis计数器进行IP自动封禁</p>
<h4 id="1-3-4消息队列"><a href="#1-3-4消息队列" class="headerlink" title="1.3.4消息队列"></a>1.3.4消息队列</h4><p>构建实时消息系统，聊天，群聊</p>
<h2 id="2-redis的数据类型"><a href="#2-redis的数据类型" class="headerlink" title="2. redis的数据类型"></a>2. redis的数据类型</h2><p>使用Redis进行应用设计和开发的一个核心概念是数据类型。与关系数据库不同，在Redis中不存在需要我们担心的表，在使用Redis进行应用设计和开发时，我们首先应该考虑的是Redis原生支持的哪种数据类型阳适合我们的应该场景，此外，我们无法像在关系数据库中那样，使用sql来操作Redis中的数据，相反，我们需要直接使用API发送数据反对应的命令，来操作想要操作的数据</p>
<h3 id="2-1-字符串类型"><a href="#2-1-字符串类型" class="headerlink" title="2.1 字符串类型"></a>2.1 字符串类型</h3><p><code>Map&lt;String,String&gt;</code><br>字符串类型是编程语言和应用程序中最常见和最有用的数据类型，也是Redis的基本数据类型之一，事实上，Redis中所有键都必须是字符串。</p>
<h3 id="2-2-list数据类型"><a href="#2-2-list数据类型" class="headerlink" title="2.2 list数据类型"></a>2.2 list数据类型</h3><p><code>Map&lt;String,List&lt;Object&gt;&gt;</code><br>列表是应用我只是应该程序开发中非常有用的数据类型之一，列表能存在一组对象，因此它也可以被用于栈或者队列，在Redis中，与键相关的联的值可以是字符串组成的列表，Redis中的列表更像是数据结构中的双向链表。</p>
<h3 id="2-3-hash数据类型"><a href="#2-3-hash数据类型" class="headerlink" title="2.3 hash数据类型"></a>2.3 hash数据类型</h3><p><code>Map&lt;String,Map&lt;Object,Object&gt;&gt;</code><br>哈希表示字段和值之间的映射关系，与JAVA中的Map类似，Redis数据集本身就可以看做一个哈希，其中字符串类型的键关联到如字符串和列表之类的数据对象，而Reidis的数据对象也可以再次使用哈希，其字段和值必须 是字符串。</p>
<h3 id="2-4-set数据类型"><a href="#2-4-set数据类型" class="headerlink" title="2.4 set数据类型"></a>2.4 set数据类型</h3><p><code>Map&lt;String,Set&lt;Object,Object&gt;&gt;</code><br>集合类型是由唯一，无序对象组成的集合(collection).它经常用于测试某个成员是集合中，重复项删除和集合运算（求并，交，差集），Redis的值对象可以是字符串集合。</p>
<h3 id="2-5-zset-sortset-数据类型"><a href="#2-5-zset-sortset-数据类型" class="headerlink" title="2.5 zset(sortset)数据类型"></a>2.5 zset(sortset)数据类型</h3><p>有序集合是一个类似于set但是更复杂的数据类型,单词sorted意为着这种集合中的每个元素都有一个可用于排序的权重，并且我们可以按顺序从集合中得到元素在某些需要一个保持数据有序的场景中，使用这种原生的序的特性是很方便的。</p>
<h2 id="3-Redis的相关命令详解"><a href="#3-Redis的相关命令详解" class="headerlink" title="3. Redis的相关命令详解"></a>3. Redis的相关命令详解</h2><p>关于命令的学习查询看这个网站<a href="">http://www.redis.net.cn/order/</a> </p>
<h3 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h3><pre><code>keys * 获取所有的key
select 0 选择第一个库
move myString 1 将当前的数据库key移动到某个数据库,目标库有，则不能移动
flushdb 清除指定库
randomkey  从当前数据库中随机返回
type key 类型
del key1 删除key
exists key 判断是否存在key
expire key 10 10过期
pexpire key 1000 毫秒
persist key 删除过期时间
ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</code></pre><h3 id="3-2-string"><a href="#3-2-string" class="headerlink" title="3.2 string"></a>3.2 string</h3><pre><code>set name cxx
get name
getrange name 0 -1 字符串分段   0 -1是全部   0 -2  ==n-1
getset name new_cxx 设置值，返回旧值
mset key1 key2 批量设置
mget key1 key2 批量获取
setnx key value 不存在就插入（not exists）
setrange key index value 从index开始替换value
incr age 递增
incrby age 10 递增
decr age 递减
decrby age 10 递减
incrbyfloat 增减浮点数
append 追加
strlen 长度
object encoding key  得到key 的类型  string里面有三种编码
        int  用于能够副作用64位有符号整数表示的字符串
        embstr 用于长度小于或等于44字节  Redis3.x中是39字节，这种类型的编码在内存使用时性能更好
        raw  用于长度大于44字节的</code></pre><h3 id="3-3-list"><a href="#3-3-list" class="headerlink" title="3.3 list"></a>3.3 list</h3><pre><code>lpush mylist a b c 左插入
rpush mylist x y z 右插入
lrange mylist 0 -1 取出数据集合  0 -1是取出所有   0   1取第第一个和第二个
lpop mylist 弹出集合最后一个元素  弹出之后就没有了哦
rpop mylist 弹出第一个元素  弹出之后就没有了哦
llen mylist 长度  
lrem mylist count value 删除
    |-COUNT 的值可以是以下几种：
        |--count &amp;gt; 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。
        |--count &amp;lt; 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。
        |--count = 0 : 移除表中所有与 VALUE 相等的值。
lindex mylist 2 指定索引的值
lset mylist 2 n 索引设值
ltrim mylist 0 4   
        |--对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
linsert mylist before a 插入
linsert mylist after a 插入
        |--命令用于在列表的元素前或者后插入元素。 当指定元素不存在于列表中时，不执行任何操作。 当列             表不存在时，被视为空列表，不执行任何操作。 如果 key 不是列表类型，返回一个错误。
rpoplpush list list2 转移列表的数据
        |--命令用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</code></pre><h3 id="3-4-hash"><a href="#3-4-hash" class="headerlink" title="3.4 hash"></a>3.4 hash</h3><pre><code> hset myhash name cxx
     |--命令用于为哈希表中的字段赋值 。
        |--如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。
        |--如果字段已经存在于哈希表中，旧值将被覆盖。
hget myhash name
hmset myhash name cxx age 25 note &quot;i am notes&quot;
hmget myhash name age note   
hgetall myhash 获取所有的
hexists myhash name 是否存在
hsetnx myhash score 100 设置不存在的
hincrby myhash id 1 递增
hdel myhash name 删除
hkeys myhash 只取key
hvals myhash 只取value
hlen myhash 长度</code></pre><h3 id="3-5-set"><a href="#3-5-set" class="headerlink" title="3.5 set"></a>3.5 set</h3><pre><code>  sadd myset redis 
smembers myset 数据集合
srem myset set1 删除
sismember myset set1 判断元素是否在集合中
scard key_name 个数
sdiff | sinter | sunion 操作：集合间运算：差集 | 交集 | 并集
srandmember 随机获取集合中的元素
spop 从集合中弹出一个元素</code></pre><h3 id="3-6-zset"><a href="#3-6-zset" class="headerlink" title="3.6 zset"></a>3.6 zset</h3><pre><code>zadd zset 1 one
zadd zset 2 two
zadd zset 3 three
zincrby zset 1 one 增长分数
zscore zset two 获取分数
zrange zset 0 -1 withscores 范围值
zrangebyscore zset 10 25 withscores 指定范围的值
zrangebyscore zset 10 25 withscores limit 1 2 分页
Zrevrangebyscore zset 10 25 withscores 指定范围的值
zcard zset 元素数量
Zcount zset 获得指定分数范围内的元素个数
Zrem zset one two 删除一个或多个元素
Zremrangebyrank zset 0 1 按照排名范围删除元素
Zremrangebyscore zset 0 1 按照分数范围删除元素
Zrank zset 0 -1 分数最小的元素排名为0
Zrevrank zset 0 -1 分数最大的元素排名为0
Zinterstore
zunionstore rank:last_week 7 rank:20150323 rank:20150324 rank:20150325 weights 1 1 1 1 1 1 1</code></pre>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的安装</title>
    <url>/blog/2020/04/13/linux-an-zhuang-redis/</url>
    <content><![CDATA[<h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p><a href="https://redis.io/" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="2-文件传输"><a href="#2-文件传输" class="headerlink" title="2.文件传输"></a>2.文件传输</h2><p>这没啥好说的了</p>
<h2 id="3-解压"><a href="#3-解压" class="headerlink" title="3.解压"></a>3.解压</h2><p><code>tar -zxvf redis-5.0.8.tar.gz</code></p>
<h2 id="4-拷贝"><a href="#4-拷贝" class="headerlink" title="4.拷贝"></a>4.拷贝</h2><p><code>cp -r /root/download/redis-5.0.8 /usr/local/src/redis</code></p>
<h2 id="5-编译依赖项"><a href="#5-编译依赖项" class="headerlink" title="5.编译依赖项"></a>5.编译依赖项</h2><ol>
<li><code>cd /usr/local/src/redis/deps/</code></li>
<li><code>make hiredis jemalloc lua linenoise</code></li>
</ol>
<h2 id="6-进行编译"><a href="#6-进行编译" class="headerlink" title="6.进行编译"></a>6.进行编译</h2><ol>
<li><code>cd /usr/local/src/redis</code></li>
<li><code>make</code></li>
</ol>
<h2 id="7-安装"><a href="#7-安装" class="headerlink" title="7.安装"></a>7.安装</h2><ol>
<li><code>mkdir /usr/local/redis</code></li>
<li><code>make install PREFIX=/usr/local/redis</code></li>
</ol>
<h2 id="8-验证安装是否成功"><a href="#8-验证安装是否成功" class="headerlink" title="8.验证安装是否成功"></a>8.验证安装是否成功</h2><ol>
<li><code>cd /usr/local/redis/bin</code></li>
<li><code>ls</code><br>看到如下启动文件就可以了<br><img src="http://qiniuyun.dajienihao.cn/image/0413/1.png" alt=""><br>使用which命令查看系统里面是否有redis的服务<br><code>which redis-server</code><br><img src="http://qiniuyun.dajienihao.cn/image/0413/2.png" alt="显示为没有"></li>
</ol>
<h2 id="9-把配置文件移动到-root-myredis目录"><a href="#9-把配置文件移动到-root-myredis目录" class="headerlink" title="9.把配置文件移动到/root/myredis目录"></a>9.把配置文件移动到/root/myredis目录</h2><ol>
<li><code>mkdir /root/myredis</code></li>
<li><code>cp /usr/local/src/redis/redis.conf /root/myredis</code></li>
</ol>
<h2 id="10-启动Redis"><a href="#10-启动Redis" class="headerlink" title="10.启动Redis"></a>10.启动Redis</h2><ol>
<li><code>cd /usr/local/redis/bin</code></li>
<li><code>./redis-server /root/myredis/redis.conf</code></li>
</ol>
<h2 id="11-修改后台运行"><a href="#11-修改后台运行" class="headerlink" title="11.修改后台运行"></a>11.修改后台运行</h2><p>默认情况，Redis不是在后台运行，我们需要把redis放在后台运行<br><code>vim /root/myredis/redis.conf</code><br><img src="http://qiniuyun.dajienihao.cn/image/0413/3.png" alt="将no改为yes"></p>
<h2 id="12-再次启动查看进程"><a href="#12-再次启动查看进程" class="headerlink" title="12.再次启动查看进程"></a>12.再次启动查看进程</h2><ol>
<li><code>./redis-server /usr/myredis/redis.conf</code></li>
<li>查看进程<code>ps -ef|grep redis</code>可以看到在6379端口号已启动了redis</li>
</ol>
<h2 id="13-客户端链接和退出"><a href="#13-客户端链接和退出" class="headerlink" title="13.客户端链接和退出"></a>13.客户端链接和退出</h2><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>cd /usr/local/redis/bin<br>./redis-cli  默认是-h 127.0.0.1 -p 6379 </p>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p>quit</p>
<h2 id="14-开机自启Redis的配置"><a href="#14-开机自启Redis的配置" class="headerlink" title="14.开机自启Redis的配置"></a>14.开机自启Redis的配置</h2><ol>
<li>vim /etc/rc.local</li>
<li>加入<code>/usr/local/redis/bin/redis-server /usr/myredis/redis-conf</code></li>
</ol>
<h2 id="15-bin目录的文件说明"><a href="#15-bin目录的文件说明" class="headerlink" title="15.bin目录的文件说明"></a>15.bin目录的文件说明</h2><ul>
<li>redis-benchmark：redis性能测试工具</li>
<li>redis-check-aof：检查aof日志的工具</li>
<li>redis-check-rdb：检查rdb日志的工具</li>
<li>redis-cli：连接用的客户端</li>
<li>redis-server：redis服务进程</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>docker的安装</title>
    <url>/blog/2020/04/10/docker-de-an-zhuang/</url>
    <content><![CDATA[<h2 id="1-Docker-下载"><a href="#1-Docker-下载" class="headerlink" title="1.Docker 下载"></a>1.Docker 下载</h2><p>官网 <a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a><br>仓库  <a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></p>
<h2 id="2-Docker-安装前提说明"><a href="#2-Docker-安装前提说明" class="headerlink" title="2.Docker 安装前提说明"></a>2.Docker 安装前提说明</h2><h3 id="2-1-CentOS-Docker-安装"><a href="#2-1-CentOS-Docker-安装" class="headerlink" title="2.1 CentOS Docker 安装"></a>2.1 CentOS Docker 安装</h3><p>Docker支持以下的CentOS版本：</p>
<ul>
<li>CentOS 7 (64-bit)</li>
<li>CentOS 6.5 (64-bit) 或更高的版本</li>
</ul>
<h3 id="2-2-前提条件"><a href="#2-2-前提条件" class="headerlink" title="2.2 前提条件"></a>2.2 前提条件</h3><p>目前，CentOS 仅发行版本中的内核支持 Docker。</p>
<ul>
<li>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10以上。[我们基于7以上的版本来讲的哦]。</li>
<li>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</li>
</ul>
<h3 id="2-3-查看自己的内核"><a href="#2-3-查看自己的内核" class="headerlink" title="2.3 查看自己的内核"></a>2.3 查看自己的内核</h3><p>uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。<br><code>uname -r</code> </p>
<blockquote>
<p>注意在centos6.5下面也可以安装。但是有点麻烦。想装的可以自己去查资源</p>
</blockquote>
<h2 id="3-docker安装"><a href="#3-docker安装" class="headerlink" title="3.docker安装"></a>3.docker安装</h2><h3 id="3-1-centos下安装Docker文档"><a href="#3-1-centos下安装Docker文档" class="headerlink" title="3.1 centos下安装Docker文档"></a>3.1 centos下安装Docker文档</h3><p><a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/</a></p>
<h3 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h3><h4 id="3-2-1-确定是centos7的版本"><a href="#3-2-1-确定是centos7的版本" class="headerlink" title="3.2.1 确定是centos7的版本"></a>3.2.1 确定是centos7的版本</h4><h4 id="3-2-2-yum安装gcc相关"><a href="#3-2-2-yum安装gcc相关" class="headerlink" title="3.2.2 yum安装gcc相关"></a>3.2.2 yum安装gcc相关</h4><ol>
<li><code>yum -y install gcc</code></li>
<li><code>yum -y install gcc-c++</code></li>
</ol>
<h4 id="3-2-3-安装方法"><a href="#3-2-3-安装方法" class="headerlink" title="3.2.3 安装方法"></a>3.2.3 安装方法</h4><p> <code>yum install docker</code></p>
<h4 id="3-2-4-启动docker"><a href="#3-2-4-启动docker" class="headerlink" title="3.2.4 启动docker"></a>3.2.4 启动docker</h4><p><code>systemctl start docker</code><br><code>systemctl enable docker</code> 开机自启</p>
<h4 id="3-2-5-查看版本"><a href="#3-2-5-查看版本" class="headerlink" title="3.2.5 查看版本"></a>3.2.5 查看版本</h4><p><code>docker version</code></p>
<h2 id="4-测试运行-hello-world"><a href="#4-测试运行-hello-world" class="headerlink" title="4.测试运行 hello-world"></a>4.测试运行 hello-world</h2><p> <code>docker run hello-world</code><br>由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</p>
<h2 id="5-测试运行nginx"><a href="#5-测试运行nginx" class="headerlink" title="5.测试运行nginx"></a>5.测试运行nginx</h2><ol>
<li>拉取下来<code>docker pull nginx</code></li>
<li>启动<code>docker run -d -p 80:80 nginx</code> 将端口映射为80,不可以不写。</li>
</ol>
<p>测试访问<a href="http://192.168.247.129:80" target="_blank" rel="noopener">http://192.168.247.129:80</a></p>
<h2 id="6-docker加速配置"><a href="#6-docker加速配置" class="headerlink" title="6.docker加速配置"></a>6.docker加速配置</h2><h3 id="为什么要加速"><a href="#为什么要加速" class="headerlink" title="为什么要加速"></a>为什么要加速</h3><p>因为docker的运行需要在本地有相关的镜像，如果本地没有，就会去镜像仓库里面下载到本地，再运行，有时候下载比较慢，所以要配置镜像加速<br>阿里云的加速。</p>
<ol>
<li>编辑<code>vim /etc/docker/daemon.json</code></li>
<li>添加<code>&quot;registry-mirrors&quot;: [&quot;https://o26dr81d.mirror.aliyuncs.com&quot;]</code></li>
<li>刷新<code>systemctl daemon-reload</code></li>
<li>重启<code>systemctl restart docker</code></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下安装nginx</title>
    <url>/blog/2020/04/09/linux-xia-an-zhuang-nginx/</url>
    <content><![CDATA[<h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="2-先安装nginx依赖的包"><a href="#2-先安装nginx依赖的包" class="headerlink" title="2.先安装nginx依赖的包"></a>2.先安装nginx依赖的包</h2><h3 id="2-1-gcc"><a href="#2-1-gcc" class="headerlink" title="2.1 gcc"></a>2.1 gcc</h3><p>安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc。<br><code>Yum install gcc-c++</code></p>
<h3 id="2-2-PCRE"><a href="#2-2-PCRE" class="headerlink" title="2.2 PCRE"></a>2.2 PCRE</h3><p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。<br><code>yum install -y pcre pcre-devel</code></p>
<h3 id="2-3-zlib"><a href="#2-3-zlib" class="headerlink" title="2.3 zlib"></a>2.3 zlib</h3><p>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。<br><code>yum install -y zlib zlib-devel</code></p>
<h3 id="2-4-openssl"><a href="#2-4-openssl" class="headerlink" title="2.4 openssl"></a>2.4 openssl</h3><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。 nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。<br> <code>yum install -y openssl openssl-devel</code></p>
<h2 id="3-上传nginx到linux"><a href="#3-上传nginx到linux" class="headerlink" title="3.上传nginx到linux"></a>3.上传nginx到linux</h2><p>这就不说了</p>
<h2 id="4-解压拷贝"><a href="#4-解压拷贝" class="headerlink" title="4.解压拷贝"></a>4.解压拷贝</h2><ol>
<li>解压nginx-1.16.1.tar.gz包<code>tar -zxvf nginx-1.16.1.tar.gz</code></li>
<li>修改文件夹的名字<code>mv nginx-1.16.1 nginx</code></li>
<li>把nginx拷贝到/usr/local/src里面<code>cp -r nginx /usr/local/src</code></li>
</ol>
<h2 id="5-安装"><a href="#5-安装" class="headerlink" title="5.安装"></a>5.安装</h2><ol>
<li>进入nginx的目录<code>cd /usr/local/src/nginx</code></li>
<li>创建nginx的安装目录<code>mkdir  /usr/nginx</code></li>
<li>运行configure<code>./configure --prefix=/usr/nginx</code>(指定安装目录编译)</li>
<li>make编译<code>make</code></li>
<li>编译安装<code>make install</code></li>
</ol>
<h2 id="6-Nginx的目录说明"><a href="#6-Nginx的目录说明" class="headerlink" title="6.Nginx的目录说明"></a>6.Nginx的目录说明</h2><p><strong>conf</strong>:配置目录<br><strong>html</strong>:静态文件[cdn加速]<br><strong>logs</strong>:日志目录<br><strong>sbin</strong>:执行文件</p>
<h2 id="7-Nginx的启动、停止"><a href="#7-Nginx的启动、停止" class="headerlink" title="7.Nginx的启动、停止"></a>7.Nginx的启动、停止</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol>
<li><code>cd /usr/nginx/sbin</code></li>
<li><code>./nginx</code>  </li>
</ol>
<h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><p><code>./nginx -s stop</code></p>
<h3 id="刷新-当用户修改了conf-nginx-conf"><a href="#刷新-当用户修改了conf-nginx-conf" class="headerlink" title="刷新[当用户修改了conf/nginx.conf]"></a>刷新[当用户修改了conf/nginx.conf]</h3><p> <code>./nginx -s reload</code></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下安装mysql 5.7</title>
    <url>/blog/2020/04/08/linux-xia-an-zhuang-mysql5.7/</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">下载地址</a><br><img src="http://qiniuyun.dajienihao.cn/image/0408/01.jpg" alt=""></p>
<h2 id="xftp传输"><a href="#xftp传输" class="headerlink" title="xftp传输"></a>xftp传输</h2><p>这就不说了</p>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><ol>
<li>先创建个文件夹准备放解压后的文件<code>mkdir /usr/local/mysql</code></li>
<li>然后到你存放刚才传输的目录<code>tar -zxvf mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz  -C /usr/local/mysql/</code></li>
<li>解压完后到解压的目录<code>cd /usr/local/mysql</code></li>
<li>给文件夹改名<code>mv mysql-5.7.29-linux-glibc2.12-x86_64/ mysql</code></li>
</ol>
<h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><h3 id="1-进入安装mysql软件目录"><a href="#1-进入安装mysql软件目录" class="headerlink" title="1.进入安装mysql软件目录"></a>1.进入安装mysql软件目录</h3><p><code>cd /usr/local/mysql/mysql</code></p>
<h3 id="2-创建数据仓库目录"><a href="#2-创建数据仓库目录" class="headerlink" title="2.创建数据仓库目录"></a>2.创建数据仓库目录</h3><ol>
<li><code>mkdir /data</code></li>
<li><code>mkdir /data/mysql</code></li>
</ol>
<h3 id="3-新建mysql用户、组及目录"><a href="#3-新建mysql用户、组及目录" class="headerlink" title="3.新建mysql用户、组及目录"></a>3.新建mysql用户、组及目录</h3><ol>
<li>新建一个msyql组<code>groupadd mysql</code></li>
<li>新建msyql用户禁止登录shell<code>useradd -r -s /sbin/nologin -g mysql mysql -d /usr/local/mysql/mysql</code></li>
</ol>
<h3 id="4-改变目录属有者"><a href="#4-改变目录属有者" class="headerlink" title="4.改变目录属有者"></a>4.改变目录属有者</h3><ol>
<li><code>cd /usr/local/mysql</code></li>
<li><code>chown -R mysql .</code></li>
<li><code>chgrp -R mysql .</code><br>数据库目录<br><code>chown -R mysql /data/mysql</code></li>
</ol>
<h3 id="5-配置参数"><a href="#5-配置参数" class="headerlink" title="5.配置参数"></a>5.配置参数</h3><ol>
<li><code>bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/mysql --datadir=/data/mysql</code><br><img src="http://qiniuyun.dajienihao.cn/image/0408/02.jpg" alt=""><br>此处需要注意记录生成的临时密码,如上文fdaD%PVNj67S</li>
<li><code>bin/mysql_ssl_rsa_setup --datadir=/data/mysql</code></li>
</ol>
<h3 id="6-修改系统配置文件"><a href="#6-修改系统配置文件" class="headerlink" title="6.修改系统配置文件"></a>6.修改系统配置文件</h3><ol>
<li><code>cd /usr/local/mysql/mysql/support-files</code></li>
<li><code>cp my-default.cnf /etc/my.cnf</code><blockquote>
<p>这里没有话就跳过,去查看这个地址有没有my.cnf文件。如果就把权限改了<code>chmod 777 my.cnf</code></p>
</blockquote>
</li>
<li><code>cp mysql.server /etc/init.d/mysql</code></li>
<li><code>vim /etc/init.d/mysql</code>修改以下内容<br><img src="http://qiniuyun.dajienihao.cn/image/0408/03.jpg" alt=""></li>
</ol>
<h3 id="7-启动mysql"><a href="#7-启动mysql" class="headerlink" title="7.启动mysql"></a>7.启动mysql</h3><ol>
<li><code>/etc/init.d/mysql start</code><blockquote>
<p>如果无法启动执行下面命令<code>chmod 777 /etc/my.cnf</code>再执行<code>/etc/init.d/mysql start</code></p>
</blockquote>
</li>
</ol>
<p><img src="http://qiniuyun.dajienihao.cn/image/0408/04.jpg" alt="这就启动成功了"></p>
<h3 id="8-登陆并改密码"><a href="#8-登陆并改密码" class="headerlink" title="8.登陆并改密码"></a>8.登陆并改密码</h3><ol>
<li>登陆的bin目录下执行<code>mysql  -u root -p</code><blockquote>
<p>如果出现：-bash: mysql: command not found 就执行：<code>ln -s /usr/local/mysql/mysql/bin/mysql /usr/bin</code> 没有出现就不用执行</p>
</blockquote>
</li>
<li>然后键入刚才的临时密码 成功了</li>
<li><code>set password=password(&#39;root&#39;);</code><br><img src="http://qiniuyun.dajienihao.cn/image/0408/05.jpg" alt=""></li>
</ol>
<h3 id="9-添加系统路径【为设置开机启动提供】"><a href="#9-添加系统路径【为设置开机启动提供】" class="headerlink" title="9.添加系统路径【为设置开机启动提供】"></a>9.添加系统路径【为设置开机启动提供】</h3><ol>
<li><code>vim /etc/profile</code>添加：<code>export PATH=/usr/local/mysql/mysql/bin:$PATH</code><br><img src="http://qiniuyun.dajienihao.cn/image/0408/06.jpg" alt=""></li>
<li><code>source /etc/profile</code></li>
</ol>
<h3 id="10-配置mysql自动启动"><a href="#10-配置mysql自动启动" class="headerlink" title="10.配置mysql自动启动"></a>10.配置mysql自动启动</h3><ol>
<li>chmod 755 /etc/init.d/mysql</li>
<li>chkconfig –add mysql</li>
<li>chkconfig –level 345 mysql on</li>
</ol>
<h2 id="navcat连接远程的mysql"><a href="#navcat连接远程的mysql" class="headerlink" title="navcat连接远程的mysql"></a>navcat连接远程的mysql</h2><p>设置root账户的host地址（修改了才可以远程连接）</p>
<ol>
<li>mysql -uroot -p</li>
<li>键入密码</li>
<li>mysql&gt;grant all privileges on <em>.</em> to ‘root’@’%’ identified by ‘root’;</li>
<li>mysql&gt;flush privileges;<br><img src="http://qiniuyun.dajienihao.cn/image/0408/07.jpg" alt=""></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下安装tomcat</title>
    <url>/blog/2020/04/08/linux-xia-an-zhuang-tomcat/</url>
    <content><![CDATA[<h2 id="jdk的安装"><a href="#jdk的安装" class="headerlink" title="jdk的安装"></a>jdk的安装</h2><p>这一步就不说了 现在centos7里jdk是安装好了的</p>
<h2 id="下载tomcat"><a href="#下载tomcat" class="headerlink" title="下载tomcat"></a>下载tomcat</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0408/1.jpg" alt=""><br>这里我把下载链接给大家<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">点击进入</a><br><img src="http://qiniuyun.dajienihao.cn/image/0408/2.jpg" alt=""><br>注意千万别下成图上框中的文件，下的是二进制带src的包，里边少了很多东西，后面是没法运行起来的。</p>
<h2 id="使用xftp传输"><a href="#使用xftp传输" class="headerlink" title="使用xftp传输"></a>使用xftp传输</h2><p>这也没啥好说的</p>
<h2 id="解压运行"><a href="#解压运行" class="headerlink" title="解压运行"></a>解压运行</h2><p>先创建个文件夹准备放解压后的文件<br><code>mkdir /usr/local/tomcat</code><br>然后到你存放刚才传输的目录<br><code>tar -zxvf apache-tomcat-8.5.53.tar.gz  -C /usr/local/tomcat/</code><br>解压完后到解压的目录<br><code>cd /usr/local/tomcat/apache-tomcat-8.5.53</code><br>然后执行 启动命令<br><code>bin/startup.sh</code><br>如果最后一句出现Tomcat started.就说明tomcat启动起来了</p>
<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><h3 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h3><p>使用<code>systemctl status firewalld.service</code>查看防火墙状态<br>如果是下面情况说明你的防火墙在开着。反之是在关着，就不用再看下面一步操作了。<br><img src="http://qiniuyun.dajienihao.cn/image/0408/3.jpg" alt="启动状态"></p>
<h3 id="关闭防火墙-1"><a href="#关闭防火墙-1" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>使用<code>systemctl stop firewalld.service</code>命令关闭防火墙，再次使用上面查看防火墙的命令查看。如果是下面状态，说明防火墙已经关闭。<br><img src="http://qiniuyun.dajienihao.cn/image/0408/4.jpg" alt="关闭状态"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>输入你的ip加8080端口访问,出现下面界面就说明已经成功了。<br><img src="http://qiniuyun.dajienihao.cn/image/0408/5.png" alt=""></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>安装tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>vm安装centos7</title>
    <url>/blog/2020/04/07/vm-zhong-an-zhuang-centos7/</url>
    <content><![CDATA[<h1 id="linux的安装"><a href="#linux的安装" class="headerlink" title="linux的安装"></a>linux的安装</h1><h2 id="1-安装vmware"><a href="#1-安装vmware" class="headerlink" title="1.安装vmware"></a>1.安装vmware</h2><p>安装软件应该是都会的这里就不说了</p>
<h2 id="2-下载centos7镜像"><a href="#2-下载centos7镜像" class="headerlink" title="2.下载centos7镜像"></a>2.下载centos7镜像</h2><p><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>选中下一步<br><img src="http://qiniuyun.dajienihao.cn/image/0407/1.png" alt=""></p>
<h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>选中下一步<br><img src="http://qiniuyun.dajienihao.cn/image/0407/2.png" alt=""></p>
<h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><p>选中下一步<br><img src="http://qiniuyun.dajienihao.cn/image/0407/3.png" alt=""></p>
<h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2><p>选中下一步<br><img src="http://qiniuyun.dajienihao.cn/image/0407/4.png" alt=""></p>
<h2 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h2><p>选中下一步<br><img src="http://qiniuyun.dajienihao.cn/image/0407/5.png" alt=""></p>
<h2 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0407/6.png" alt=""></p>
<h2 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h2><p>选择下载的镜像文件的位置<br><img src="http://qiniuyun.dajienihao.cn/image/0407/7.png" alt=""></p>
<h2 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h2><p>第一行回车<br><img src="http://qiniuyun.dajienihao.cn/image/0407/8.png" alt=""></p>
<h2 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0407/9.png" alt=""></p>
<h2 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h2><p>选择正确的时区，中国上海 调整时间<br><img src="http://qiniuyun.dajienihao.cn/image/0407/10.png" alt=""></p>
<h2 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0407/11.png" alt=""></p>
<h2 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h2><p>选中 完成<br><img src="http://qiniuyun.dajienihao.cn/image/0407/12.png" alt=""></p>
<h2 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0407/13.png" alt=""></p>
<h2 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h2><p>选中 完成<br><img src="http://qiniuyun.dajienihao.cn/image/0407/14.png" alt=""></p>
<h2 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0407/15.png" alt=""></p>
<h2 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h2><p>以上一步骤将框中的分别添加进去<br><img src="http://qiniuyun.dajienihao.cn/image/0407/16.png" alt=""></p>
<h2 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0407/17.png" alt=""></p>
<h2 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0407/18.png" alt=""></p>
<h2 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h2><p>打开网卡 完成<br><img src="http://qiniuyun.dajienihao.cn/image/0407/19.png" alt=""></p>
<h2 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h2><p>分别设置root账户密码 和创建用户<br><img src="http://qiniuyun.dajienihao.cn/image/0407/20.png" alt=""></p>
<h2 id="23"><a href="#23" class="headerlink" title="23."></a>23.</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0407/21.png" alt=""></p>
<h2 id="24"><a href="#24" class="headerlink" title="24."></a>24.</h2><p>设置完成后 完成配置重启<br><img src="http://qiniuyun.dajienihao.cn/image/0407/22.png" alt=""></p>
<h2 id="25"><a href="#25" class="headerlink" title="25."></a>25.</h2><p>第一次重启会进入这个页面<br><img src="http://qiniuyun.dajienihao.cn/image/0407/23.png" alt=""></p>
<h2 id="26"><a href="#26" class="headerlink" title="26."></a>26.</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0407/24.png" alt=""></p>
<h2 id="27"><a href="#27" class="headerlink" title="27."></a>27.</h2><p>进到此页面输入密码即可<br><img src="http://qiniuyun.dajienihao.cn/image/0407/666.png" alt=""></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus代码生成器</title>
    <url>/blog/2020/04/06/mybatis-plus-dai-ma-sheng-cheng-qi/</url>
    <content><![CDATA[<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>generator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>tmp<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerator</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>
     * 读取控制台内容
     * &lt;/p>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">scanner</span><span class="token punctuation">(</span>String tip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        StringBuilder help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        help<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"请输入"</span> <span class="token operator">+</span> tip <span class="token operator">+</span> <span class="token string">"："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>help<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String ipt <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>ipt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> ipt<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusException</span><span class="token punctuation">(</span><span class="token string">"请输入正确的"</span> <span class="token operator">+</span> tip <span class="token operator">+</span> <span class="token string">"！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 代码生成器</span>
        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 全局配置</span>
        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"Dajie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 数据源配置</span>
        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/mybatisplus?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 包配置</span>
        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span><span class="token function">scanner</span><span class="token punctuation">(</span><span class="token string">"模块名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.ahdy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setServiceImpl</span><span class="token punctuation">(</span><span class="token string">"service.impl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"domain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setXml</span><span class="token punctuation">(</span><span class="token string">"mapper.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 策略配置</span>
        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置表名和字段名的下划线改为驼峰命名规则</span>
        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//是否启用lombok</span>
        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//是否生成restController</span>
        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//生成多表，不设置生成所有</span>
        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token function">scanner</span><span class="token punctuation">(</span><span class="token string">"表名，多个英文逗号分割"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//表名前缀</span>
        strategy<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">getModuleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpg<span class="token punctuation">.</span><span class="token function">setTemplateEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FreemarkerTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>mybatisplus</category>
      </categories>
      <tags>
        <tag>mybatisplus</tag>
        <tag>代码生成器</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot集成mybatis-plus</title>
    <url>/blog/2020/04/06/springboot-ji-cheng-mybatisplus/</url>
    <content><![CDATA[<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>springboot集成mybatisplus就较为容易了，我们先建立springboot项目，选择所需要的依赖，然后将mybatisplus的依赖添加进去。</p>
<pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">21</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>tmp<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre>
<h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Spring boot方式</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.baomidou.cloud.service.*.mapper*"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        PaginationInterceptor paginationInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span>
        <span class="token comment" spellcheck="true">// paginationInterceptor.setOverflow(false);</span>
        <span class="token comment" spellcheck="true">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span>
        <span class="token comment" spellcheck="true">// paginationInterceptor.setLimit(500);</span>
        <span class="token comment" spellcheck="true">// 开启 count 的 join 优化,只针对部分 left join</span>
        paginationInterceptor<span class="token punctuation">.</span><span class="token function">setCountSqlParser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsqlParserCountOptimize</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> paginationInterceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="配置yml文件"><a href="#配置yml文件" class="headerlink" title="配置yml文件"></a>配置yml文件</h2><pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8080</span>
spring<span class="token operator">:</span>
  datasource<span class="token operator">:</span> #数据源配置
    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver
    url<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>mybatisplus<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span>UTC
    username<span class="token operator">:</span> root
    password<span class="token operator">:</span> root
    druid<span class="token operator">:</span>
      max<span class="token operator">-</span>active<span class="token operator">:</span> <span class="token number">10</span>
      min<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">5</span>
      max<span class="token operator">-</span>wait<span class="token operator">:</span> <span class="token number">5000</span>
      initial<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">5</span>
      validation<span class="token operator">-</span>query<span class="token operator">:</span> select <span class="token number">1</span>
      stat<span class="token operator">-</span>view<span class="token operator">-</span>servlet<span class="token operator">:</span>
        enabled<span class="token operator">:</span> <span class="token boolean">true</span>
        login<span class="token operator">-</span>username<span class="token operator">:</span> admin
        login<span class="token operator">-</span>password<span class="token operator">:</span> admin
        allow<span class="token operator">:</span>
        deny<span class="token operator">:</span>
        url<span class="token operator">-</span>pattern<span class="token operator">:</span> <span class="token string">"/druid/*"</span>
  thymeleaf<span class="token operator">:</span>
    cache<span class="token operator">:</span> <span class="token boolean">false</span>
#mybatisplus的配置
mybatis<span class="token operator">-</span>plus<span class="token operator">:</span>
  mapper<span class="token operator">-</span>locations<span class="token operator">:</span>
    <span class="token operator">-</span> classpath<span class="token operator">:</span>mapper<span class="token operator">/</span><span class="token operator">*</span>Mapper<span class="token punctuation">.</span>xml
  global<span class="token operator">-</span>config<span class="token operator">:</span>
    db<span class="token operator">-</span>config<span class="token operator">:</span>
      id<span class="token operator">-</span>type<span class="token operator">:</span> auto
  configuration<span class="token operator">:</span>
    log<span class="token operator">-</span>impl<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>StdOutImpl</code></pre>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">SpringbootMybatisplusApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        IPage<span class="token operator">&lt;</span>User<span class="token operator">></span>page<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> total <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span>queryWrapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Integer id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
        String name<span class="token operator">=</span><span class="token string">"c"</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>id<span class="token operator">!=</span>null<span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">.</span><span class="token function">getSqlSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>mybatisplus</category>
      </categories>
      <tags>
        <tag>mybatisplus</tag>
        <tag>springboot</tag>
        <tag>整合</tag>
      </tags>
  </entry>
  <entry>
    <title>spring集成mybatis-plus</title>
    <url>/blog/2020/04/06/spring-ji-cheng-mybatisplus/</url>
    <content><![CDATA[<h3 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> jar包版本声明 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>properties<span class="token operator">></span>
        <span class="token operator">&lt;</span>mybatisplus<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>mybatisplus<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>spring<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">24</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>spring<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>druid<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">21</span><span class="token operator">&lt;</span><span class="token operator">/</span>druid<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>mysql<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">47</span><span class="token operator">&lt;</span><span class="token operator">/</span>mysql<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>log4j<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token operator">&lt;</span><span class="token operator">/</span>log4j<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>lombok<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token operator">&lt;</span><span class="token operator">/</span>lombok<span class="token punctuation">.</span>version<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>

    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>lombok<span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>lombok<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
            <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>mybatisplus<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 导入spring <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>aspects<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> springmvc <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>webmvc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> mysql数据库驱动 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>mysql<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> druid <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>druid<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> log4j <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>log4j<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre>
<h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><h4 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h4><pre class=" language-java"><code class="language-java">driverClassName<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver
url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>mybatisplus<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span>UTC
username<span class="token operator">=</span>root
password<span class="token operator">=</span>root
initialSize<span class="token operator">=</span><span class="token number">5</span>
maxActive<span class="token operator">=</span><span class="token number">20</span>
minIdle<span class="token operator">=</span><span class="token number">5</span>
maxIdle<span class="token operator">=</span><span class="token number">10</span>
filters<span class="token operator">=</span>stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j</code></pre>
<h4 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h4><pre class=" language-java"><code class="language-java"># Global logging configuration
log4j<span class="token punctuation">.</span>rootLogger<span class="token operator">=</span>DEBUG<span class="token punctuation">,</span> stdout
# MyBatis logging configuration<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
log4j<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>example<span class="token punctuation">.</span>BlogMapper<span class="token operator">=</span>TRACE
# Console output<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
log4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>stdout<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>ConsoleAppender
log4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>layout<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>PatternLayout
log4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>ConversionPattern<span class="token operator">=</span><span class="token operator">%</span>5p <span class="token punctuation">[</span><span class="token operator">%</span>t<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">%</span>m<span class="token operator">%</span>n</code></pre>
<h4 id="application-dao-xml"><a href="#application-dao-xml" class="headerlink" title="application-dao.xml"></a>application-dao.xml</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>
    xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>
    xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">4.3</span><span class="token punctuation">.</span>xsd"<span class="token operator">></span>


    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置文件 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder
        location<span class="token operator">=</span><span class="token string">"classpath:db.properties"</span> system<span class="token operator">-</span>properties<span class="token operator">-</span>mode<span class="token operator">=</span><span class="token string">"FALLBACK"</span> <span class="token operator">/</span><span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 声明数据源 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span>
        <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入相关属性 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"${driverClassName}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"${url}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"${username}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"${password}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"initialSize"</span> value<span class="token operator">=</span><span class="token string">"${initialSize}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxActive"</span> value<span class="token operator">=</span><span class="token string">"${maxActive}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"minIdle"</span> value<span class="token operator">=</span><span class="token string">"${minIdle}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"filters"</span> value<span class="token operator">=</span><span class="token string">"${filters}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置sqlSessionFacotry <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span>
    <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入数据源 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置mapper<span class="token punctuation">.</span>xml <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"mapperLocations"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>array<span class="token operator">></span>
                <span class="token operator">&lt;</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>mapper<span class="token operator">/</span><span class="token operator">*</span>Mapper<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>array<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"plugins"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>array<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置分页插件 <span class="token operator">--</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>array<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置扫描mapper接口的对象 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"basePackage"</span>
            value<span class="token operator">=</span><span class="token string">"com.sxt.mapper"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"basePackage"</span><span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span> com<span class="token punctuation">.</span>sxt<span class="token punctuation">.</span>mapper com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>mapper 
            <span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sqlSessionFactoryBeanName"</span> value<span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre>
<h4 id="application-service-xml"><a href="#application-service-xml" class="headerlink" title="application-service.xml"></a>application-service.xml</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>
       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>
       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>
       xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>
       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>
       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">4.3</span><span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token operator">-</span><span class="token number">4.3</span><span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token operator">-</span><span class="token number">4.3</span><span class="token punctuation">.</span>xsd"<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 扫描servie <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.ahdy.service.impl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置文件 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder
            location<span class="token operator">=</span><span class="token string">"classpath:db.properties"</span> system<span class="token operator">-</span>properties<span class="token operator">-</span>mode<span class="token operator">=</span><span class="token string">"FALLBACK"</span> <span class="token operator">/</span><span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 声明数据源 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span>
          <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入相关属性 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"${driverClassName}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"${url}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"${username}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"${password}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"initialSize"</span> value<span class="token operator">=</span><span class="token string">"${initialSize}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxActive"</span> value<span class="token operator">=</span><span class="token string">"${maxActive}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"minIdle"</span> value<span class="token operator">=</span><span class="token string">"${minIdle}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"filters"</span> value<span class="token operator">=</span><span class="token string">"${filters}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 声明事务管理器 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事务的传播特性 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>tx<span class="token operator">:</span>advice id<span class="token operator">=</span><span class="token string">"myAdvise"</span> transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"insert*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"add*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"save*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"update*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"del*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"reset*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"change*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"get*"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"*"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>advice<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事务切面 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>
        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut expression<span class="token operator">=</span><span class="token string">"execution(* com.ahdy.service.impl.*.*(..))"</span> id<span class="token operator">=</span><span class="token string">"pc"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 织入 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>advisor advice<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"myAdvise"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pc"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre>
<h4 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>
       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>
       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>
       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>
       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token keyword">import</span> resource<span class="token operator">=</span><span class="token string">"classpath:application-dao.xml"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token keyword">import</span> resource<span class="token operator">=</span><span class="token string">"classpath:application-service.xml"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre>
<h3 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="service接口"><a href="#service接口" class="headerlink" title="service接口"></a>service接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="service实现类"><a href="#service实现类" class="headerlink" title="service实现类"></a>service实现类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>BaseMapper<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">,</span>User<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>mybatisplus</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mybatisplus</tag>
        <tag>整合</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus简介</title>
    <url>/blog/2020/04/06/mybatis-plus-jian-jie/</url>
    <content><![CDATA[<h2 id="mybatis-plus"><a href="#mybatis-plus" class="headerlink" title="mybatis-plus"></a>mybatis-plus</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0404/logo.png" alt="MyBatis-Plus为简化开发而生"></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<blockquote>
<p><strong>愿景</strong><br>我们的愿景是成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。</p>
</blockquote>
<p><img src="http://qiniuyun.dajienihao.cn/image/0404/relationship-with-mybatis.png" alt=""></p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<h3 id="支持数据库"><a href="#支持数据库" class="headerlink" title="支持数据库"></a>支持数据库</h3><ul>
<li>mysql 、 mariadb 、 oracle 、 db2 、 h2 、 hsql 、 sqlite 、 postgresql 、 sqlserver</li>
<li>达梦数据库 、 虚谷数据库 、 人大金仓数据库</li>
</ul>
<h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p><img src="http://qiniuyun.dajienihao.cn/image/0404/mybatis-plus-framework.jpg" alt=""></p>
]]></content>
      <categories>
        <category>mybatisplus</category>
      </categories>
      <tags>
        <tag>mybatisplus</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>DateTimeFormat和JsonFormat 注解</title>
    <url>/blog/2020/03/26/qian-hou-duan-shi-jian-lei-xing-zhuan-huan/</url>
    <content><![CDATA[<h2 id="DateTimeFormat和-JsonFormat注解的使用"><a href="#DateTimeFormat和-JsonFormat注解的使用" class="headerlink" title="@DateTimeFormat和@JsonFormat注解的使用"></a>@DateTimeFormat和@JsonFormat注解的使用</h2><p>从数据库获取时间传到前端进行展示的时候，我们有时候可能无法得到一个满意的时间格式的时间日期，在数据库中显示的是正确的时间格式，获取出来却变成了很丑的时间戳，<code>@JsonForma</code>t注解很好的解决了这个问题，我们通过使用<code>@JsonFormat</code>可以很好的解决：后台到前台时间格式保持一致的问题，其次，另一个问题是，我们在使用WEB服务的时，可能会需要用到，传入时间给后台，比如注册新用户需要填入出生日期等，这个时候前台传递给后台的时间格式同样是不一致的，而我们的与之对应的便有了另一个注解，<code>@DataTimeFormat</code>便很好的解决了这个问题，接下来记录一下具体的<code>@JsonFormat与DateTimeFormat</code>的使用过程。</p>
<h3 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat"></a>@JsonFormat</h3><h4 id="1-使用maven引入-JsonFormat所需要的jar包，我贴一下我这里的pom文件的依赖"><a href="#1-使用maven引入-JsonFormat所需要的jar包，我贴一下我这里的pom文件的依赖" class="headerlink" title="1.使用maven引入@JsonFormat所需要的jar包，我贴一下我这里的pom文件的依赖"></a>1.使用maven引入@JsonFormat所需要的jar包，我贴一下我这里的pom文件的依赖</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jackson<span class="token operator">-</span>annotations<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.8</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
<span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jackson<span class="token operator">-</span>databind<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.8</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
<span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>jackson<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jackson<span class="token operator">-</span>mapper<span class="token operator">-</span>asl<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.9</span><span class="token punctuation">.</span><span class="token number">13</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<h4 id="2-在你需要查询出来的时间的数据库字段对应的实体类的属性上添加-JsonFormat"><a href="#2-在你需要查询出来的时间的数据库字段对应的实体类的属性上添加-JsonFormat" class="headerlink" title="2.在你需要查询出来的时间的数据库字段对应的实体类的属性上添加@JsonFormat"></a>2.在你需要查询出来的时间的数据库字段对应的实体类的属性上添加@JsonFormat</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//设置时区为上海时区，时间格式自己据需求定。</span>
    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Date testTime<span class="token punctuation">;</span>

    <span class="token keyword">public</span> Date <span class="token function">gettestTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> testTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">settestTime</span><span class="token punctuation">(</span>Date testTimee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>testTime<span class="token operator">=</span> testTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>这里解释一下：@JsonFormat(pattern=”yyyy-MM-dd”,timezone = “GMT+8”)<br>pattern:是你需要转换的时间日期的格式<br>timezone：jackson在序列化时间时是按照国际标准时间GMT进行格式化的，而在国内默认时区使用的是CST时区，两者相差8小时。</p>
</blockquote>
<h4 id="3-完成上面两步之后，我们用对应的实体类来接收数据库查询出来的结果时就完成了时间格式的转换，再返回给前端时就是一个符合我们设置的时间格式了"><a href="#3-完成上面两步之后，我们用对应的实体类来接收数据库查询出来的结果时就完成了时间格式的转换，再返回给前端时就是一个符合我们设置的时间格式了" class="headerlink" title="3.完成上面两步之后，我们用对应的实体类来接收数据库查询出来的结果时就完成了时间格式的转换，再返回给前端时就是一个符合我们设置的时间格式了"></a>3.完成上面两步之后，我们用对应的实体类来接收数据库查询出来的结果时就完成了时间格式的转换，再返回给前端时就是一个符合我们设置的时间格式了</h4><h3 id="DateTimeFormat"><a href="#DateTimeFormat" class="headerlink" title="@DateTimeFormat"></a>@DateTimeFormat</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateVo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Date date<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDate</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> Date <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>加入 @DateTimeFormat 注解后参数可以被接收到了，但日期时间的格式还是需要自己再手动转换一下。因为 @DateTimeFormat 注解的 pattern 属性值指定的日期时间格式并不是将要转换成的日期格式，这个指定的格式是和传入的参数对应的，假如注解为：<code>@DateTimeFormat(pattern=&quot;yyyy/MM/dd HH:mm:ss&quot;)</code>则传入的参数应该是这样的：2018/08/02 22:05:55否则会抛出异常。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>注解@JsonFormat主要是后台到前台的时间格式的转换<br>注解@DataFormAT主要是前后到后台的时间格式的转换</p>
]]></content>
      <categories>
        <category>时间转换</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>注解</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm的整合</title>
    <url>/blog/2020/03/10/ssm-zheng-he/</url>
    <content><![CDATA[<h2 id="搭建整合环境"><a href="#搭建整合环境" class="headerlink" title="搭建整合环境"></a>搭建整合环境</h2><h3 id="1-创建maven工程"><a href="#1-创建maven工程" class="headerlink" title="1.创建maven工程"></a>1.创建maven工程</h3><p><img src="http://qiniuyun.dajienihao.cn/image/0310/1.jpg" alt=""></p>
<h3 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h3><pre class=" language-java"><code class="language-java">create database ssm<span class="token punctuation">;</span>
use ssm<span class="token punctuation">;</span>
create table <span class="token function">account</span><span class="token punctuation">(</span>
    id <span class="token keyword">int</span> primary key auto_increment<span class="token punctuation">,</span>
    name <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    money <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="3-导入坐标并建立依赖"><a href="#3-导入坐标并建立依赖" class="headerlink" title="3.导入坐标并建立依赖"></a>3.导入坐标并建立依赖</h3><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>properties<span class="token operator">></span>
        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>
        <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span>
        <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span>
        <span class="token operator">&lt;</span>slf4j<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">&lt;</span><span class="token operator">/</span>slf4j<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>log4j<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token operator">&lt;</span><span class="token operator">/</span>log4j<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>spring<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>spring<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>mysql<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">47</span><span class="token operator">&lt;</span><span class="token operator">/</span>mysql<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>mybatis<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">3.5</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>mybatis<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>druid<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">22</span><span class="token operator">&lt;</span><span class="token operator">/</span>druid<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>lombok<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token operator">&lt;</span><span class="token operator">/</span>lombok<span class="token punctuation">.</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>junit<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">4.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>junit<span class="token punctuation">.</span>version<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>

    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>alibaba<span class="token operator">/</span>druid <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>druid<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>mysql<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>spring<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>mybatis<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>lombok<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>aspects<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>aop<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>webmvc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>tx<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>junit<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
            <span class="token operator">&lt;</span>scope<span class="token operator">></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>log4j<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>slf4j<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>slf4j<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>slf4j<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> log end <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre>
<h3 id="4-编写实体类"><a href="#4-编写实体类" class="headerlink" title="4.编写实体类"></a>4.编写实体类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Double money<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Account{"</span> <span class="token operator">+</span>
                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", money="</span> <span class="token operator">+</span> money <span class="token operator">+</span>
                <span class="token string">'}'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> Double <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> money<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span>Double money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="5-编写持久层接口"><a href="#5-编写持久层接口" class="headerlink" title="5.编写持久层接口"></a>5.编写持久层接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>

     List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="6-编写业务层接口和实现类"><a href="#6-编写业务层接口和实现类" class="headerlink" title="6.编写业务层接口和实现类"></a>6.编写业务层接口和实现类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span><span class="token punctuation">{</span>

     List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> AccountDao accountDao<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service查询所有账户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h2 id="spring框架的编写"><a href="#spring框架的编写" class="headerlink" title="spring框架的编写"></a>spring框架的编写</h2><h3 id="1-编写spring配置文件并导入约束"><a href="#1-编写spring配置文件并导入约束" class="headerlink" title="1.编写spring配置文件并导入约束"></a>1.编写spring配置文件并导入约束</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>
       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>
       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>
       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>
       xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>
       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token punctuation">.</span>xsd"<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启注解扫描，要扫描的是service和dao层的注解，要忽略web层注解，因为web层让SpringMVC框架去管理 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.ahdy"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置要忽略的注解 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>context<span class="token operator">:</span>exclude<span class="token operator">-</span>filter type<span class="token operator">=</span><span class="token string">"annotation"</span> expression<span class="token operator">=</span><span class="token string">"org.springframework.stereotype.Controller"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span></code></pre>
<h3 id="2-编写测试方法，进行测试"><a href="#2-编写测试方法，进行测试" class="headerlink" title="2.编写测试方法，进行测试"></a>2.编写测试方法，进行测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ApplicationContext ac<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        AccountService as<span class="token operator">=</span> <span class="token punctuation">(</span>AccountService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        as<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="Spring整合SpringMVC框架"><a href="#Spring整合SpringMVC框架" class="headerlink" title="Spring整合SpringMVC框架"></a>Spring整合SpringMVC框架</h2><h3 id="搭建和测试Springmvc环境"><a href="#搭建和测试Springmvc环境" class="headerlink" title="搭建和测试Springmvc环境"></a>搭建和测试Springmvc环境</h3><h4 id="1-在web-xml中配置DispatcherServlet前端控制器"><a href="#1-在web-xml中配置DispatcherServlet前端控制器" class="headerlink" title="1.在web.xml中配置DispatcherServlet前端控制器"></a>1.在web.xml中配置DispatcherServlet前端控制器</h4><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置前端控制器<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>servlet<span class="token operator">></span>
        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>dispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>加载spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xml配置文件<span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>
            <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>
            <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>启动服务器创建该servlet<span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span>
    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>
        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>dispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span></code></pre>
<h4 id="2-在web-xml中配置DispatcherServlet过滤器解决中文乱码"><a href="#2-在web-xml中配置DispatcherServlet过滤器解决中文乱码" class="headerlink" title="2.在web.xml中配置DispatcherServlet过滤器解决中文乱码"></a>2.在web.xml中配置DispatcherServlet过滤器解决中文乱码</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>解决中文乱码过滤器<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>filter<span class="token operator">></span>
        <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>characterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CharacterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>
            <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>
            <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>
    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>
        <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>characterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span></code></pre>
<h4 id="3-创建springmvc-xml的配置文件-编写配置文件"><a href="#3-创建springmvc-xml的配置文件-编写配置文件" class="headerlink" title="3. 创建springmvc.xml的配置文件,编写配置文件"></a>3. 创建springmvc.xml的配置文件,编写配置文件</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>
       xmlns<span class="token operator">:</span>mvc<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/mvc"</span>
       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>
       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>
       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc<span class="token operator">/</span>spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 扫描controller的注解，别的不扫描 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.ahdy"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>context<span class="token operator">:</span>include<span class="token operator">-</span>filter type<span class="token operator">=</span><span class="token string">"annotation"</span> expression<span class="token operator">=</span><span class="token string">"org.springframework.stereotype.Controller"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置视图解析器 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"viewResolver"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> JSP文件所在的目录 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"prefix"</span> value<span class="token operator">=</span><span class="token string">"/WEB-INF/pages/"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 文件的后缀名 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"suffix"</span> value<span class="token operator">=</span><span class="token string">".jsp"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置静态资源不过滤 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>resources location<span class="token operator">=</span><span class="token string">"/css/"</span> mapping<span class="token operator">=</span><span class="token string">"/css/**"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>resources location<span class="token operator">=</span><span class="token string">"/images/"</span> mapping<span class="token operator">=</span><span class="token string">"/images/**"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>resources location<span class="token operator">=</span><span class="token string">"/js/"</span> mapping<span class="token operator">=</span><span class="token string">"/js/**"</span><span class="token operator">/</span><span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启对SpringMVC注解的支持 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre>
<h4 id="4-测试SpringMVC的框架搭建是否成功"><a href="#4-测试SpringMVC的框架搭建是否成功" class="headerlink" title="4.测试SpringMVC的框架搭建是否成功"></a>4.测试SpringMVC的框架搭建是否成功</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"account/findAll"</span><span class="token operator">></span>查询所有<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>

<span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">findAll</span><span class="token punctuation">(</span>Model modle<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"controller查询所有账户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="整合springmvc框架"><a href="#整合springmvc框架" class="headerlink" title="整合springmvc框架"></a>整合springmvc框架</h3><p><strong>目的</strong>：在controller中能成功的调用service对象中的方法。</p>
<h4 id="1-加载applicationContext-xml文件"><a href="#1-加载applicationContext-xml文件" class="headerlink" title="1.加载applicationContext.xml文件"></a>1.加载applicationContext.xml文件</h4><p>在项目启动的时候，就去加载applicationContext.xml的配置文件，在web.xml中配置ContextLoaderListener监听器（该监听器只能加载WEB-INF目录下的applicationContext.xml的配置文<br>件）。</p>
<pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置 spring 提供的监听器，用于启动服务时加载容器 。该间监听器只能加载 WEB<span class="token operator">-</span>INF 目录中名称为 applicationContext<span class="token punctuation">.</span>xml 的配置文件 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>listener<span class="token operator">></span>
        <span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextLoaderListener<span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>设置配置文件路径<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">></span>
        <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>applicationContext<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">></span>
</code></pre>
<h4 id="2-调用service对象的方法进行测试"><a href="#2-调用service对象的方法进行测试" class="headerlink" title="2.调用service对象的方法进行测试"></a>2.调用service对象的方法进行测试</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> AccountService accountService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">findAll</span><span class="token punctuation">(</span>Model modle<span class="token punctuation">)</span><span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> list<span class="token operator">=</span>accountService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"controller查询所有账户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        modle<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="Spring整合MyBatis框架"><a href="#Spring整合MyBatis框架" class="headerlink" title="Spring整合MyBatis框架"></a>Spring整合MyBatis框架</h2><h3 id="搭建和测试MyBatis的环境"><a href="#搭建和测试MyBatis的环境" class="headerlink" title="搭建和测试MyBatis的环境"></a>搭建和测试MyBatis的环境</h3><h4 id="1-在项目中编写mybatisConfig-xml的配置文件"><a href="#1-在项目中编写mybatisConfig-xml的配置文件" class="headerlink" title="1.在项目中编写mybatisConfig.xml的配置文件"></a>1.在项目中编写mybatisConfig.xml的配置文件</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configuration
    PUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>
    <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>configuration<span class="token operator">></span>
    <span class="token operator">&lt;</span>environments <span class="token keyword">default</span><span class="token operator">=</span><span class="token string">"mysql"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>environment id<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>transactionManager type<span class="token operator">=</span><span class="token string">"JDBC"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>dataSource type<span class="token operator">=</span><span class="token string">"POOLED"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql:///ssm"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>dataSource<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>environment<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>environments<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用的是注解 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>mappers<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>mapper <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.ahdy.dao.AccountDao"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 该包下所有的dao接口都可以使用 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token keyword">package</span> name<span class="token operator">=</span><span class="token string">"com.ahdy.dao"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre>
<h4 id="2-在AccountDao接口的方法上添加注解"><a href="#2-在AccountDao接口的方法上添加注解" class="headerlink" title="2.在AccountDao接口的方法上添加注解"></a>2.在AccountDao接口的方法上添加注解</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3-编写测试的方法"><a href="#3-编写测试的方法" class="headerlink" title="3. 编写测试的方法"></a>3. 编写测试的方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisTest</span>  <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        SqlSession sqlSession<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        AccountDao accountDao<span class="token operator">=</span>sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>AccountDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> a<span class="token operator">=</span>accountDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="Spring整合MyBatis框架-1"><a href="#Spring整合MyBatis框架-1" class="headerlink" title="Spring整合MyBatis框架"></a>Spring整合MyBatis框架</h3><p>目的：把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中</p>
<h4 id="1-修改applicationContext-xml"><a href="#1-修改applicationContext-xml" class="headerlink" title="1.修改applicationContext.xml"></a>1.修改applicationContext.xml</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置连接池<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClass"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/ssm"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置sqlSessionFactor工厂<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置接口所在包<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"mapperScanner"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"basePackage"</span> value<span class="token operator">=</span><span class="token string">"com.ahdy.dao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre>
<h4 id="2-添加注入注解"><a href="#2-添加注入注解" class="headerlink" title="2.添加注入注解"></a>2.添加注入注解</h4><p>在AccountDao接口中添加<code>@Repository</code>注解<br>在service中注入dao对象</p>
<h4 id="3-进行测试"><a href="#3-进行测试" class="headerlink" title="3.进行测试"></a>3.进行测试</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> AccountService accountService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">findAll</span><span class="token punctuation">(</span>Model modle<span class="token punctuation">)</span><span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> list<span class="token operator">=</span>accountService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"controller查询所有账户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        modle<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-配置Spring的声明式事务管理"><a href="#4-配置Spring的声明式事务管理" class="headerlink" title="4.配置Spring的声明式事务管理"></a>4.配置Spring的声明式事务管理</h4><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置spring框架的声明式事务<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置事务管理器<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置事务通知<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>tx<span class="token operator">:</span>advice id<span class="token operator">=</span><span class="token string">"txAdvice"</span> transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"find*"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"*"</span> isolation<span class="token operator">=</span><span class="token string">"DEFAULT"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>advice<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置aop增强<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>
        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>advisor advice<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"txAdvice"</span> pointcut<span class="token operator">=</span><span class="token string">"execution(* com.ahdy.service.impl.*ServiceImpl.*(..))"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span></code></pre>
<h2 id="整合完毕"><a href="#整合完毕" class="headerlink" title="整合完毕"></a>整合完毕</h2>]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mybatis</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springMvc的异常处理和拦截器</title>
    <url>/blog/2020/03/09/springmvc-de-yi-chang-chu-li/</url>
    <content><![CDATA[<h2 id="1-SpringMVC中的异常处理"><a href="#1-SpringMVC中的异常处理" class="headerlink" title="1.SpringMVC中的异常处理"></a>1.SpringMVC中的异常处理</h2><p>系统中异常包括两类：预期异常和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。<br>系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理。</p>
<h3 id="1-1编写异常类"><a href="#1-1编写异常类" class="headerlink" title="1.1编写异常类"></a>1.1编写异常类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 *自定义异常
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">SysException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">SysException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="1-2自定义异常处理器"><a href="#1-2自定义异常处理器" class="headerlink" title="1.2自定义异常处理器"></a>1.2自定义异常处理器</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> Object o<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SysException e<span class="token operator">=</span>null<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SysException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token operator">=</span><span class="token punctuation">(</span>SysException<span class="token punctuation">)</span>ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            e<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token string">"系统正在维护"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ModelAndView mv<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置出错视图页面</span>
        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="1-3配置异常处理器"><a href="#1-3配置异常处理器" class="headerlink" title="1.3配置异常处理器"></a>1.3配置异常处理器</h3><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>异常处理器<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"SysExceptionResolver"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.ahdy.exception.SysExceptionResolver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre>
<h2 id="2-SpringMVC-中的拦截器"><a href="#2-SpringMVC-中的拦截器" class="headerlink" title="2.SpringMVC 中的拦截器"></a>2.SpringMVC 中的拦截器</h2><p>Spring MVC 的处理器拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理。<br>用户可以自己定义一些拦截器来实现特定的功能。<br>谈到拦截器，还要向大家提一个词——拦截器链（<code>Interceptor Chain</code>）。拦截器链就是将拦截器按一定的顺序联结成一条链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。<br>说到这里，可能大家脑海中有了一个疑问，这不是我们之前学的过滤器吗？是的它和过滤器是有几分相似，但是也有区别，接下来我们就来说说他们的区别：</p>
<ul>
<li>过滤器是 servlet 规范中的一部分，任何 java web 工程都可以使用。</li>
<li>拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。</li>
<li>过滤器在 url-pattern 中配置了/*之后，可以对所有要访问的资源拦截。</li>
<li>拦截器它是只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦截的。</li>
</ul>
<p>它也是 AOP 思想的具体应用。<br>我们要想自定义拦截器， 要求必须实现：<code>HandlerInterceptor</code> 接口。</p>
<h3 id="2-1编写一个普通类实现-HandlerInterceptor-接口"><a href="#2-1编写一个普通类实现-HandlerInterceptor-接口" class="headerlink" title="2.1编写一个普通类实现 HandlerInterceptor 接口"></a>2.1编写一个普通类实现 HandlerInterceptor 接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor执行了...前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor执行了...后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor执行了...完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-1-1-HandlerInterceptor接口中的方法"><a href="#2-1-1-HandlerInterceptor接口中的方法" class="headerlink" title="2.1.1 HandlerInterceptor接口中的方法"></a>2.1.1 HandlerInterceptor接口中的方法</h4><p><code>preHandle方法是controller方法执行前拦截的方法</code></p>
<ul>
<li>可以使用request或者response跳转到指定的页面</li>
<li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li>
<li>return false不放行，不会执行controller中的方法。</li>
</ul>
<p><code>postHandle是controller方法执行后执行的方法，在视图执行前。</code></p>
<ul>
<li>可以使用request或者response跳转到指定的页面</li>
<li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</li>
</ul>
<p><code>postHandle方法是在视图执行后执行</code></p>
<ul>
<li>request或者response不能再跳转页面了</li>
</ul>
<blockquote>
<p>放行的含义是指，如果有下一个拦截器就执行下一个，如果该拦截器处于拦截器链的最后一个，则执行控制器中的方法。</p>
</blockquote>
<h3 id="2-2配置拦截器"><a href="#2-2配置拦截器" class="headerlink" title="2.2配置拦截器"></a>2.2配置拦截器</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">></span>
        <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 哪些方法进行拦截 <span class="token operator">--</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>mapping path<span class="token operator">=</span><span class="token string">"/user/*"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 哪些方法不进行拦截 <span class="token operator">--</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>exclude<span class="token operator">-</span>mapping path<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.ahdy.interceptor.MyInterceptor"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">></span></code></pre>
]]></content>
      <categories>
        <category>SpringMvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>springMvc静态资源和文件上传</title>
    <url>/blog/2020/03/09/springmvc-jing-tai-zi-yuan-he-wen-jian-shang-chuan/</url>
    <content><![CDATA[<h2 id="静态资源配置"><a href="#静态资源配置" class="headerlink" title="静态资源配置"></a>静态资源配置</h2><p> <code>DispatcherServlet</code>会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而不能被使用。解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 *mvc:resources标签配置不过滤
*location元素表示webapp目录下的包下的所有文件
*mapping元素表示以/static开头的所有请求路径，如/static/a或者/static/a/b
*/</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置静态资源不过滤 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>mvc<span class="token operator">:</span>resources location<span class="token operator">=</span><span class="token string">"/css/"</span> mapping<span class="token operator">=</span><span class="token string">"/css/**"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 样式 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>mvc<span class="token operator">:</span>resources location<span class="token operator">=</span><span class="token string">"/images/"</span> mapping<span class="token operator">=</span><span class="token string">"/images/**"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 图片 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>mvc<span class="token operator">:</span>resources location<span class="token operator">=</span><span class="token string">"/js/"</span> mapping<span class="token operator">=</span><span class="token string">"/js/**"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> javascript <span class="token operator">--</span><span class="token operator">></span></code></pre>
<h2 id="springMvc的文件上传"><a href="#springMvc的文件上传" class="headerlink" title="springMvc的文件上传"></a>springMvc的文件上传</h2><h3 id="文件上传的必要前提"><a href="#文件上传的必要前提" class="headerlink" title="文件上传的必要前提"></a>文件上传的必要前提</h3><ol>
<li>form 表单的 enctype 取值必须是：<code>multipart/form-data</code>(默认值是:<code>application/x-www-form-urlencoded)</code> <code>enctype</code>:是表单请求正文的类型</li>
<li>method 属性取值必须是 <code>Post</code></li>
<li>提供一个文件选择域<code>&lt;input type=”file” /&gt;</code></li>
</ol>
<h3 id="借助第三方组件实现文件上传"><a href="#借助第三方组件实现文件上传" class="headerlink" title="借助第三方组件实现文件上传"></a>借助第三方组件实现文件上传</h3><p>使用 <code>Commons-fileupload</code> 组件实现文件上传，需要导入该组件相应的支撑 jar 包：<code>Commons-fileupload 和commons-io</code>。<br>commons-io 不属于文件上传组件的开发 jar 文件，但Commons-fileupload 组件从 1.1 版本开始，它工作时需要 commons-io 包的支持。</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>fileupload<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>fileupload<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
<span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<h3 id="文件上传的原理分析"><a href="#文件上传的原理分析" class="headerlink" title="文件上传的原理分析"></a>文件上传的原理分析</h3><p>当 form 表单的 enctype 取值不是默认值后request.getParameter()将失效。<br><code>enctype=”application/x-www-form-urlencoded”</code>时，form 表单的正文内容是：key=value&amp;key=value&amp;key=value<br>当 form 表单的 enctype 取值为 Mutilpart/form-data 时，请求正文内容就变成：<br>每一部分都是 MIME 类型描述的正文</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>7de1a433602ac 分界符
Content<span class="token operator">-</span>Disposition<span class="token operator">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"userName"</span> 协议头
aaa                                         协议的正文
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>7de1a433602ac
Content<span class="token operator">-</span>Disposition<span class="token operator">:</span>       form<span class="token operator">-</span>data<span class="token punctuation">;</span>        name<span class="token operator">=</span><span class="token string">"file"</span><span class="token punctuation">;</span>
filename<span class="token operator">=</span><span class="token string">"C:\Users\zhy\Desktop\fileupload_demofile\b.txt"</span>
Content<span class="token operator">-</span>Type<span class="token operator">:</span> text<span class="token operator">/</span>plain            协议的类型（MIME 类型）

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>7de1a433602ac<span class="token operator">--</span></code></pre>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="前端页面："><a href="#前端页面：" class="headerlink" title="前端页面："></a>前端页面：</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"/fileUpload"</span> method<span class="token operator">=</span><span class="token string">"post"</span>   enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span><span class="token operator">></span>
    名称：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"picname"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>
    图片：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"upload"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"上传"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span></code></pre>
<h4 id="控制器代码"><a href="#控制器代码" class="headerlink" title="控制器代码"></a>控制器代码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * SpringMVC方式的文件上传
 * @param request
 * @return
 * @throws Exception
 */</span>
        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/fileupload"</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> String <span class="token function">fileupload</span> <span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SpringMVC方式的文件上传..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 先获取到要上传的文件目录</span>
            String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 创建File对象，一会向该路径下上传文件</span>
            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 判断路径是否存在，如果不存在，创建该路径</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 获取到上传文件的名称</span>
            String filename <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 把文件的名称唯一化</span>
            filename <span class="token operator">=</span> uuid <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 上传文件</span>
            upload<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<blockquote>
<p>upload是表单中文件name属性值,必须保持一致，或使用<code>@RequestParam(value = &quot;upload&quot;, required = false)</code>绑定</p>
</blockquote>
<h4 id="配置文件解析器对象"><a href="#配置文件解析器对象" class="headerlink" title="配置文件解析器对象"></a>配置文件解析器对象</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置文件解析器对象，要求id名称必须是multipartResolver <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"multipartResolver"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxUploadSize"</span> value<span class="token operator">=</span><span class="token string">"10485760"</span><span class="token operator">/</span><span class="token operator">></span>
     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"defaultEncoding"</span> value<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
</code></pre>
]]></content>
      <categories>
        <category>SpringMvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
        <tag>静态资源</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>idea快捷键</title>
    <url>/blog/2020/03/09/idea-kuai-jie-jian/</url>
    <content><![CDATA[<h2 id="编辑快捷键"><a href="#编辑快捷键" class="headerlink" title="编辑快捷键"></a>编辑快捷键</h2><table>
<thead>
<tr>
<th>编辑快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Tab</td>
<td>缩进 / 配合代码提示实现自动完成</td>
</tr>
<tr>
<td>Shift + Tab</td>
<td>取消缩进</td>
</tr>
<tr>
<td>Ctrl + Z</td>
<td>撤销</td>
</tr>
<tr>
<td>Ctrl + Shift + Z</td>
<td>取消撤销</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>删除光标所在行 或 删除选中的行</td>
</tr>
<tr>
<td>Ctrl + X</td>
<td>剪切光标所在行 或 剪切选择内容</td>
</tr>
<tr>
<td>Ctrl + C</td>
<td>复制光标所在行 或 复制选择内容</td>
</tr>
<tr>
<td>Ctrl + V</td>
<td>在光标所在处粘贴已复制内容</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>弹出历史复制内容</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td>
</tr>
<tr>
<td>Ctrl + Shift + /</td>
<td>代码块注释</td>
</tr>
<tr>
<td>Ctrl + +</td>
<td>展开代码</td>
</tr>
<tr>
<td>Ctrl + -</td>
<td>折叠代码</td>
</tr>
<tr>
<td>Ctrl + Shift + +</td>
<td>展开所有代码</td>
</tr>
<tr>
<td>Ctrl + Shift + -</td>
<td>折叠所有代码</td>
</tr>
<tr>
<td>Alt +</td>
<td>鼠标左键上下拖动 多行编辑</td>
</tr>
<tr>
<td>Alt + Shift +</td>
<td>鼠标左键多行选择 自定义多行编辑</td>
</tr>
<tr>
<td>Ctrl + Shift +</td>
<td>前方向键 光标放在方法名上，将方法移动到上一个方法前面，调整方法排序。光标放在普通代码行上，将改行上移</td>
</tr>
<tr>
<td>Ctrl + Shift +</td>
<td>后方向键 光标放在方法名上，将方法移动到下一个方法前面，调整方法排序。光标放在普通代码行上，将改行下移</td>
</tr>
</tbody></table>
<h2 id="查找替换快捷键"><a href="#查找替换快捷键" class="headerlink" title="查找替换快捷键"></a>查找替换快捷键</h2><table>
<thead>
<tr>
<th>查找替换快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F</td>
<td>在当前文件中进行文本查找</td>
</tr>
<tr>
<td>Ctrl + Shift + F</td>
<td>在整个项目或者指定目录内的文件中进行文本查找</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td>根据输入的 类名 查找类文件</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>通过文件名定位，打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + N</td>
<td>查找 变量 / 方法</td>
</tr>
<tr>
<td>双击Shift</td>
<td>弹出 Search Everywhere 弹出层</td>
</tr>
<tr>
<td>Alt + F3</td>
<td>高亮显示所有该选中文本，按 Enter 选中下一个，按 Esc 高亮消失，推荐使用Ctrl+F</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>高亮显示所有该选中文本，按 Esc 高亮消失，推荐使用Ctrl+F 或 Alt + F3</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>显示最近打开的文件记录列表</td>
</tr>
<tr>
<td>Ctrl + Shift + E</td>
<td>显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td>弹出当前文件结构层（如查看当前类的所有方法），可以在弹出的层上直接输入，进行筛选</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>显示当前类的继承层次结构（包含其父类和子类）</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>在当前文件进行文本替换</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td>
</tr>
</tbody></table>
<h2 id="光标定位快捷键"><a href="#光标定位快捷键" class="headerlink" title="光标定位快捷键"></a>光标定位快捷键</h2><table>
<thead>
<tr>
<th>光标定位快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Home</td>
<td>跳到文件头</td>
</tr>
<tr>
<td>Ctrl + End</td>
<td>跳到文件尾</td>
</tr>
<tr>
<td>Ctrl + Shift + Backspace</td>
<td>退回到上次修改的地方</td>
</tr>
<tr>
<td>Ctrl + Alt + 左方向键</td>
<td>退回到上一个操作的地方</td>
</tr>
<tr>
<td>Ctrl + Alt + 右方向键</td>
<td>前进到上一个操作的地方</td>
</tr>
<tr>
<td>Alt + 前方向键</td>
<td>当前光标跳转到当前文件的前一个方法名位置</td>
</tr>
<tr>
<td>Alt + 后方向键</td>
<td>当前光标跳转到当前文件的后一个方法名位置</td>
</tr>
</tbody></table>
<h2 id="窗口导航快捷键"><a href="#窗口导航快捷键" class="headerlink" title="窗口导航快捷键"></a>窗口导航快捷键</h2><table>
<thead>
<tr>
<th>窗口导航快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Tab</td>
<td>编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td>
</tr>
<tr>
<td>Alt + 1,2,3…9</td>
<td>显示对应数值的选项卡，其中 1 是 Project 用得最多</td>
</tr>
<tr>
<td>ESC</td>
<td>从工具窗口进入代码文件窗口，或退出打开的窗口</td>
</tr>
</tbody></table>
<h2 id="代码自动档快捷键"><a href="#代码自动档快捷键" class="headerlink" title="代码自动档快捷键"></a>代码自动档快捷键</h2><table>
<thead>
<tr>
<th>代码自动档快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Space</td>
<td>基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>智能代码提示</td>
</tr>
<tr>
<td>Ctrl + J</td>
<td>显示与之匹配的实时代码模板</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>开始新一行。光标所在行下空出一行，光标定位到新行位置</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>自动结束代码，行末自动添加 分号/括号/引号 等，if/for等会自动添加所需结构</td>
</tr>
<tr>
<td>Ctrl + Alt + Enter</td>
<td>光标所在行上空出一行，光标定位到新行</td>
</tr>
<tr>
<td>Ctrl + Enter</td>
<td>智能分隔行</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>自动将下一行合并到当前行末尾</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>对选中的代码进行大 / 小写轮流转换</td>
</tr>
<tr>
<td>Ctrl + Alt + L</td>
<td>格式化代码，可以对当前文件和整个包目录使用</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>优化导入的类，可以对当前文件和整个包目录使用</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>在类中使用可以自动生成代码（如 getter/setter，构造函数，toString()</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>对选中的代码弹出环绕选项弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>选择可重写的方法</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>选择可继承的方法</td>
</tr>
</tbody></table>
<h2 id="代码重构快捷键"><a href="#代码重构快捷键" class="headerlink" title="代码重构快捷键"></a>代码重构快捷键</h2><table>
<thead>
<tr>
<th>代码重构快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Shift + F6</td>
<td>对 文件夹 / 文件 / 类 / 方法 / 变量 (重构)重命名</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + T</td>
<td>重构功能大汇总，叫做 Refactor This</td>
</tr>
</tbody></table>
<h2 id="代码追踪快捷键"><a href="#代码追踪快捷键" class="headerlink" title="代码追踪快捷键"></a>代码追踪快捷键</h2><table>
<thead>
<tr>
<th>代码追踪快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + B</td>
<td>进入光标所在的方法/变量的接口或定义处，等效于 Ctrl + 左键单击</td>
</tr>
<tr>
<td>Alt + F7</td>
<td>查找光标所在的 方法 / 变量 / 类 被使用的地方</td>
</tr>
<tr>
<td>Ctrl + Alt + F7</td>
<td>查找光标所在的 方法 / 变量 / 类 被使用的地方，用弹出框的方式找出来</td>
</tr>
</tbody></table>
<h2 id="编译调试运行快捷键"><a href="#编译调试运行快捷键" class="headerlink" title="编译调试运行快捷键"></a>编译调试运行快捷键</h2><table>
<thead>
<tr>
<th>编译调试运行快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F9</td>
<td>执行 Make Project 操作，编译所有</td>
</tr>
<tr>
<td>Ctrl + Shift + F9</td>
<td>编译选中的 文件 / 包 / Module</td>
</tr>
<tr>
<td>Shift + F10</td>
<td>等效于点击工具栏的 Run 按钮</td>
</tr>
<tr>
<td>Alt + Shift + F10</td>
<td>弹出 Run 的可选择菜单</td>
</tr>
<tr>
<td>Shift + F9</td>
<td>等效于点击工具栏的 Debug 按钮</td>
</tr>
<tr>
<td>Alt + Shift + F9</td>
<td>弹出 Debug 的可选择菜单</td>
</tr>
<tr>
<td>F7</td>
<td>在 Debug 模式下，进入下一步，即 Step into。如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td>F8</td>
<td>在 Debug 模式下，进入下一步，即 Step over。如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td>F9</td>
<td>在 Debug 模式下，恢复程序运行，即 Continue。但是如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td>F2</td>
<td>跳转到下一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td>Shift + F2</td>
<td>跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td>
</tr>
</tbody></table>
<h2 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h2><table>
<thead>
<tr>
<th>其他快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + S</td>
<td>打开 IntelliJ IDEA 系统设置</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + S</td>
<td>打开当前项目设置</td>
</tr>
<tr>
<td>Ctrl + Alt + Y</td>
<td>同步、刷新</td>
</tr>
<tr>
<td>Shift + 滚轮前后滚动</td>
<td>当前文件的横向滚动轴滚动</td>
</tr>
<tr>
<td>Ctrl + 左键单击</td>
<td>在打开的文件标题上，弹出该文件路径</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>springMvc请求参数的绑定</title>
    <url>/blog/2020/03/07/springmvc-can-shu-bang-ding/</url>
    <content><![CDATA[<h1 id="请求参数的绑定"><a href="#请求参数的绑定" class="headerlink" title="请求参数的绑定"></a>请求参数的绑定</h1><h2 id="请求参数的绑定说明"><a href="#请求参数的绑定说明" class="headerlink" title="请求参数的绑定说明"></a>请求参数的绑定说明</h2><h3 id="绑定机制"><a href="#绑定机制" class="headerlink" title="绑定机制"></a>绑定机制</h3><ol>
<li>表单提交的数据都是k=v格式的 username=haha&amp;password=123</li>
<li>SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的</li>
<li>要求：提交表单的name和参数的名称是相同的</li>
</ol>
<h3 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h3><ol>
<li>基本数据类型和字符串类型</li>
<li>实体类型（JavaBean）</li>
<li>集合数据类型（List、map集合等）</li>
</ol>
<h3 id="基本数据类型和字符串类型"><a href="#基本数据类型和字符串类型" class="headerlink" title="基本数据类型和字符串类型"></a>基本数据类型和字符串类型</h3><ol>
<li>提交表单的name和参数的名称是相同的</li>
<li>区分大小写</li>
</ol>
<h3 id="实体类型（JavaBean）"><a href="#实体类型（JavaBean）" class="headerlink" title="实体类型（JavaBean）"></a>实体类型（JavaBean）</h3><ol>
<li>提交表单的name和JavaBean中的属性名称需要一致</li>
<li>如果一个JavaBean类中包含其他的引用类型，那么表单的name属性需要编写成：对象.属性 例如：address.name</li>
</ol>
<h3 id="给集合属性数据封装"><a href="#给集合属性数据封装" class="headerlink" title="给集合属性数据封装"></a>给集合属性数据封装</h3><p>前端页面编写方式：list[0].属性</p>
<h3 id="请求参数中文乱码的解决"><a href="#请求参数中文乱码的解决" class="headerlink" title="请求参数中文乱码的解决"></a>请求参数中文乱码的解决</h3><p>在web.xml中配置Spring提供的过滤器类</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置过滤器，解决中文乱码的问题 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>filter<span class="token operator">></span>
    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>characterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>
    <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CharacterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指定字符集 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>
      <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>
      <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>
 <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>
    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>characterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>
    <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span></code></pre>
<h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><ol>
<li>表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上，说明<br>Spring框架内部会默认进行数据类型转换。</li>
<li>如果想自定义数据类型转换，可以实现Converter的接口</li>
</ol>
<h4 id="1-自定义类型转换器"><a href="#1-自定义类型转换器" class="headerlink" title="1.自定义类型转换器"></a>1.自定义类型转换器</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 把字符串转换成日期的转换器
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Date<span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    * 进行类型转换的方法
    */</span>
    <span class="token keyword">public</span> Date <span class="token function">convert</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 判断</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>source <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"参数不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 解析字符串</span>
            Date date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> date<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"类型转换错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-注册自定义类型转换器，在springmvc-xml配置文件中编写配置"><a href="#2-注册自定义类型转换器，在springmvc-xml配置文件中编写配置" class="headerlink" title="2.注册自定义类型转换器，在springmvc.xml配置文件中编写配置"></a>2.注册自定义类型转换器，在springmvc.xml配置文件中编写配置</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注册自定义类型转换器 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"conversionService"</span>
<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.context.support.ConversionServiceFactoryBean"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"converters"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>set<span class="token operator">></span>
            <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.utils.StringToDateConverter"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启Spring对MVC注解的支持 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven conversion service<span class="token operator">=</span><span class="token string">"conversionService"</span><span class="token operator">/</span><span class="token operator">></span></code></pre>
<h3 id="在控制器中使用原生的ServletAPI对象"><a href="#在控制器中使用原生的ServletAPI对象" class="headerlink" title="在控制器中使用原生的ServletAPI对象"></a>在控制器中使用原生的ServletAPI对象</h3><p>只需要在控制器的方法参数定义HttpServletRequest和HttpServletResponse对象</p>
]]></content>
      <categories>
        <category>SpringMvc</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springMvc常用注解</title>
    <url>/blog/2020/03/07/springmvc-chang-yong-zhu-jie/</url>
    <content><![CDATA[<h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p>RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系</p>
<pre class=" language-java"><code class="language-java">控制器代码<span class="token operator">:</span>
<span class="token comment" spellcheck="true">/**
 * RequestMapping 注解出现的位置
 */</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAccount"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">findAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了账户。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
前端页面：
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"account/findAccount"</span><span class="token operator">></span>查询账户<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre>
<p><strong>作用</strong>：<br>作用在类上：第一级的访问目录<br>作用在方法上：第二级的访问目录<br>细节：路径可以不编写 / 表示应用的根目录开始<br><strong>属性</strong>：<br>path:指定请求路径的url<br>value:value属性和path属性是一样的<br>mthod:指定该方法的请求方式<br>params:指定限制请求参数的条件<br>headers:发送的请求中必须包含的请求头</p>
<h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h3><pre class=" language-java"><code class="language-java">前端页面：
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"springmvc/useRequestParam?name=test"</span><span class="token operator">></span>requestParam 注解<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
控制器代码：
<span class="token comment" spellcheck="true">/**
 * requestParams 注解的使用 
 * @param username
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/useRequestParam"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">useRequestParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>String username<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"age"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：<br>把请求中指定名称的参数给控制器中的形参赋值。<br><strong>属性</strong>：<br>value：请求参数中的名称。<br>required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。</p>
<h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="RequestBody"></a>RequestBody</h3><p><strong>作用</strong>：<br>用于获取请求体内容。直接使用得到的是key=value&amp;key=value…结构的数据。<br>get 请求方式不适用。<br><strong>属性</strong>：<br>required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值为 false，get 请求得到是 null。</p>
<pre class=" language-java"><code class="language-java">前端页面：
<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"springmvc/useRequestBody"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>
    用户名称：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> <span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>
    用户密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span> <span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>
    用户年龄：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"age"</span> <span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"保存"</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
控制器代码：
<span class="token comment" spellcheck="true">/**
 * RequestBody 注解
 * @param user
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/useRequestBody"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">useRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span> String body<span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="PathVaribale"><a href="#PathVaribale" class="headerlink" title="PathVaribale"></a>PathVaribale</h3><p><strong>作用</strong>：<br>用于绑定 url 中的占位符。例如：请求 url 中 /delete/{id}，这个{id}就是 url 占位符。<br>url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。<br><strong>属性</strong>：<br>value：用于指定 url 中占位符名称。<br>required：是否必须提供占位符。</p>
<pre class=" language-java"><code class="language-java">前端页面
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"springmvc/usePathVariable/100"</span><span class="token operator">></span>pathVariable 注解<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
控制器代码：
<span class="token comment" spellcheck="true">/**
 * PathVariable 注解
 * @param user
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/usePathVariable/{id}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">usePathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="RequestHeader"></a>RequestHeader</h3><p><strong>作用</strong>：<br>用于获取请求消息头。<br><strong>属性</strong>：<br>value：提供消息头名称<br>required：是否必须有此消息头<br><strong>注</strong>：<br>在实际开发中一般不怎么用</p>
<pre class=" language-java"><code class="language-java">前端页面：
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"springmvc/useRequestHeader"</span><span class="token operator">></span>获取请求消息头<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
控制器代码：
<span class="token comment" spellcheck="true">/**
 * RequestHeader 注解
 * @param user
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/useRequestHeader"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">useRequestHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"Accept-Language"</span><span class="token punctuation">,</span>
required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>String requestHeader<span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="CookieValue"><a href="#CookieValue" class="headerlink" title="CookieValue"></a>CookieValue</h3><p><strong>作用</strong>：<br>用于把指定 cookie 名称的值传入控制器方法参数。<br><strong>属性</strong>：<br>value：指定 cookie 的名称。<br>required：是否必须有此 cookie。</p>
<pre class=" language-java"><code class="language-java">前端代码：
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"springmvc/useCookieValue"</span><span class="token operator">></span>绑定 cookie 的值<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
控制器代码：
<span class="token comment" spellcheck="true">/*
 * Cookie 注解
 * @param user
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/useCookieValue"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">useCookieValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
String cookieValue<span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="ModelAttribute"></a>ModelAttribute</h3><p><strong>作用</strong>：<br>该注解是 SpringMVC4.3 版本以后新加入的。它可以用于修饰方法和参数。<br>出现在方法上，表示当前方法会在控制器的方法执行之前，先执行。它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。<br>出现在参数上，获取指定的数据给参数赋值。<br><strong>属性</strong>：<br>value：用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map 结构的 key。<br><strong>应用场景</strong>：<br>当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。<br><strong>例如</strong>：<br>我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容置为 null，此时就可以使用此注解解决问题。</p>
<h4 id="基于-POJO-属性的基本使用"><a href="#基于-POJO-属性的基本使用" class="headerlink" title="基于 POJO 属性的基本使用"></a>基于 POJO 属性的基本使用</h4><pre class=" language-java"><code class="language-java">前段页面：
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"springmvc/testModelAttribute?username=test"</span><span class="token operator">></span>测试 modelattribute<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
控制器代码：
<span class="token comment" spellcheck="true">/**
* 被 ModelAttribute 修饰的方法
* @param user
*/</span>
<span class="token annotation punctuation">@ModelAttribute</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showModel</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了 showModel 方法"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
* 接收请求的方法
* @param user
*/</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelAttribute"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">testModelAttribute</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了控制器的方法"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="基于Map的应用场景ModelAttribute修饰方法不带返回值"><a href="#基于Map的应用场景ModelAttribute修饰方法不带返回值" class="headerlink" title="基于Map的应用场景ModelAttribute修饰方法不带返回值"></a>基于Map的应用场景ModelAttribute修饰方法不带返回值</h4><pre class=" language-java"><code class="language-java">前端页面：
<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"springmvc/updateUser"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>
    用户名称：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> <span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>
    用户年龄：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"age"</span> <span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"保存"</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
控制器代码：
<span class="token comment" spellcheck="true">/**
 * 查询数据库中用户信息
 * @param user
 */</span>
<span class="token annotation punctuation">@ModelAttribute</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showModel</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>User<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//模拟去数据库查询</span>
    User user <span class="token operator">=</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了 showModel 方法"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
 * 模拟修改用户方法
 * @param user
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">testModelAttribute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"控制器中处理请求的方法：修改用户："</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
 * 模拟去数据库查询
 * @param username
 */</span>
<span class="token keyword">private</span> User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="基于Map的应用场景ModelAttribute修饰方法带返回值"><a href="#基于Map的应用场景ModelAttribute修饰方法带返回值" class="headerlink" title="基于Map的应用场景ModelAttribute修饰方法带返回值"></a>基于Map的应用场景ModelAttribute修饰方法带返回值</h4><pre class=" language-java"><code class="language-java">前端页面：
<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"springmvc/updateUser"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>
    用户名称：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> <span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>
    用户年龄：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"age"</span> <span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"保存"</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
控制器代码：
<span class="token comment" spellcheck="true">/**
 * 查询数据库中用户信息
 * @param user
 */</span>
<span class="token annotation punctuation">@ModelAttribute</span>
<span class="token keyword">public</span> User <span class="token function">showModel</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//模拟去数据库查询</span>
    User abc <span class="token operator">=</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了 showModel 方法"</span><span class="token operator">+</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> abc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
 * 模拟修改用户方法
 * @param user
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">testModelAttribute</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"控制器中处理请求的方法：修改用户："</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
 * 模拟去数据库查询
 * @param username
 * @return
 */</span>
<span class="token keyword">private</span> User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="SessionAttribute"><a href="#SessionAttribute" class="headerlink" title="SessionAttribute"></a>SessionAttribute</h3><p><strong>作用</strong>：<br>用于多次执行控制器方法间的参数共享。<br><strong>属性</strong>：<br>value：用于指定存入的属性名称<br>type：用于指定存入的数据类型。</p>
<pre class=" language-java"><code class="language-java">前端页面：
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"springmvc/testPut"</span><span class="token operator">></span>存入 SessionAttribute<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"springmvc/testGet"</span><span class="token operator">></span>取出 SessionAttribute<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"springmvc/testClean"</span><span class="token operator">></span>清除 SessionAttribute<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
控制器代码：
<span class="token comment" spellcheck="true">/**
 * SessionAttribute 注解的使用
 */</span>
<span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/springmvc"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>types<span class="token operator">=</span><span class="token punctuation">{</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionAttributeController</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">/**
 * 把数据存入 SessionAttribute
 * @param model
 * Model 是 spring 提供的一个接口，该接口有一个实现类ExtendedModelMap
 * 该类继承了 ModelMap，而 ModelMap 就是 LinkedHashMap 子类
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testPut"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">testPut</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"泰斯特"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">//跳转之前将数据保存到 username、password 和 age 中，因为注解@SessionAttribute 中有这几个参数</span>
     <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testGet"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">testGet</span><span class="token punctuation">(</span>ModelMap model<span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testClean"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">complete</span><span class="token punctuation">(</span>SessionStatus sessionStatus<span class="token punctuation">)</span><span class="token punctuation">{</span>
    sessionStatus<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>SpringMvc</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mvc</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>springMvc入门配置</title>
    <url>/blog/2020/03/07/springmvc-de-ji-chu-pei-zhi/</url>
    <content><![CDATA[<h1 id="SpringMVC的入门配置"><a href="#SpringMVC的入门配置" class="headerlink" title="SpringMVC的入门配置"></a>SpringMVC的入门配置</h1><h2 id="springMvc是什么"><a href="#springMvc是什么" class="headerlink" title="springMvc是什么"></a>springMvc是什么</h2><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于 Spring FrameWork 的后续产品，已经融合在 Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功 能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用 Spring 进行 WEB 开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他 MVC 开发框架，如 Struts1(现在一般不用)，Struts2 等。 SpringMVC 已经成为目前最主流的 MVC 框架之一，并且随着 Spring3.0 的发布，全面超越 Struts2，成 为最优秀的 MVC 框架。 它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持 RESTful 编程风格的请求。</p>
<h2 id="SpringMVC的优势"><a href="#SpringMVC的优势" class="headerlink" title="SpringMVC的优势"></a>SpringMVC的优势</h2><p>1、清晰的角色划分：<br>前端控制器（DispatcherServlet） </p>
<ul>
<li>请求到处理器映射（HandlerMapping） </li>
<li>处理器适配器（HandlerAdapter） </li>
<li>视图解析器（ViewResolver） </li>
<li>处理器或页面控制器（Controller） </li>
<li>验证器（ Validator） </li>
<li>命令对象（Command 请求参数绑定到的对象就叫命令对象） </li>
<li>表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。 </li>
</ul>
<p>2、分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。<br>3、由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。<br>4、和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。<br>5、可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。 6、可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。<br>7、功能强大的数据验证、格式化、绑定机制。<br>8、利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。<br>9、本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。<br>10、强大的 JSP 标签库，使 JSP 编写更容易。 ………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配 置支持等等。</p>
<h2 id="SpringMVC-和-Struts2-的优略分析"><a href="#SpringMVC-和-Struts2-的优略分析" class="headerlink" title="SpringMVC 和 Struts2 的优略分析"></a>SpringMVC 和 Struts2 的优略分析</h2><h3 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h3><ul>
<li>它们都是表现层框架，都是基于 MVC 模型编写的。 </li>
<li>它们的底层都离不开原始 ServletAPI。 </li>
<li>它们处理请求的机制都是一个核心控制器。</li>
</ul>
<h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ul>
<li>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter </li>
<li>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所 以 Spring MVC 会稍微比 Struts2 快些。 </li>
<li>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便 <blockquote>
<p>(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注 解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。) </p>
</blockquote>
</li>
<li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提 升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</li>
</ul>
<h2 id="SpringMVC的入门配置-1"><a href="#SpringMVC的入门配置-1" class="headerlink" title="SpringMVC的入门配置"></a>SpringMVC的入门配置</h2><h3 id="1-创建WEB工程，引入开发的依赖"><a href="#1-创建WEB工程，引入开发的依赖" class="headerlink" title="1.创建WEB工程，引入开发的依赖"></a>1.创建WEB工程，引入开发的依赖</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 版本锁定 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>properties<span class="token operator">></span>
    <span class="token operator">&lt;</span>spring<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>spring<span class="token punctuation">.</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>

<span class="token operator">&lt;</span>dependencies<span class="token operator">></span>
    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>webmvc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax<span class="token punctuation">.</span>servlet<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>servlet<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jsp<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre>
<h3 id="2-配置核心的控制器（配置DispatcherServlet）"><a href="#2-配置核心的控制器（配置DispatcherServlet）" class="headerlink" title="2.配置核心的控制器（配置DispatcherServlet）"></a>2.配置核心的控制器（配置DispatcherServlet）</h3><p>在web.xml配置文件中核心控制器DispatcherServlet</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> SpringMVC的核心控制器 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>servlet<span class="token operator">></span>
    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>dispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>
    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servletclass<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置Servlet的初始化参数，读取springmvc的配置文件，创建spring容器 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>
        <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>springmvc<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置servlet启动时加载对象 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span>
<span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>
    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>dispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>
    <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span></code></pre>
<h3 id="3-springmvc-xml的配置文件"><a href="#3-springmvc-xml的配置文件" class="headerlink" title="3.springmvc.xml的配置文件"></a>3.springmvc.xml的配置文件</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>
       xmlns<span class="token operator">:</span>mvc<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/mvc"</span>
       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>
       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>
       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc<span class="token operator">/</span>spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xsd
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context
        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置spring创建容器时要扫描的包 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.ahdy"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置视图解析器 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"viewResolver"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"prefix"</span> value<span class="token operator">=</span><span class="token string">"/WEB-INF/pages/"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"suffix"</span> value<span class="token operator">=</span><span class="token string">".jsp"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置spring开启注解mvc的支持<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre>
<h2 id="springMvc执行流程"><a href="#springMvc执行流程" class="headerlink" title="springMvc执行流程"></a>springMvc执行流程</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0307/springmvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%8E%9F%E7%90%86.jpg" alt="springmvc执行流程原理"></p>
<ol>
<li>当启动Tomcat服务器的时候，因为配置了load-on-startup标签，所以会创建DispatcherServlet对象，就会加载springmvc.xml配置文件</li>
<li>开启了注解扫描，那么HelloController对象就会被创建</li>
<li>从index.jsp发送请求，请求会先到达DispatcherServlet核心控制器，根据配置@RequestMapping注解找到执行的具体方法</li>
<li>根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的JSP文件</li>
<li>Tomcat服务器渲染页面，做出响应</li>
</ol>
]]></content>
      <categories>
        <category>SpringMvc</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mvc</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis不同方式的多表查询</title>
    <url>/blog/2020/03/04/mybatis-bu-tong-fang-shi-de-duo-biao-cha-xun/</url>
    <content><![CDATA[<h1 id="mybatis的多表查询"><a href="#mybatis的多表查询" class="headerlink" title="mybatis的多表查询"></a>mybatis的多表查询</h1><p>假如我们有一个员工表和员工所在部门表，那么员工表的部门ID外键部门表的部门ID，那么在mybatis这样的持久层框架中，它是在底层自动的对数据库数据进行封装成对应的实体类对象，那如何在展示到浏览器端时，展示员工信息时展示它的部门名称呢？</p>
<h2 id="多对一查询"><a href="#多对一查询" class="headerlink" title="多对一查询"></a>多对一查询</h2><p>实体类型：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> Integer empid<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String ename<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String esex<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Date ehiredate<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Double esal<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Dept dept<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> Integer deptid <span class="token punctuation">;</span>
    <span class="token keyword">public</span> String dname <span class="token punctuation">;</span> 
    <span class="token keyword">public</span> String dloc <span class="token punctuation">;</span> 
<span class="token punctuation">}</span></code></pre>
<h3 id="使用配置方式"><a href="#使用配置方式" class="headerlink" title="使用配置方式"></a>使用配置方式</h3><p>EmpMapper.xml文件：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"BaseEmp"</span> type<span class="token operator">=</span><span class="token string">"com.ahdy.domain.Emp"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"empid"</span> column<span class="token operator">=</span><span class="token string">"empid"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>
        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"ename"</span> column<span class="token operator">=</span><span class="token string">"ename"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>
        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"esex"</span> column<span class="token operator">=</span><span class="token string">"esex"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>
        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"ehiredate"</span> column<span class="token operator">=</span><span class="token string">"ehiredate"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>
        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"esal"</span> column<span class="token operator">=</span><span class="token string">"esal"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>
        <span class="token operator">&lt;</span>association property<span class="token operator">=</span><span class="token string">"dept"</span> javaType<span class="token operator">=</span><span class="token string">"com.ahdy.domain.Dept"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"deptid"</span> column<span class="token operator">=</span><span class="token string">"deptid"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>
            <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"dname"</span> column<span class="token operator">=</span><span class="token string">"dname"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>
            <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"dloc"</span> column<span class="token operator">=</span><span class="token string">"dloc"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>association<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>
<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"queryAllEmp3"</span> resultMap<span class="token operator">=</span><span class="token string">"BaseEmp"</span><span class="token operator">></span>
         select <span class="token operator">*</span> from emp inner join dept <span class="token function">using</span> <span class="token punctuation">(</span>deptid<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<h3 id="使用注解方式"><a href="#使用注解方式" class="headerlink" title="使用注解方式"></a>使用注解方式</h3><h4 id="半注解方式"><a href="#半注解方式" class="headerlink" title="半注解方式"></a>半注解方式</h4><p>EmpMapper.xml文件：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resultMap type<span class="token operator">=</span><span class="token string">"com.ahdy.domain.Emp"</span> id<span class="token operator">=</span><span class="token string">"myEmp"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"eid"</span> column<span class="token operator">=</span><span class="token string">"eid"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"ename"</span> column<span class="token operator">=</span><span class="token string">"ename"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"esex"</span> column<span class="token operator">=</span><span class="token string">"esex"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"eaddress"</span> column<span class="token operator">=</span><span class="token string">"eaddress"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"ehiredate"</span> column<span class="token operator">=</span><span class="token string">"ehiredate"</span> javaType<span class="token operator">=</span><span class="token string">"java.util.Date"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"esal"</span> column<span class="token operator">=</span><span class="token string">"esal"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.Double"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> javaType<span class="token operator">=</span><span class="token string">"com.ahdy.domain.Dept"</span> 指emp里面dept属性的类型<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>association property<span class="token operator">=</span><span class="token string">"dept"</span> javaType<span class="token operator">=</span><span class="token string">"com.ahdy.domain.Dept"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"deptid"</span> column<span class="token operator">=</span><span class="token string">"deptid"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"dname"</span> column<span class="token operator">=</span><span class="token string">"dname"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"dloc"</span> column<span class="token operator">=</span><span class="token string">"dloc"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>association<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span></code></pre>
<p>EmpMapper.java文件</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from emp inner join dept using(deptid)"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"EmpMapper.myEmp"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">queryAllEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>注意：添加注解的类要添加到mybatis的配置中,不然不会处理注解。当从配置方式换成注解方式时，<code>namespace</code>不能再和Mapper.java的全类名对应。</p>
</blockquote>
<h4 id="全注解方式"><a href="#全注解方式" class="headerlink" title="全注解方式"></a>全注解方式</h4><p>EmpMapper.java文件：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from emp inner join dept using("</span>deptid"<span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"eid"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"eid"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"ename"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"ename"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"esex"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"esex"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"eaddress"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"eaddress"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"ehiredate"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"ehiredate"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"esal"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"esal"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property<span class="token operator">=</span><span class="token string">"dept"</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">"deptid"</span><span class="token punctuation">,</span>javaType<span class="token operator">=</span>Dept<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>one<span class="token operator">=</span><span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">"com.ahdy.mapper.DeptMapper.queryDeptByDeptId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">queryAllEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>DeptMapper.java文件：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*根据部门ID查询部门*/</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from sys_dept where deptid=#{value}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> Dept <span class="token function">queryDeptByDeptId</span><span class="token punctuation">(</span>Integer deptid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h2><p>实体类文件：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">public</span> Integer deptid <span class="token punctuation">;</span>
    <span class="token keyword">public</span> String dname <span class="token punctuation">;</span> 
    <span class="token keyword">public</span> String dloc <span class="token punctuation">;</span> 
    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Emp<span class="token operator">></span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> Integer empid<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String ename<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String esex<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Date ehiredate<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Double esal<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="使用配置方式-1"><a href="#使用配置方式-1" class="headerlink" title="使用配置方式"></a>使用配置方式</h3><p>Mapper文件：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resultMap type<span class="token operator">=</span><span class="token string">"com.ahdy.domain.Dept"</span> id<span class="token operator">=</span><span class="token string">"myDept"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"deptid"</span> column<span class="token operator">=</span><span class="token string">"deptid"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"dname"</span> column<span class="token operator">=</span><span class="token string">"dname"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"dloc"</span> column<span class="token operator">=</span><span class="token string">"dloc"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 里面有一个emps的  HashSet javaType指emps的类型 ofType指 HashSet 里面的元素类型<span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>collection property<span class="token operator">=</span><span class="token string">"emps"</span> javaType<span class="token operator">=</span><span class="token string">"java.util.HashSet"</span> ofType<span class="token operator">=</span><span class="token string">"com.ahdy.domain.Emp"</span> <span class="token operator">></span>
            <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"eid"</span> column<span class="token operator">=</span><span class="token string">"eid"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"ename"</span> column<span class="token operator">=</span><span class="token string">"ename"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"esex"</span> column<span class="token operator">=</span><span class="token string">"esex"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"eaddress"</span> column<span class="token operator">=</span><span class="token string">"eaddress"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"ehiredate"</span> column<span class="token operator">=</span><span class="token string">"ehiredate"</span> javaType<span class="token operator">=</span><span class="token string">"java.util.Date"</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"esal"</span> column<span class="token operator">=</span><span class="token string">"esal"</span> javaType<span class="token operator">=</span><span class="token string">"java.lang.Double"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>collection<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>
<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"queryAllDept"</span> resultMap<span class="token operator">=</span><span class="token string">"myDept"</span><span class="token operator">></span>
    select <span class="token operator">*</span> from dept inner join emp <span class="token function">using</span><span class="token punctuation">(</span>deptid<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<blockquote>
<p>注意：collection中javaType指emps的类型 ofType指 HashSet 里面的元素类型</p>
</blockquote>
<h3 id="使用注解方式-1"><a href="#使用注解方式-1" class="headerlink" title="使用注解方式"></a>使用注解方式</h3><p>DeptMapper.java文件</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from sys_dept "</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"deptid"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"deptid"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"dname"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"dname"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"dloc"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"dloc"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property<span class="token operator">=</span><span class="token string">"emps"</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">"deptid"</span><span class="token punctuation">,</span>javaType<span class="token operator">=</span>Set<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    many<span class="token operator">=</span><span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">"com.sxt.dao.EmpMapper.queryEmpsByDeptId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">queryAllDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>EmpMapper.java文件：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*根据部门ID查询员工*/</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from sys_emp where deptid=#{value}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">queryEmpsByDeptId</span><span class="token punctuation">(</span>Integer deptid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>持久层框架</tag>
        <tag>mybatis</tag>
        <tag>多表查询</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis中动态sql</title>
    <url>/blog/2020/03/04/mybatis-zhong-de-dong-tai-sql/</url>
    <content><![CDATA[<h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h2><p>MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p>
<p>动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findActiveBlogWithTitleLike"</span>
     resultType<span class="token operator">=</span><span class="token string">"Blog"</span><span class="token operator">></span>
  SELECT <span class="token operator">*</span> FROM BLOG WHERE state <span class="token operator">=</span> ‘ACTIVE’
  <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"title != null"</span><span class="token operator">></span>
    AND title like #<span class="token punctuation">{</span>title<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<p>这条语句提供了一种可选的查找文本功能。如果没有传入“title”，那么所有处于“ACTIVE”状态的BLOG都会返回；反之若传入了“title”，那么就会对“title”一列进行模糊查找并返回 BLOG 结果（细心的读者可能会发现，“title”参数值是可以包含一些掩码或通配符的）。</p>
<p>如果希望通过“title”和“author”两个参数进行可选搜索该怎么办呢？首先，改变语句的名称让它更具实际意义；然后只要加入另一个条件即可。</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findActiveBlogLike"</span>
     resultType<span class="token operator">=</span><span class="token string">"Blog"</span><span class="token operator">></span>
  SELECT <span class="token operator">*</span> FROM BLOG WHERE state <span class="token operator">=</span> ‘ACTIVE’
  <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"title != null"</span><span class="token operator">></span>
    AND title like #<span class="token punctuation">{</span>title<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"author != null and author.name != null"</span><span class="token operator">></span>
    AND author_name like #<span class="token punctuation">{</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose, when, otherwise"></a>choose, when, otherwise</h3><p>有时我们不想应用到所有的条件语句，而只想从中择其一项。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p>
<p>还是上面的例子，但是这次变为提供了“title”就按“title”查找，提供了“author”就按“author”查找的情形，若两者都没有提供，就返回所有符合条件的 BLOG（实际情况可能是由管理员按一定策略选出 BLOG 列表，而不是返回大量无意义的随机结果）。</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findActiveBlogLike"</span>
     resultType<span class="token operator">=</span><span class="token string">"Blog"</span><span class="token operator">></span>
  SELECT <span class="token operator">*</span> FROM BLOG WHERE state <span class="token operator">=</span> ‘ACTIVE’
  <span class="token operator">&lt;</span>choose<span class="token operator">></span>
    <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"title != null"</span><span class="token operator">></span>
      AND title like #<span class="token punctuation">{</span>title<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>when<span class="token operator">></span>
    <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"author != null and author.name != null"</span><span class="token operator">></span>
      AND author_name like #<span class="token punctuation">{</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>when<span class="token operator">></span>
    <span class="token operator">&lt;</span>otherwise<span class="token operator">></span>
      AND featured <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>otherwise<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>choose<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim, where, set"></a>trim, where, set</h3><p>前面几个例子已经合宜地解决了一个臭名昭著的动态 SQL 问题。现在回到“if”示例，这次我们将“ACTIVE = 1”也设置成动态的条件，看看会发生什么。</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findActiveBlogLike"</span>
     resultType<span class="token operator">=</span><span class="token string">"Blog"</span><span class="token operator">></span>
  SELECT <span class="token operator">*</span> FROM BLOG
  WHERE
  <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"state != null"</span><span class="token operator">></span>
    state <span class="token operator">=</span> #<span class="token punctuation">{</span>state<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"title != null"</span><span class="token operator">></span>
    AND title like #<span class="token punctuation">{</span>title<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"author != null and author.name != null"</span><span class="token operator">></span>
    AND author_name like #<span class="token punctuation">{</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<p>如果这些条件没有一个能匹配上会发生什么？最终这条 SQL 会变成这样：</p>
<pre class=" language-java"><code class="language-java">SELECT <span class="token operator">*</span> FROM BLOG
WHERE</code></pre>
<p>这会导致查询失败。如果仅仅第二个条件匹配又会怎样？这条 SQL 最终会是这样:</p>
<pre class=" language-java"><code class="language-java">SELECT <span class="token operator">*</span> FROM BLOG
WHERE
AND title like ‘someTitle’</code></pre>
<p>这个查询也会失败。这个问题不能简单地用条件句式来解决，如果你也曾经被迫这样写过，那么你很可能从此以后都不会再写出这种语句了。</p>
<p>MyBatis 有一个简单的处理，这在 90% 的情况下都会有用。而在不能使用的地方，你可以自定义处理方式来令其正常工作。一处简单的修改就能达到目的：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findActiveBlogLike"</span>
     resultType<span class="token operator">=</span><span class="token string">"Blog"</span><span class="token operator">></span>
  SELECT <span class="token operator">*</span> FROM BLOG
  <span class="token operator">&lt;</span>where<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"state != null"</span><span class="token operator">></span>
         state <span class="token operator">=</span> #<span class="token punctuation">{</span>state<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"title != null"</span><span class="token operator">></span>
        AND title like #<span class="token punctuation">{</span>title<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"author != null and author.name != null"</span><span class="token operator">></span>
        AND author_name like #<span class="token punctuation">{</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<p>where 元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。而且，若语句的开头为“AND”或“OR”，where 元素也会将它们去除。</p>
<p>如果 where 元素没有按正常套路出牌，我们可以通过自定义 trim 元素来定制 where 元素的功能。比如，和 where 元素等价的自定义 trim 元素为：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>trim prefix<span class="token operator">=</span><span class="token string">"WHERE"</span> prefixOverrides<span class="token operator">=</span><span class="token string">"AND |OR "</span><span class="token operator">></span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>trim<span class="token operator">></span></code></pre>
<p>prefixOverrides 属性会忽略通过管道分隔的文本序列（注意此例中的空格也是必要的）。它的作用是移除所有指定在 prefixOverrides 属性中的内容，并且插入 prefix 属性中指定的内容。</p>
<p>类似的用于动态更新语句的解决方案叫做 set。set 元素可以用于动态包含需要更新的列，而舍去其它的。比如：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updateAuthorIfNecessary"</span><span class="token operator">></span>
  update Author
    <span class="token operator">&lt;</span>set<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"username != null"</span><span class="token operator">></span>username<span class="token operator">=</span>#<span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"password != null"</span><span class="token operator">></span>password<span class="token operator">=</span>#<span class="token punctuation">{</span>password<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"email != null"</span><span class="token operator">></span>email<span class="token operator">=</span>#<span class="token punctuation">{</span>email<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"bio != null"</span><span class="token operator">></span>bio<span class="token operator">=</span>#<span class="token punctuation">{</span>bio<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>
  where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">></span></code></pre>
<p>这里，set 元素会动态前置 SET 关键字，同时也会删掉无关的逗号，因为用了条件语句之后很可能就会在生成的 SQL 语句的后面留下这些逗号。（译者注：因为用的是“if”元素，若最后一个“if”没有匹配上而前面的匹配上，SQL 语句的最后就会有一个逗号遗留）</p>
<p>若你对 set 元素等价的自定义 trim 元素的代码感兴趣，那这就是它的真面目：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>trim prefix<span class="token operator">=</span><span class="token string">"SET"</span> suffixOverrides<span class="token operator">=</span><span class="token string">","</span><span class="token operator">></span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>trim<span class="token operator">></span></code></pre>
<blockquote>
<p>注意这里我们删去的是后缀值，同时添加了前缀值。</p>
</blockquote>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>动态 SQL 的另外一个常用的操作需求是对一个集合进行遍历，通常是在构建 IN 条件语句的时候。比如：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectPostIn"</span> resultType<span class="token operator">=</span><span class="token string">"domain.blog.Post"</span><span class="token operator">></span>
  SELECT <span class="token operator">*</span>
  FROM POST P
  WHERE ID in
  <span class="token operator">&lt;</span>foreach item<span class="token operator">=</span><span class="token string">"item"</span> index<span class="token operator">=</span><span class="token string">"index"</span> collection<span class="token operator">=</span><span class="token string">"list"</span>
      open<span class="token operator">=</span><span class="token string">"("</span> separator<span class="token operator">=</span><span class="token string">","</span> close<span class="token operator">=</span><span class="token string">")"</span><span class="token operator">></span>
        #<span class="token punctuation">{</span>item<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<p>foreach 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及在迭代结果之间放置分隔符。这个元素是很智能的，因此它不会偶然地附加多余的分隔符。</p>
<blockquote>
<p>注意 你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象传递给 foreach 作为集合参数。当使用可迭代对象或者数组时，index 是当前迭代的次数，item 的值是本次迭代获取的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。<br>到此我们已经完成了涉及 XML 配置文件和 XML 映射文件的讨论。下一章将详细探讨 Java API，这样就能提高已创建的映射文件的利用效率。</p>
</blockquote>
<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 script 元素。比如:</p>
<pre class=" language-java"><code class="language-java">     <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"&lt;script>"</span><span class="token punctuation">,</span>
      <span class="token string">"update Author"</span><span class="token punctuation">,</span>
      <span class="token string">"  &lt;set>"</span><span class="token punctuation">,</span>
      <span class="token string">"    &lt;if test='username != null'>username=#{username},&lt;/if>"</span><span class="token punctuation">,</span>
      <span class="token string">"    &lt;if test='password != null'>password=#{password},&lt;/if>"</span><span class="token punctuation">,</span>
      <span class="token string">"    &lt;if test='email != null'>email=#{email},&lt;/if>"</span><span class="token punctuation">,</span>
      <span class="token string">"    &lt;if test='bio != null'>bio=#{bio}&lt;/if>"</span><span class="token punctuation">,</span>
      <span class="token string">"  &lt;/set>"</span><span class="token punctuation">,</span>
      <span class="token string">"where id=#{id}"</span><span class="token punctuation">,</span>
      <span class="token string">"&lt;/script>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">updateAuthorValues</span><span class="token punctuation">(</span>Author author<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。比如：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectBlogsLike"</span> resultType<span class="token operator">=</span><span class="token string">"Blog"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>bind name<span class="token operator">=</span><span class="token string">"pattern"</span> value<span class="token operator">=</span><span class="token string">"'%' + _parameter.getTitle() + '%'"</span> <span class="token operator">/</span><span class="token operator">></span>
  SELECT <span class="token operator">*</span> FROM BLOG
  WHERE title LIKE #<span class="token punctuation">{</span>pattern<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<h3 id="多数据库支持"><a href="#多数据库支持" class="headerlink" title="多数据库支持"></a>多数据库支持</h3><p>一个配置了“_databaseId”变量的 databaseIdProvider 可用于动态代码中，这样就可以根据不同的数据库厂商构建特定的语句。比如下面的例子：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"insert"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>selectKey keyProperty<span class="token operator">=</span><span class="token string">"id"</span> resultType<span class="token operator">=</span><span class="token string">"int"</span> order<span class="token operator">=</span><span class="token string">"BEFORE"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"_databaseId == 'oracle'"</span><span class="token operator">></span>
      select seq_users<span class="token punctuation">.</span>nextval from dual
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"_databaseId == 'db2'"</span><span class="token operator">></span>
      select nextval <span class="token keyword">for</span> seq_users from sysibm<span class="token punctuation">.</span>sysdummy1"
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>selectKey<span class="token operator">></span>
  insert into users <span class="token function">values</span> <span class="token punctuation">(</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">></span></code></pre>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>持久层框架</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis中mapper文件配置</title>
    <url>/blog/2020/03/03/mybatis-zhong-mapper-wen-jian-pei-zhi/</url>
    <content><![CDATA[<h2 id="mybatis中xml映射文件"><a href="#mybatis中xml映射文件" class="headerlink" title="mybatis中xml映射文件"></a>mybatis中xml映射文件</h2><p>MyBatis 的真正强大在于它的映射语句，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 为聚焦于 SQL 而构建，以尽可能地为你减少麻烦。</p>
<p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p>
<ul>
<li><code>cache</code> – 对给定命名空间的缓存配置。</li>
<li><code>cache-ref</code> – 对其他命名空间缓存配置的引用。</li>
<li><code>resultMap</code> – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。</li>
<li><code>parameterMap</code> – 已被废弃！老式风格的参数映射。更好的办法是使用内联参数，此元素可能在将来被移除。文档中不会介绍此元素。sql – 可被其他语句引用的可重用语句块。</li>
<li><code>insert</code> – 映射插入语句</li>
<li><code>update</code> – 映射更新语句</li>
<li><code>delete</code> – 映射删除语句</li>
<li><code>select</code> – 映射查询语句</li>
</ul>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select 元素允许你配置很多属性来配置每条语句的作用细节。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>id</code></td>
<td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td><code>parameterType</code></td>
<td>将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler） 推断出具体传入语句的参数，默认值为未设置（unset）。</td>
</tr>
<tr>
<td><code>parameterMap</code></td>
<td>这是引用外部 parameterMap 的已经被废弃的方法。请使用内联参数映射和 parameterType 属性。</td>
</tr>
<tr>
<td><code>resultType</code></td>
<td>从这条语句中返回的期望类型的类的完全限定名或别名。 注意如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身。可以使用 resultType 或 resultMap，但不能同时使用。</td>
</tr>
<tr>
<td><code>resultMap</code></td>
<td>外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂映射的情形都能迎刃而解。可以使用 resultMap 或 resultType，但不能同时使用。</td>
</tr>
<tr>
<td><code>flushCache</code></td>
<td>将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td>
</tr>
<tr>
<td><code>useCache</code></td>
<td>将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖驱动）。</td>
</tr>
<tr>
<td><code>fetchSize</code></td>
<td>这是一个给驱动的提示，尝试让驱动程序每次批量返回的结果行数和这个设置值相等。 默认值为未设置（unset）（依赖驱动）。</td>
</tr>
<tr>
<td><code>statementType</code></td>
<td>STATEMENT，PREPARED 或 CALLABLE 中的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td><code>resultSetType</code></td>
<td>FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖驱动）。</td>
</tr>
<tr>
<td><code>databaseId</code></td>
<td>如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。</td>
</tr>
<tr>
<td><code>resultOrdered</code></td>
<td>这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。 这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。</td>
</tr>
<tr>
<td><code>resultSets</code></td>
<td>这个设置仅对多结果集的情况适用。它将列出语句执行后返回的结果集并给每个结果集一个名称，名称是逗号分隔的。</td>
</tr>
</tbody></table>
<h3 id="insert-update-和-delete"><a href="#insert-update-和-delete" class="headerlink" title="insert, update 和 delete"></a>insert, update 和 delete</h3><p>数据变更语句 insert，update 和 delete 的实现非常接近：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>id</code></td>
<td align="right">命名空间中的唯一标识符，可被用来代表这条语句。</td>
</tr>
<tr>
<td align="left"><code>parameterType</code></td>
<td align="right">将要传入语句的参数的完全限定类名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器推断出具体传入语句的参数，默认值为未设置（unset）。</td>
</tr>
<tr>
<td align="left"><code>parameterMap</code></td>
<td align="right">这是引用外部 parameterMap 的已经被废弃的方法。请使用内联参数映射和 parameterType 属性。</td>
</tr>
<tr>
<td align="left"><code>flushCache</code></td>
<td align="right">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：true（对于 insert、update 和 delete 语句）。</td>
</tr>
<tr>
<td align="left"><code>timeout</code></td>
<td align="right">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖驱动）。</td>
</tr>
<tr>
<td align="left"><code>statementType</code></td>
<td align="right">STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td align="left"><code>useGeneratedKeys</code></td>
<td align="right">（仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。</td>
</tr>
<tr>
<td align="left"><code>keyProperty</code></td>
<td align="right">仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认值：未设置（unset）。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。</td>
</tr>
<tr>
<td align="left"><code>keyColumn</code></td>
<td align="right">（仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望使用多个生成的列，也可以设置为逗号分隔的属性名称列表。</td>
</tr>
<tr>
<td align="left"><code>databaseId</code></td>
<td align="right">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。</td>
</tr>
</tbody></table>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>这个元素可以被用来定义可重用的 SQL 代码段，这些 SQL 代码可以被包含在其他语句中。它可以（在加载的时候）被静态地设置参数。 在不同的包含语句中可以设置不同的值到参数占位符上。比如：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>sql id<span class="token operator">=</span><span class="token string">"userColumns"</span><span class="token operator">></span> $<span class="token punctuation">{</span>alias<span class="token punctuation">}</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>$<span class="token punctuation">{</span>alias<span class="token punctuation">}</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>$<span class="token punctuation">{</span>alias<span class="token punctuation">}</span><span class="token punctuation">.</span>password <span class="token operator">&lt;</span><span class="token operator">/</span>sql<span class="token operator">></span></code></pre>
<p>这个 SQL 片段可以被包含在其他语句中，例如：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectUsers"</span> resultType<span class="token operator">=</span><span class="token string">"map"</span><span class="token operator">></span>
  select
    <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"userColumns"</span><span class="token operator">></span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"alias"</span> value<span class="token operator">=</span><span class="token string">"t1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>include<span class="token operator">></span><span class="token punctuation">,</span>
    <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"userColumns"</span><span class="token operator">></span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"alias"</span> value<span class="token operator">=</span><span class="token string">"t2"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>include<span class="token operator">></span>
  from some_table t1
    cross join some_table t2
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>持久层框架</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>idea中web项目配置文件编译问题</title>
    <url>/blog/2020/03/03/idea-zhong-web-xiang-mu-pei-zhi-wen-jian-bian-yi-wen-ti/</url>
    <content><![CDATA[<h2 id="idea中web项目配置文件编译问题"><a href="#idea中web项目配置文件编译问题" class="headerlink" title="idea中web项目配置文件编译问题"></a>idea中web项目配置文件编译问题</h2><p>Resources 一般用于标注资源文件目录。在 maven 项目下，资源目录是单独划分出来的，其目录为：<code>src - main -resources</code>。<br>但这一篇讲的是普通web项目src下的资源文件。</p>
<p>我们可以将配置文件等直接放在src下，但是配置文件很多的话项目就显得很乱，所以我们可以创建一个config包，将配置文件都在放在里面。但我们创建的是一个普通的包，idea并不会将里面的文件编译后自动复制到编译后的文件夹中，也就是classes目录。</p>
<p>idea对这些配置的文件方式很明显和eclipse是不同的。在idea中有一个 Content Roots的概念。需要为每一个folder配置相应的Content Roots。Content Roots包括resources、sources、tests等。<br><img src="http://qiniuyun.dajienihao.cn/image/0303/13156151561.png" alt=""></p>
<p>如图所示，src文件夹被标注为Sources，那么下面的所有子文件夹均为Sources，编译后生成.class文件。</p>
<p>Resources文件夹被标注为Resources，那么在该文件夹下的配置文件在编译时会自动复制到编译文件夹中。</p>
<p>所以这里就有了解决方案，将config文件夹改为resources。<br>这时我们的配置文件就被编译到编译文件夹下了。<br><img src="http://qiniuyun.dajienihao.cn/image/0303/QQ%E6%88%AA%E5%9B%BE20200303110724.jpg" alt=""></p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Sprin中的AOP</title>
    <url>/blog/2020/03/01/spring-zhong-de-aop/</url>
    <content><![CDATA[<h1 id="AOP的相关概念"><a href="#AOP的相关概念" class="headerlink" title="AOP的相关概念"></a>AOP的相关概念</h1><h2 id="1-AOP概述"><a href="#1-AOP概述" class="headerlink" title="1. AOP概述"></a>1. AOP概述</h2><h3 id="1-1-什么是AOP"><a href="#1-1-什么是AOP" class="headerlink" title="1.1 什么是AOP"></a>1.1 什么是AOP</h3><p><strong>AOP</strong>：全称是<code>Aspect Oriented Programming</code>即：面向切面编程。<br>简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的基础上，对我们的已有方法进行增强。</p>
<h3 id="1-2-AOP的作用及优势"><a href="#1-2-AOP的作用及优势" class="headerlink" title="1.2 AOP的作用及优势"></a>1.2 AOP的作用及优势</h3><p><strong>作用</strong>：<br>&emsp;在程序运行期间，不修改源码对已有方法进行增强。<br><strong>优势</strong>：<br>&emsp;减少重复代码<br>&emsp;提高开发效率<br>&emsp;维护方便</p>
<h3 id="1-3-AOP的实现方式"><a href="#1-3-AOP的实现方式" class="headerlink" title="1.3 AOP的实现方式"></a>1.3 AOP的实现方式</h3><p>使用动态代理技术</p>
<h4 id="1-3-1-动态代理的特点"><a href="#1-3-1-动态代理的特点" class="headerlink" title="1.3.1 动态代理的特点"></a>1.3.1 动态代理的特点</h4><p>字节码随用随创建，随用随加载。<br>它与静态代理的区别也在于此。因为静态代理是字节码一上来就创建好，并完成加载。<br>装饰者模式就是静态代理的一种体现。</p>
<h4 id="1-3-2-动态代理常用的有两种方式"><a href="#1-3-2-动态代理常用的有两种方式" class="headerlink" title="1.3.2 动态代理常用的有两种方式"></a>1.3.2 动态代理常用的有两种方式</h4><p><strong>基于接口的动态代理</strong><br>&emsp;提供者：JDK 官方的<code>Proxy</code>类。<br>&emsp;要求：被代理类最少实现一个接口。<br><strong>基于子类的动态代理</strong><br>&emsp;提供者：第三方的<code>CGLib</code>，如果报 asmxxxx 异常，需要导入 asm.jar。<br>&emsp;要求：被代理类不能用<code>final</code>修饰的类（最终类）。</p>
<h2 id="2-Spring中AOP-的细节"><a href="#2-Spring中AOP-的细节" class="headerlink" title="2. Spring中AOP 的细节"></a>2. Spring中AOP 的细节</h2><h3 id="2-1-AOP-相关术语"><a href="#2-1-AOP-相关术语" class="headerlink" title="2.1 AOP 相关术语"></a>2.1 AOP 相关术语</h3><p><strong>Joinpoint(连接点):</strong><br>&emsp;所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点。<br><strong>Pointcut(切入点):</strong><br>&emsp;所谓切入点是指我们要对哪些 <code>Joinpoint</code> 进行拦截的定义<br><strong>Advice(通知/增强):</strong><br>&emsp;所谓通知是指拦截到 <code>Joinpoint</code> 之后所要做的事情就是通知。<br>&emsp;通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。<br><strong>Introduction(引介):</strong><br>&emsp;引介是一种特殊的通知在不修改类代码的前提下,<code>Introduction</code> 可以在运行期为类动态地添加一些方法或 Field。<br><strong>Target(目标对象):</strong><br>&emsp;代理的目标对象。<br><strong>Weaving(织入):</strong><br>&emsp;是指把增强应用到目标对象来创建新的代理对象的过程。<br>&emsp;spring 采用动态代理织入，而 <code>AspectJ</code> 采用编译期织入和类装载期织入。<br><strong>Proxy（代理）:</strong><br>&emsp;一个类被 AOP 织入增强后，就产生一个结果代理类。<br><strong>Aspect(切面):</strong><br>&emsp;是切入点和通知（引介）的结合。。</p>
<h3 id="2-2-学习spring中的AOP要明确的事"><a href="#2-2-学习spring中的AOP要明确的事" class="headerlink" title="2.2 学习spring中的AOP要明确的事"></a>2.2 学习spring中的AOP要明确的事</h3><p><strong>a、开发阶段（我们做的）</strong><br>&emsp;编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。<br>&emsp;把公用代码抽取出来，制作成通知。（开发阶段最后再做）：AOP 编程人员来做(实际并无这个岗位)。<br>&emsp;在配置文件中，声明切入点与通知间的关系，即切面。：AOP 编程人员来做(实际并无这个岗位)。<br><strong>b、运行阶段（Spring 框架完成的）</strong><br>&emsp;Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
<h4 id="2-2-1-通知方法"><a href="#2-2-1-通知方法" class="headerlink" title="2.2.1 通知方法"></a>2.2.1 通知方法</h4><ul>
<li>前置通知:在我们执行目标方法之前运行<code>(@Before)</code></li>
<li>最终通知:在我们目标方法运行结束之后 ,不管有没有异常<code>(@After)</code></li>
<li>后置通知:在我们的目标方法正常返回值后运行<code>(@AfterReturning)</code></li>
<li>异常通知:在我们的目标方法出现异常后运行<code>(@AfterThrowing)</code></li>
<li>环绕通知:动态代理, 需要手动执行joinPoint.procced()(其实就是执行我们的目标方法执行之前相当于前置通知, 执行之后就相当于我们后置通知<code>(@Around)</code><h3 id="2-3-关于代理的选择"><a href="#2-3-关于代理的选择" class="headerlink" title="2.3 关于代理的选择"></a>2.3 关于代理的选择</h3>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>框架</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>java环境的安装配置</title>
    <url>/blog/2020/02/28/java-huan-jing-de-an-zhuang-ji-pei-zhi/</url>
    <content><![CDATA[<h1 id="java环境"><a href="#java环境" class="headerlink" title="java环境"></a>java环境</h1><p>最近看到许多人问java环境怎么安装配置的，这个的东西其实并不难，但是对第一次安装的人可能还是需要耗点功夫的，毕竟我第一次安装也用了一两个小时才安装好。</p>
<h2 id="绿色版eclipse"><a href="#绿色版eclipse" class="headerlink" title="绿色版eclipse"></a>绿色版eclipse</h2><p>如果你还是安装不好的话可以使用绿色版eclipse这里我也分享给大家。<br><a href="https://pan.baidu.com/s/1pjX6macSqOsajpphoOQXQg" target="_blank" rel="noopener">绿色版eclipse</a>提取码：<code>rqng</code>这是 Eclipse EE 2019-09 的版本，不用配置环境，内部已经包含了JRE8，解压直接运行即可。<br>这是由邵发老师提供的，这里也把发哥的<a href="http://www.afanihao.cn/" target="_blank" rel="noopener">官网</a>提供一下。<br>里面具备了java，c，c++，c#的一系列教程。我就是学了发哥的java路线课程，在b站也可以搜到发哥的<a href="https://www.bilibili.com/video/av85423591/" target="_blank" rel="noopener">入门教程</a>。对于刚入门的朋友非常友好。<br>qq群号：<code>495734195</code></p>
<h2 id="jdk下载的安装"><a href="#jdk下载的安装" class="headerlink" title="jdk下载的安装"></a>jdk下载的安装</h2><p>jdk是学习java必不可少的，以win10 64位系统和大家分享一下jdk的下载和安装。有需要的朋友可以参考下。<br>先提供jdk的下载地址：<a href="https://pan.baidu.com/s/1NrTE-2JkH_4tyMzrS1oryA" target="_blank" rel="noopener">链接</a>提取码：<code>h6im</code><br>因为oracle的官网打开太慢的了 这里我就将jdk上传到百度网盘了。</p>
<p>下载完成后点击安装，下一步<br><img src="http://qiniuyun.dajienihao.cn/1.jpg" alt=""><br>选择jdk的安装路径(安装路径不能出现中文)，默认安装路径为:”C:\Program Files\Java\jdk版本”。可以默认安装，也可以自定义安装(建议)。选好之后点击下一步，安装的时候记住路径，后边会用到。<br><img src="http://qiniuyun.dajienihao.cn/2.png" alt=""><br>点击安装，开始安装jdk，等待一会儿之后出现如下界面，点击”确定”。<br><img src="http://qiniuyun.dajienihao.cn/3.png" alt=""><br>安装jre，建议和jdk安装到同一目录下。点击”下一步”，开始安装jre<br><img src="http://qiniuyun.dajienihao.cn/4.png" alt=""><br>jre 安装完成后，出现如下界面说明jdk已经安装完成了。<br><img src="http://qiniuyun.dajienihao.cn/5.png" alt=""><br>当然这还没完，还要配置环境变量。</p>
<h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><p>环境变量一般指在操作系统中用来指定操作系统运行环境的一些参数。如path，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还会到path中指定的路径去           找。通俗的讲，你要的东西我这里没有，怎么办呢，那就去path里说的地儿找找吧。<br>在我们编译程序时，我们需要用到javac这个编译工具，而javac是在java的安装目录下的，当我们在其他目录调用javac时，系统因为在当前目录找不到就会报错，为了方便我们以后编译程序，不要每次编译的时候就跑到java安装目录中去，所以我们来设置环境变量。</p>
<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>前提：首先要安装好jdk，然后进行下面的设置<br>具体设置步骤如下：<br>打开我的电脑–属性–高级–环境变量<br><img src="http://qiniuyun.dajienihao.cn/image/0228/6.jpg" alt=""></p>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>新建系统变量JAVA_HOME 和CLASSPATH<br>变量名：JAVA_HOME<br>变量值：<code>C:\Program Files\Java\jdk1.7.0（注意此处应该是你自己安装jdk的实际路径）</code><br>变量名：CLASSPATH<br>变量值：<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code><br><img src="http://qiniuyun.dajienihao.cn/image/0228/7.jpg" alt=""></p>
<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>选择”系统变量”中变量名为”Path”的环境变量，双击该变量，点击新建把JDK安装路径中bin目录的绝对路径，添加到Path变量的值中，并使用半角的分号和已有的路径进行分隔。<br>变量名：Path<br>变量值：<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code><br><img src="http://qiniuyun.dajienihao.cn/image/0228/8.jpg" alt=""></p>
<h2 id="配置完成检查"><a href="#配置完成检查" class="headerlink" title="配置完成检查"></a>配置完成检查</h2><p>打开cmd输入<code>java -version</code> 回车出现以下界面 就说明java环境已经安装好了。<br><img src="http://qiniuyun.dajienihao.cn/image/0228/9.jpg" alt=""><br>这就完成了java的环境配置，配置完成后直接启动eclipse，它会自动完成java环境的配置</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>环境安装</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>lombok的安装使用</title>
    <url>/blog/2020/02/28/lombok-de-an-zhuang-shi-yong/</url>
    <content><![CDATA[<h2 id="lombok的安装使用"><a href="#lombok的安装使用" class="headerlink" title="lombok的安装使用"></a>lombok的安装使用</h2><p>以前的Java项目中，充斥着太多不友好的代码：POJO的getter/setter/toString；异常处理；I/O流的关闭操作等等，这些样板代码既没有技术含量，又影响着代码的美观，Lombok应运而生。<br>任何技术的出现都是为了解决某一类问题，如果在此基础上再建立奇技淫巧，不如回归Java本身，应该保持合理使用而不滥用。</p>
<h2 id="引入相应的依赖"><a href="#引入相应的依赖" class="headerlink" title="引入相应的依赖"></a>引入相应的依赖</h2><p>Lombok的使用跟引用jar包一样，可以在<a href="https://projectlombok.org/" target="_blank" rel="noopener">lombok官网</a>下载jar包，也可以使用maven添加依赖：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>
    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre>
<p>Lombok的<code>scope=provided</code>(作用范围)，说明它只在编译阶段生效，不需要打入包中。事实正是如此，Lombok在编译期将带Lombok注解的Java文件正确编译为完整的Class文件。</p>
<h2 id="添加IDE工具对lombok的支持"><a href="#添加IDE工具对lombok的支持" class="headerlink" title="添加IDE工具对lombok的支持"></a>添加IDE工具对lombok的支持</h2><p>IDEA中引入Lombok支持如下：</p>
<ol>
<li>File &gt; Settings &gt; Plugins</li>
<li>点击 MarkePlace</li>
<li>搜索 Lombok </li>
<li>点击 Install plugin</li>
<li>重新启动IntelliJ IDEA</li>
</ol>
<blockquote>
<p>Eclipse的Lombok插件安装可以自行百度，也比较简单</p>
</blockquote>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>注解：在JavaBean中使用，这个注解包含范围最广，它包含getter、setter、NoArgsConstructor注解，即当使用当前注解时，会自动生成包含的所有方法；

<span class="token annotation punctuation">@builder</span>注解：在JavaBean中使用，使用此注解可通过builder方式初始化对象

<span class="token annotation punctuation">@getter</span>注解：在JavaBean中使用，使用此注解会生成对应的getter方法；

<span class="token annotation punctuation">@setter</span>注解：在JavaBean中使用，使用此注解会生成对应的setter方法；

<span class="token annotation punctuation">@NoArgsConstructor</span>注解：在JJavaBean中使用，使用此注解会生成对应的无参构造方法；

<span class="token annotation punctuation">@AllArgsConstructor</span>注解：在JJavaBean中使用，使用此注解会生成对应的有参构造方法；

<span class="token annotation punctuation">@ToString</span>注解：在JJavaBean中使用，使用此注解会自动重写对应的toStirng方法；

<span class="token annotation punctuation">@EqualsAndHashCode</span>注解：在JavaBean中使用，使用此注解会自动重写对应的equals方法和hashCode方法；

<span class="token annotation punctuation">@Slf4j</span>：在需要打印日志的类中使用，当项目中使用了slf4j打印日志框架时使用该注解，会简化日志的打印流程，只需调用info方法即可；

<span class="token annotation punctuation">@Log4j</span>：在需要打印日志的类中使用，当项目中使用了log4j打印日志框架时使用该注解，会简化日志的打印流程，只需调用info方法即可；</code></pre>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring配置类注解</title>
    <url>/blog/2020/02/26/spring-pei-zhi-lei-zhu-jie/</url>
    <content><![CDATA[<h2 id="Spring配置类注解"><a href="#Spring配置类注解" class="headerlink" title="Spring配置类注解"></a>Spring配置类注解</h2><p>今天又学到了spring的代替xml的配置文件的注解。在下面就一一说明吧。</p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<p>该类是一个配置类，它的作用和bean.xml是一样的<br><strong>作用</strong>：指定当前类是一个配置类<br><strong>细节</strong>：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写。</p>
<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：用于通过注解指定spring在创建容器时要扫描的包<br>属性：<strong>value</strong>：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包。<br>我们使用此注解就等同于在xml中配置了:<code>&lt;context:component-scan base-package=&quot;com.itheima&quot;&gt;&lt;/context:component-scan&gt;</code></p>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"runner"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> QueryRunner <span class="token function">createQueryRunner</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds2"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：用于把当前方法的返回值作为bean对象存入spring的ioc容器中<br>属性:<strong>name</strong>:用于指定bean的id。当不写时，默认值是当前方法的名称<br><strong>细节</strong>：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象。<br>查找的方式和Autowired注解的作用是一样的</p>
<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>JdbcConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：用于导入其他的配置类<br>属性：<strong>value</strong>：用于指定其他配置类的字节码。<br>当我们使用Import的注解之后，有Import注解的类就父配置类，而导入的都是子配置类</p>
<h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds2"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSource <span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            ComboPooledDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ds<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ds<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ds<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：用于指定properties文件的位置<br>属性：<strong>value</strong>：指定文件的名称和路径。<br><strong>关键字</strong>：classpath，表示类路径下</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringIOC常用注解</title>
    <url>/blog/2020/02/26/springioc-chang-yong-zhu-jie/</url>
    <content><![CDATA[<h2 id="springIOC常用注解"><a href="#springIOC常用注解" class="headerlink" title="springIOC常用注解"></a>springIOC常用注解</h2><p>注解配置和xml配置所要实现的功能都是一样的，只是形式不一样而已，xml配置是写在xml文件中，而注解配置是在类中添加注解(使用注解方式配置要在配置文件中添加扫描包)。这里我们按照不同类型进行讲解。</p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote>
<p>他们的作用和在XML配置文件中编写一个标签实现的功能是一样的</p>
</blockquote>
<h4 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h4><p><strong>作用</strong>：用于把当前类对象存入spring容器中<br>属性：<strong>value</strong>：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写。</p>
<h4 id="Controller-Service-Repository"><a href="#Controller-Service-Repository" class="headerlink" title="@Controller @Service @Repository"></a>@Controller @Service @Repository</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>：一般用在表现
<span class="token annotation punctuation">@Service</span>：一般用在业务层
<span class="token annotation punctuation">@Repository</span>：一般用在持久层</code></pre>
<p>以上三个注解他们的作用和属性与Component是一模一样。<br>他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰</p>
<ul>
<li>XML配置方式<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>默认无参构造方式<span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"student"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.yangtzl.Student"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>工厂模式普通方法<span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"factory"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.yangtzl.Factory"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"student"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.yangtzl.Student"</span> factory<span class="token operator">-</span>bean<span class="token operator">=</span><span class="token string">"factory"</span> factory<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"getStudent"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>工厂模式静态方法<span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"student"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.yangtzl.Student"</span> factory<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"getStudent"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre>
</li>
<li>注解方式配置<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//总的，不知道该类属于哪一层就用这个</span>
<span class="token comment" spellcheck="true">/*
使分层更加明确
*/</span>
<span class="token comment" spellcheck="true">//@Controller //表现层</span>
<span class="token comment" spellcheck="true">//@Service //业务层</span>
<span class="token comment" spellcheck="true">//@Repository //持久层</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<h3 id="数据注入"><a href="#数据注入" class="headerlink" title="数据注入"></a>数据注入</h3></li>
</ul>
<blockquote>
<p>他们的作用和在xml配置文件中的bean标签中写一个标签的作用是一样的</p>
</blockquote>
<h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> AccountStudentImpl account<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        account<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：自动按照类型注入。只要容器中有唯一的一个 bean 对象类型和要注入的变量类型匹配，就可以注入成功。<br>如果ioc容器中没有任何 bean 的类型和要注入的变量类型匹配，则报错。<br><strong>Ioc容器中有多个类型匹配时</strong>：使用要注入的对象变量名称作为 bean 的 id，在 spring 容器查找，找到了也可以注入成功。找不到就报错。<br><strong>出现位置</strong>：可以是变量上，也可以是方法上。</p>
<h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"account"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> AccountStudentImpl account<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      account<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用必需和<code>@Autowire</code>一起使用。但是在给方法参数注入时可以独立使用。<br>属性：<strong>value</strong>：用于指定注入bean的id。</p>
<h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"accountStudent"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> AccountStudentImpl account<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        account<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：直接按照 Bean 的 id 注入。它也只能注入其他 bean 类型。<br>属性：<strong>name</strong>：指定 bean 的 id。</p>
<blockquote>
<p>以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。另外，集合类型的注入只能通过XML来实现。</p>
</blockquote>
<h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"yang"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"18"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></code></pre>
<p><strong>作用</strong>：注入基本数据类型和 String 类型数据的<br>属性：<br><strong>value</strong>：用于指定值。它可以使用spring中SpEL(也就是spring的el表达式）<br><strong>SpEL的写法</strong>：${表达式}</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"prototype"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Autowired</span>
        <span class="token keyword">private</span> AccountStudentImpl account<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            account<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：用于指定bean的作用范围<br>属性：<strong>value</strong>：指定范围的取值。常用取值：singleton (默认单例)、prototype（多例）</p>
<h3 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h3><blockquote>
<p>他们的作用就和在bean标签中使用init-method和destroy-methode的作用是一样的</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销毁方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h4 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h4><p>作用：用于指定初始化方法</p>
<h4 id="PreDestroy"><a href="#PreDestroy" class="headerlink" title="@PreDestroy"></a>@PreDestroy</h4><p>作用：用于指定销毁方法</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>IOC</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>spring中的依赖注入</title>
    <url>/blog/2020/02/25/spring-zhong-yi-lai-zhu-ru/</url>
    <content><![CDATA[<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><p>Spring框架的核心功能之一就是通过依赖注入的方式来管理Bean之间的依赖关系。那么我们今天的主角依赖注入到底有什么神奇之处呢？请往下继续看。</p>
<h2 id="依赖注入的概述"><a href="#依赖注入的概述" class="headerlink" title="依赖注入的概述"></a>依赖注入的概述</h2><p>依赖注入（<code>Dependency Injection</code>）。<br>平常的java开发中，程序员在某个类中需要依赖其它类的方法，则通常是new一个依赖类再调用类实例的方法，这种开发存在的问题是new的类实例不好统一管理，spring提出了依赖注入的思想，即依赖类不由程序员实例化，而是通过spring容器帮我们new指定实例并且将实例注入到需要该对象的类中。依赖注入的另一种说法是“控制反转”，通俗的理解是：平常我们new一个实例，这个实例的控制权是我们程序员，而控制反转是指new实例工作不由我们程序员来做而是交给spring容器来做。</p>
<h2 id="spring中的依赖注入"><a href="#spring中的依赖注入" class="headerlink" title="spring中的依赖注入"></a>spring中的依赖注入</h2><p>依赖注入能注入的数据有三类</p>
<ul>
<li>基本数据类型和string</li>
<li>其他bean类型（在配置文件中或者注解配置过的bean）</li>
<li>复杂类型/集合类型</li>
</ul>
<h2 id="spring依赖注入的方式"><a href="#spring依赖注入的方式" class="headerlink" title="spring依赖注入的方式"></a>spring依赖注入的方式</h2><p>在实际环境中实现IoC容器的方式主要分为两大类，一类是依赖查找，依赖查找是通过资源定位，把对应的资源查找回来；另一类则是依赖注入，而Spring主要使用的是依赖注入。一般而言，依赖注入可以分为3种方式。</p>
<h3 id="1-构造函数方式注入"><a href="#1-构造函数方式注入" class="headerlink" title="1.构造函数方式注入"></a>1.构造函数方式注入</h3><p>构造器注入依赖于构造方法实现，而构造方法可以是有参数的或者是无参数的。在大部分的情况下，我们都是通过类的构造方法来创建类对象，Spring也可以采用反射的方式，通过使用构造方法来完成注入，这就是构造器注入的原理。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String roleName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String note<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Role</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">,</span> String note<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>roleName <span class="token operator">=</span> roleName<span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>note <span class="token operator">=</span> note<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这个时候是没有办法利用无参数的构造方法去创建对象的，为了使Spring能够正确创建这个对象，可以像代码清单那样去做。</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"role1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.ssm.chapter9.pojo.Role"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"0"</span> value<span class="token operator">=</span><span class="token string">"总经理"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"1"</span> value<span class="token operator">=</span><span class="token string">"公司管理者"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre>
<p>使用的标签:<code>constructor-arg</code><br>标签出现的位置：bean标签的内部<br>标签中的属性<br>type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型<br>index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始<br>name：用于指定给构造函数中指定名称的参数赋值<br> —————–以上三个用于指定给构造函数中哪个参数赋值————-<br>value：用于提供基本类型和String类型的数据<br>ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象</p>
<h3 id="2-set方法注入"><a href="#2-set方法注入" class="headerlink" title="2.set方法注入"></a>2.set方法注入</h3><p>setter注入是Spring中最主流的注入方式，它利用JavaBean规范所定义的setter方法来完成注入，灵活且可读性高。它消除了使用构造器注入时出现多个参数的可能性，首先可以把构造方法声明为无参数的，然后使用setter注入为其设置对应的值，其实也是通过Java反射技术得以现实的。这里假设先在代码清单中为Role类加入一个没有参数的构造方法，然后做代码清单的配置。</p>
<pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"role2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.ssm.chapter9.pojo.Role"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"roleName"</span> value<span class="token operator">=</span><span class="token string">"高级工程师"</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"note"</span> value<span class="token operator">=</span><span class="token string">"重要人员"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>bean</code></pre>
<p>这样Spring就会通过反射调用没有参数的构造方法生成对象，同时通过反射对应的setter注入配置的值了。这种方式是Spring最为主要的方式，在实际工作中使用广泛。<br>涉及的标签：<code>property</code><br>出现的位置：bean标签的内部<br>标签的属性<br>name：用于指定注入时所调用的set方法名称<br>value：用于提供基本类型和String类型的数据<br>ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象</p>
<h4 id="复杂类型的注入-集合类型的注入"><a href="#复杂类型的注入-集合类型的注入" class="headerlink" title="复杂类型的注入/集合类型的注入"></a>复杂类型的注入/集合类型的注入</h4><p>用于给List结构集合注入的标签：list array set<br>用于个Map结构集合注入的标签: map  props<br>结构相同，标签可以互换</p>
<h3 id="3-注解方式注入"><a href="#3-注解方式注入" class="headerlink" title="3.注解方式注入"></a>3.注解方式注入</h3><blockquote>
<p>他们的作用和在xml配置文件中的bean标签中写一个标签的作用是一样的</p>
</blockquote>
<h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> AccountStudentImpl account<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        account<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：自动按照类型注入。只要容器中有唯一的一个 bean 对象类型和要注入的变量类型匹配，就可以注入成功。<br>如果ioc容器中没有任何 bean 的类型和要注入的变量类型匹配，则报错。<br><strong>Ioc容器中有多个类型匹配时</strong>：使用要注入的对象变量名称作为 bean 的 id，在 spring 容器查找，找到了也可以注入成功。找不到就报错。<br><strong>出现位置</strong>：可以是变量上，也可以是方法上。</p>
<h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"account"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> AccountStudentImpl account<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      account<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用必需和<code>@Autowire</code>一起使用。但是在给方法参数注入时可以独立使用。<br>属性：<strong>value</strong>：用于指定注入bean的id。</p>
<h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"accountStudent"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> AccountStudentImpl account<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        account<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><strong>作用</strong>：直接按照 Bean 的 id 注入。它也只能注入其他 bean 类型。<br>属性：<strong>name</strong>：指定 bean 的 id。</p>
<blockquote>
<p>以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。另外，集合类型的注入只能通过XML来实现。</p>
</blockquote>
<h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"yang"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"18"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></code></pre>
<p><strong>作用</strong>：注入基本数据类型和 String 类型数据的<br>属性：<br><strong>value</strong>：用于指定值。它可以使用spring中SpEL(也就是spring的el表达式）<br><strong>SpEL的写法</strong>：${表达式}</p>
<h2 id="几种方式的优劣"><a href="#几种方式的优劣" class="headerlink" title="几种方式的优劣"></a>几种方式的优劣</h2><h3 id="构造器方式"><a href="#构造器方式" class="headerlink" title="构造器方式"></a>构造器方式</h3><p>优势：在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。<br>弊端：改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。</p>
<h3 id="set方式"><a href="#set方式" class="headerlink" title="set方式"></a>set方式</h3><p>优势：创建对象时没有明确的限制，可以直接使用默认构造函数<br>弊端：如果有某个成员必须有值，则获取对象是有可能set方法没有执行。</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>依赖注入</tag>
        <tag>DI</tag>
      </tags>
  </entry>
  <entry>
    <title>String、StringBuffer和StringBuilder的区别</title>
    <url>/blog/2020/02/22/string-stringbuffer-he-stringbuilder-de-qu-bie/</url>
    <content><![CDATA[<h1 id="String-StringBuffer-StringBuilder三者的使用方法和区别"><a href="#String-StringBuffer-StringBuilder三者的使用方法和区别" class="headerlink" title="String,StringBuffer,StringBuilder三者的使用方法和区别"></a>String,StringBuffer,StringBuilder三者的使用方法和区别</h1><p>在java中，我们常常用到String类型来操作字符串，但是用来操作字符串变量的不仅仅只有String类型，还有StringBuilder和StringBuffer类型，尽管我们平时使用String类型比较多，但是在实际的开发中，这三种类型完全是三足鼎立的局面，根据不同的使用场景，我们要使用不同的类型，在很多情况下，使用StringBuilder和StringBuffer比使用String类型更快，还会有其它优点。</p>
<h2 id="三者的使用"><a href="#三者的使用" class="headerlink" title="三者的使用"></a>三者的使用</h2><p>我们先来了解一下StringBuilder和StringBuffer的简单用法，至于String的用法，我们就不再赘述了，上一篇文章已将String类的方法详细的介绍了，因为StringBuffer和StringBuilder的方法基本上都一样，所以我们共同介绍它们的方法</p>
<h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h3><p>将StringBuffer，StringBuilder对象转换为String字符串，常用在需要输出的时候，因为StringBuffer和StringBuilder的对象不能直接输出，例如：</p>
<pre><code>StringBuffer s1 = new StringBuffer();
s1.toString();</code></pre><h3 id="append-方法"><a href="#append-方法" class="headerlink" title="append()方法"></a>append()方法</h3><p>用于在字符串的后面追加字符串，当StringBuffer,StringBuilder中没有字符串的时候也可以append()，可以用来初始化，例如：</p>
<pre><code>public static void main(String[] args)
    {
        StringBuffer s1 = new StringBuffer().append(&quot;bbb&quot;);
        s1.append(&quot;aaa&quot;);
        System.out.println(s1.toString());
    }</code></pre><p>运行结果：<code>bbbaaa</code></p>
<h3 id="charaAt-方法"><a href="#charaAt-方法" class="headerlink" title="charaAt()方法"></a>charaAt()方法</h3><p>返回指定索引位置的字符，索引从0开始，例如：</p>
<pre><code>public static void main(String[] args)
    {
        StringBuffer s1 = new StringBuffer().append(&quot;bbb&quot;);
        s1.append(&quot;aaa&quot;);
        System.out.print(s1.toString());
        System.out.print(s1.charAt(3));
    }</code></pre><p>运行结果：<code>bbbaaa</code>,<code>a</code></p>
<h3 id="deleteCharAt-方法"><a href="#deleteCharAt-方法" class="headerlink" title="deleteCharAt()方法"></a>deleteCharAt()方法</h3><p>删除指定索引位置的字符，例如：</p>
<pre><code>public static void main(String[] args)
    {
        StringBuffer s1 = new StringBuffer().append(&quot;bbb&quot;);
        s1.append(&quot;aaa&quot;);
        System.out.print(s1.toString());
        s1.deleteCharAt(3);
        System.out.print(s1.toString());
    }</code></pre><p>结果：<code>bbbaaa</code>,<code>bbbaa</code></p>
<h3 id="delete-方法"><a href="#delete-方法" class="headerlink" title="delete()方法"></a>delete()方法</h3><p>删除从开始索引到结束索引的字符串，例如：</p>
<pre><code>public static void main(String[] args)
    {
        StringBuffer s1 = new StringBuffer().append(&quot;bbb&quot;);
        s1.append(&quot;aaa&quot;);
        System.out.print(s1.toString());
        s1.delete(2,4);
        System.out.print(s1.toString());
    }</code></pre><p>结果：<code>bbbaaa</code>,<code>bbaa</code></p>
<h3 id="insert-方法"><a href="#insert-方法" class="headerlink" title="insert()方法"></a>insert()方法</h3><p>在指定索引位置之前插入字符串，例如：</p>
<pre><code>public static void main(String[] args)
    {
        StringBuffer s1 = new StringBuffer().append(&quot;bbb&quot;);
        s1.append(&quot;aaa&quot;);
        System.out.print(s1.toString());
        s1.insert(2,&quot;cc&quot;);
        System.out.print(s1.toString());
    }</code></pre><p>结果：<code>bbbaaa</code>,<code>bbccbaaa</code></p>
<h3 id="indexOf-方法"><a href="#indexOf-方法" class="headerlink" title="indexOf()方法"></a>indexOf()方法</h3><p>返回指定字符串的开始字符索引位置，还可以从某个字符索引位置开始向后匹配，没有找到匹配的就会返回-1,例如：</p>
<pre><code>public static void main(String[] args)
    {
        StringBuffer s1 = new StringBuffer().append(&quot;bbb&quot;);
        s1.append(&quot;aaa&quot;);
        System.out.print(s1.toString());
        System.out.print(s1.indexOf(&quot;ba&quot;));
        System.out.print(s1.indexOf(&quot;ba&quot;,2));
        System.out.print(s1.indexOf(&quot;mn&quot;));
    }</code></pre><p>结果：<code>bbbaaa</code>,<code>2</code>,<code>2</code>,<code>-1</code></p>
<h3 id="lastIndexOf-方法"><a href="#lastIndexOf-方法" class="headerlink" title="lastIndexOf()方法"></a>lastIndexOf()方法</h3><p>和indexOf()的用法一样，只不过是从后往前匹配，也支持从指定索引开始从后往前去匹配，例如：</p>
<pre><code> public static void main(String[] args)
    {
        StringBuffer s1 = new StringBuffer().append(&quot;bbb&quot;);
        s1.append(&quot;aaa&quot;);
        System.out.print(s1.toString());
        System.out.print(s1.lastIndexOf(&quot;b&quot;,5));
    }</code></pre><p>结果：<code>bbbaaa</code>,<code>2</code></p>
<h3 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse()方法"></a>reverse()方法</h3><p>反转字符串，例如：</p>
<pre><code>public static void main(String[] args)
    {
        StringBuffer s1 = new StringBuffer().append(&quot;bbb&quot;);
        s1.append(&quot;aaa&quot;);
        System.out.println(s1.toString());
        System.out.println(s1.reverse()); 
    }</code></pre><p>结果：<code>bbbaaa</code>,<code>aaabbb</code></p>
<h3 id="length-方法"><a href="#length-方法" class="headerlink" title="length()方法"></a>length()方法</h3><p>返回字符串的长度，例如：</p>
<pre><code>public static void main(String[] args)
{
    StringBuffer s1 = new StringBuffer().append(&quot;bbb&quot;);
    s1.append(&quot;aaa&quot;);
    System.out.println(s1.toString());
    System.out.println(s1.length());
}</code></pre><p>结果：<code>bbbaaa</code>,<code>6</code></p>
<h2 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h2><p>重头戏来了，前面的部分相信你即使没有在StringBuffer/StringBuilder中用过，也在别的类中用过，那么，这三个类型到底有什么区别呢？怎么选择它们的应用场景呢？</p>
<h3 id="首先，从性能、速度方面来说："><a href="#首先，从性能、速度方面来说：" class="headerlink" title="首先，从性能、速度方面来说："></a>首先，从性能、速度方面来说：</h3><pre><code>Stringbuilder-&gt;Stringbuffer-&gt;String</code></pre><p>String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，那速度是一定会相当慢的。<br>而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下， String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的。</p>
<h3 id="线程安全的区别"><a href="#线程安全的区别" class="headerlink" title="线程安全的区别"></a>线程安全的区别</h3><h4 id="在大部分情况下StringBuffer-gt-String"><a href="#在大部分情况下StringBuffer-gt-String" class="headerlink" title="在大部分情况下StringBuffer&gt;String"></a>在大部分情况下StringBuffer&gt;String</h4><p><strong>StringBuffer</strong><br>Java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。<br>可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。<br>StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；而 insert 方法则在指定的点添加字符。</p>
<blockquote>
<p>例如，如果 z 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 z.append(“le”) 会使字符串缓冲区包含“startle”，而 z.insert(4, “le”) 将更改字符串缓冲区，使之包含“starlet”。</p>
</blockquote>
<h4 id="在大部分情况下StringBuilder-gt-StringBuffer"><a href="#在大部分情况下StringBuilder-gt-StringBuffer" class="headerlink" title="在大部分情况下StringBuilder&gt;StringBuffer"></a>在大部分情况下StringBuilder&gt;StringBuffer</h4><p><strong>java.lang.StringBuilde</strong><br>java.lang.StringBuilder一个可变的字符序列是5.0新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同。</p>
<h2 id="三者使用的总结"><a href="#三者使用的总结" class="headerlink" title="三者使用的总结"></a>三者使用的总结</h2><p>StringBuilder与StringBuffer二者的区别主要是在运行速度和线程安全这两方面。</p>
<ol>
<li>StringBuffer与StringBuilder中的方法和功能完全是等价的</li>
<li>只是StringBuffer 中的方法大都采用了 synchronized 关键字进行修饰，因此是线程安全的，而StringBuilder没有这个修饰，可以被认为是线程不安全的</li>
<li>在单线程程序下，StringBuilder效率更快，因为它不需要加锁，不具备多线程安全而StringBuffer则每次都需要判断锁，效率相对更低。</li>
</ol>
<blockquote>
<p>如果要操作少量的数据用 = String<br>单线程操作字符串缓冲区 下操作大量数据 = StringBuilder<br>多线程操作字符串缓冲区 下操作大量数据 = StringBuffer</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>StringBuffer</tag>
        <tag>字符串</tag>
        <tag>StringBuiler</tag>
      </tags>
  </entry>
  <entry>
    <title>String类型详解</title>
    <url>/blog/2020/02/22/string-lei-xing-xiang-jie/</url>
    <content><![CDATA[<h1 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h1><p>字符串是常量；它们的值在创建之后不能改变。字符串缓冲区支持可变的字符串。因为 String 对象是不可变的，所以可以共享它们。例如： <code>String str=&quot;abc&quot;;</code>我们想把字符串中的c改成d发现是无法更改的，只能重新指定新字符串<code>str=&quot;abd&quot;;</code>这样效率不一定提高，但是字符串可以被编译器共享这样带来的效率就很高了。<br>有不服者说：字符串不是改变了吗？这是一种误解，字符串”abc”并未被改变。只是str变量不在指向这个对象，而是指向了另外一个字符串对象”bcd”了。对字符串的拼接实际上也是构造出一个新的字符串对象。操作符使用 连接符+；或者操作方法concat(otherStr)</p>
<h2 id="String类型的常用方法"><a href="#String类型的常用方法" class="headerlink" title="String类型的常用方法"></a>String类型的常用方法</h2><h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><p><strong>按字典顺序比较两个字符串</strong>。<br><code>int  compareTo(String anotherString)</code><br><strong>不考虑大小写，按字典顺序比较两个字符串。</strong><br><code>int  compareToIgnoreCase(String str)</code><br>它们的返回值类似，如果参数字符串等于此字符串，则返回值0;如果此字符串按字典顺序小于字符串参数，则返回一个小于0的值;如果此字符串按字典顺序大于字符串参数,则返回一个大于0的值。</p>
<h3 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h3><p>字符串的字符计数是从0(开始)到str.length()-1(结束);长度为str.length()<br><strong>从指定位置开始截取</strong><br><code>String  substring(int beginIndex)</code><br><strong>指定开始和结束的位置</strong><br><code>String  substring(int beginIndex, int endIndex)</code></p>
<h3 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h3><p><strong>替换所有出现的字符</strong><br><code>String  replace(char oldChar, char newChar)</code><br>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有oldChar 而生成的。<br><strong>替换所有出现的字符串</strong><br><code>String  replaceAll(String regex, String replacement)</code><br>使用给定的 replacement 字符串替换此字符串匹配给定的正则表达式的每个子字符串。<br><strong>替换第一次出现的字符串</strong><br><code>String  replaceFirst(String regex, String replacement)</code><br>使用给定的 replacement 字符串替换此字符串匹配给定的正则表达式的第一个子字符串。</p>
<h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><p><strong>返回指定位置的字符</strong><br><code>char  charAt(int index)</code><br>返回指定索引处的 char 值。<br><strong>当前字符串是否包含指定字符或字符串</strong><br><code>boolean  contains(CharSequence s)</code><br>当且仅当此字符串包含 char 值的指定序列时，才返回 true。<br><strong>已指定后缀结束</strong><br><code>boolean  endsWith(String suffix)</code><br>测试此字符串是否以指定的后缀结束。<br><strong>第一次出现的位置</strong><br><code>int  indexOf(int ch)</code><br><strong>指定位置后第一次出现的位置</strong><br>返回指定字符在此字符串中第一次出现处的索引。<br><code>int  indexOf(int ch, int fromIndex)</code><br>从指定的索引开始搜索，返回在此字符串中第一次出现指定字符处的索引。<br><strong>子串第一次出现的位置</strong><br><code>int  indexOf(String str)</code><br>返回第一次出现的指定子字符串在此字符串中的索引。<br><strong>子串在指定位置后出现的位置</strong><br><code>int  indexOf(String str, int fromIndex)</code><br>从指定的索引处开始，返回第一次出现的指定子字符串在此字符串中的索引。<br><strong>最后一次出现的位置</strong><br><code>int  lastIndexOf(int ch)</code><br>返回最后一次出现的指定字符在此字符串中的索引。<br><strong>指定位置后最后一次出现的位置</strong><br><code>int  lastIndexOf(int ch, int fromIndex)</code><br>从指定的索引处开始进行后向搜索，返回最后一次出现的指定字符在此字符串中的索引。<br><strong>子串最后一次出现的位置</strong><br><code>int  lastIndexOf(String str)</code><br>返回在此字符串中最右边出现的指定子字符串的索引。<br><strong>指定位置后子串最后一次出现的位置</strong><br><code>int  lastIndexOf(String str, int fromIndex)</code><br>从指定的索引处开始向后搜索，返回在此字符串中最后一次出现的指定子字符串的索引。<br><strong>字符串是否已指定前缀开始</strong><br><code>boolean  startsWith(String prefix)</code><br>测试此字符串是否以指定的前缀开始。<br><strong>指定的位置开始是否前缀开始</strong><br><code>boolean  startsWith(String prefix, int toffset)</code><br>测试此字符串是否以指定前缀开始，该前缀以指定索引开始</p>
<h3 id="字符串的分割"><a href="#字符串的分割" class="headerlink" title="字符串的分割"></a>字符串的分割</h3><p><strong>根据指定字符分割成字符数组</strong><br><code>String[]  split(String regex)</code><br>根据给定的正则表达式的匹配来拆分此字符串。 </p>
<h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h3><p><strong>将指定的字符串拼接到当前字符串</strong><br><code>String  concat(String str)</code><br>将指定字符串联到此字符串的结尾。</p>
<h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><p><strong>将字符数组转成字符串</strong><br><code>static String  copyValueOf(char[] data)</code><br>返回指定数组中表示该字符序列的字符串。<br><strong>字符数组指定偏移量长度转换字符串</strong><br><code>static String  copyValueOf(char[] data, int offset, int count)</code><br>返回指定数组中表示该字符序列的字符串。<br><strong>将字符串转成字符数组</strong><br><code>char[]  toCharArray()</code><br>将此字符串转换为一个新的字符数组。<br><strong>将字符转成小写</strong><br><code>String  toLowerCase()</code><br>使用默认语言环境的规则将此 String 中的所有字符都转换为小写。<br><strong>将字符串转成大写</strong><br><code>String  toUpperCase()</code><br>使用默认语言环境的规则将此 String 中的所有字符都转换为大写。<br><strong>去除空白</strong><br><code>String  trim()</code><br>返回字符串的副本，忽略前导空白和尾部空白。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>String</tag>
        <tag>常用方法</tag>
      </tags>
  </entry>
  <entry>
    <title>spring的概述</title>
    <url>/blog/2020/02/21/spring-gai-shu/</url>
    <content><![CDATA[<h1 id="Spring-概述"><a href="#Spring-概述" class="headerlink" title="Spring 概述"></a>Spring 概述</h1><h2 id="1-spring是什么"><a href="#1-spring是什么" class="headerlink" title="1.spring是什么"></a>1.spring是什么</h2><p>Spring 是分层的 Java SE/EE 应用 <code>full-stack</code> 轻量级开源框架，以 <code>IoC（Inverse Of Control：反转控制）</code>和 <code>AOP（Aspect Oriented Programming：面向切面编程）</code>为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。</p>
<h2 id="2-spring的发展历程"><a href="#2-spring的发展历程" class="headerlink" title="2.spring的发展历程"></a>2.spring的发展历程</h2><p>1997 年 IBM 提出了 EJB 的思想<br>1998 年，SUN 制定开发标准规范 EJB1.0<br>1999 年，EJB1.1 发布<br>2001 年，EJB2.0 发布<br>2003 年，EJB2.1 发布<br>2006 年，EJB3.0 发布<br><code>Rod Johnson（spring 之父）</code><br>Expert One-to-One J2EE Design and Development(2002)<br>阐述了 J2EE 使用 EJB 开发设计的优点及解决方案<br>Expert One-to-One J2EE Development without EJB(2004)<br>阐述了 J2EE 开发不使用 EJB 的解决方式（Spring 雏形）<br>2017 年 9 月份发布了 spring 的最新版本 spring 5.0 通用版（GA）</p>
<h2 id="3-spring的优势"><a href="#3-spring的优势" class="headerlink" title="3.spring的优势"></a>3.spring的优势</h2><h3 id="方便解耦，简化开发"><a href="#方便解耦，简化开发" class="headerlink" title="方便解耦，简化开发"></a>方便解耦，简化开发</h3><p>通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p>
<h3 id="AOP编程的支持"><a href="#AOP编程的支持" class="headerlink" title="AOP编程的支持"></a>AOP编程的支持</h3><p>通过 Spring 的 AOP 功能，方便进行面向切面的编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付。</p>
<h3 id="声明式事务的支持"><a href="#声明式事务的支持" class="headerlink" title="声明式事务的支持"></a>声明式事务的支持</h3><p>声明式事务的支持可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。</p>
<h3 id="方便程序的测试"><a href="#方便程序的测试" class="headerlink" title="方便程序的测试"></a>方便程序的测试</h3><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p>
<h3 id="方便集成各种优秀的框架"><a href="#方便集成各种优秀的框架" class="headerlink" title="方便集成各种优秀的框架"></a>方便集成各种优秀的框架</h3><p>Spring 可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的直接支持。</p>
<h3 id="降低JavaEEApi的使用难度"><a href="#降低JavaEEApi的使用难度" class="headerlink" title="降低JavaEEApi的使用难度"></a>降低JavaEEApi的使用难度</h3><p>Spring 对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。</p>
<h3 id="Java源码是经典的学习范例"><a href="#Java源码是经典的学习范例" class="headerlink" title="Java源码是经典的学习范例"></a>Java源码是经典的学习范例</h3><p>Spring 的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对 Java 设计模式灵活运用以及对 Java 技术的高深造诣。它的源代码无意是 Java 技术的最佳实践的范例。</p>
<h2 id="spring的体系结构"><a href="#spring的体系结构" class="headerlink" title="spring的体系结构"></a>spring的体系结构</h2><p><img src="http://qiniuyun.dajienihao.cn/image/0221/spring-overview.png" alt=""></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>框架</tag>
        <tag>spring的概述</tag>
      </tags>
  </entry>
  <entry>
    <title>spring对bean的管理细节</title>
    <url>/blog/2020/02/21/spring-zhong-chuang-jian-bean-de-san-chong-fang-shi/</url>
    <content><![CDATA[<h1 id="把对象的创建交给spring来管理"><a href="#把对象的创建交给spring来管理" class="headerlink" title="把对象的创建交给spring来管理"></a>把对象的创建交给spring来管理</h1><p>spring对bean的管理细节</p>
<ol>
<li>创建bean的三种方式</li>
<li>bean对象的作用范围</li>
<li>bean对象的生命周期</li>
</ol>
<h2 id="创建bean的三种方式"><a href="#创建bean的三种方式" class="headerlink" title="创建bean的三种方式"></a>创建bean的三种方式</h2><h3 id="1-使用默认的构造器创建"><a href="#1-使用默认的构造器创建" class="headerlink" title="1.使用默认的构造器创建"></a>1.使用默认的构造器创建</h3><p>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。<br> <code>&lt;bean id=&quot;accountService&quot; class=&quot;com.itheima.service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;</code></p>
<h3 id="2-使用普通工厂中的方法创建"><a href="#2-使用普通工厂中的方法创建" class="headerlink" title="2.使用普通工厂中的方法创建"></a>2.使用普通工厂中的方法创建</h3><p>使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）<br><code>&lt;bean id=&quot;instanceFactory&quot; class=&quot;com.itheima.factory.InstanceFactory&quot;&gt;&lt;/bean&gt;</code><br><code>&lt;bean id=&quot;accountService&quot; factory-bean=&quot;instanceFactory&quot; factory-method=&quot;getAccountService&quot;&gt;&lt;/bean&gt;</code></p>
<h3 id="3-使用工厂中的静态方法创建"><a href="#3-使用工厂中的静态方法创建" class="headerlink" title="3.使用工厂中的静态方法创建"></a>3.使用工厂中的静态方法创建</h3><p>使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)<br><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.itheima.factory.StaticFactory&quot; factory-method=&quot;getAccountService&quot;&gt;&lt;/bean&gt;</code></p>
<h2 id="bean的作用范围"><a href="#bean的作用范围" class="headerlink" title="bean的作用范围"></a>bean的作用范围</h2><p><strong>bean标签的scope属性</strong>：</p>
<ul>
<li>作用：用于指定bean的作用范围</li>
<li>取值： 常用的就是单例的和多例的</li>
</ul>
<pre><code>singleton：单例的（默认值）
prototype：多例的
request：作用于web应用的请求范围
session：作用于web应用的会话范围
global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</code></pre><p><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.itheima.service.impl.AccountServiceImpl&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</code></p>
<h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><p><strong>单例对象</strong></p>
<ul>
<li>出生：当容器创建时对象出生</li>
<li>活着：只要容器还在，对象一直活着</li>
<li>死亡：容器销毁，对象消亡</li>
<li>总结：单例对象的生命周期和容器相同</li>
</ul>
<p><strong>多例对象</strong></p>
<ul>
<li>出生：当我们使用对象时spring框架为我们创建</li>
<li>活着：对象只要是在使用过程中就一直活着。</li>
<li>死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收<br><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.itheima.service.impl.AccountServiceImpl&quot;
scope=&quot;prototype&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>框架</tag>
        <tag>spring的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要使用mybatis</title>
    <url>/blog/2020/02/15/shi-yong-mybatis-de-you-dian/</url>
    <content><![CDATA[<p>#为什么要使用mybatis</p>
<p><strong>Mybatis是一个半自动化持久层框架</strong></p>
<p><strong>JDBC</strong></p>
<ul>
<li>sql夹在java代码块中，耦合度高导致硬编码内伤</li>
<li>维护不易且实际开发需求中sql是有变化的，频繁修改情况多见</li>
</ul>
<p><strong>Hibernate和JPA</strong></p>
<ul>
<li>长难复杂Sql,对于Hibernate而言处理也不容易</li>
<li>内部自动声场的sql，不容易做特殊优化</li>
<li>基于全映射的全自动框架，大量字段的pojo进行部分映射困难，导致数据库性能下降</li>
</ul>
<p><strong>对于开发人员而言，核心SQL还是需要自己优化</strong></p>
<p><strong>sql和Java编码分开，功能边界清晰，一个专注业务、一个专注数据</strong></p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>mybatis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Data、String和sql.Timestamp之间的互相转换</title>
    <url>/blog/2020/01/22/java-zhong-data-string-he-sql.timestamp-zhi-jian-de-hu-xiang-zhuan-huan/</url>
    <content><![CDATA[<h1 id="JAVA中java-util-Date、java-sql-Timestamp和String之间的互相转换"><a href="#JAVA中java-util-Date、java-sql-Timestamp和String之间的互相转换" class="headerlink" title="JAVA中java.util.Date、java.sql.Timestamp和String之间的互相转换"></a>JAVA中java.util.Date、java.sql.Timestamp和String之间的互相转换</h1><h2 id="java-util-Date与的String互转"><a href="#java-util-Date与的String互转" class="headerlink" title="java.util.Date与的String互转"></a>java.util.Date与的String互转</h2><h3 id="java-util-Date—-gt-String"><a href="#java-util-Date—-gt-String" class="headerlink" title="java.util.Date—-&gt;String"></a>java.util.Date—-&gt;String</h3><pre><code>/**
 * 将java.util.Date对象转化为String字符串
 * @param date
 *            要格式的java.util.Date对象
 * @param strFormat
 *            输出的String字符串格式的限定（如：&quot;yyyy-MM-dd HH:mm:ss&quot;）
 * @return 表示日期的字符串
 */
public static String dateToStr(java.util.Date date, String strFormat) {
    SimpleDateFormat sf = new SimpleDateFormat(strFormat);
    String str = sf.format(date);
    return str;
}</code></pre><h3 id="String—-gt-java-util-Date"><a href="#String—-gt-java-util-Date" class="headerlink" title="String—-&gt;java.util.Date"></a>String—-&gt;java.util.Date</h3><pre><code>/**
 * 将String字符串转换为java.util.Date格式日期
 * @param strDate
 *            表示日期的字符串
 * @param dateFormat
 *            传入字符串的日期表示格式（如：&quot;yyyy-MM-dd HH:mm:ss&quot;）
 * @return java.util.Date类型日期对象（如果转换失败则返回null）
 */
public static java.util.Date strToUtilDate(String strDate, String dateFormat) {
    SimpleDateFormat sf = new SimpleDateFormat(dateFormat);
    java.util.Date date = null;
    try {
        date = sf.parse(strDate);
    } catch (ParseException e) {
        e.printStackTrace();
    }
    return date;
}</code></pre><h2 id="java-sql-Timestamp与的String互转"><a href="#java-sql-Timestamp与的String互转" class="headerlink" title="java.sql.Timestamp与的String互转"></a>java.sql.Timestamp与的String互转</h2><h3 id="java-sql-Timestamp—-gt-String"><a href="#java-sql-Timestamp—-gt-String" class="headerlink" title="java.sql.Timestamp—-&gt;String"></a>java.sql.Timestamp—-&gt;String</h3><pre><code>/**
 * 将java.sql.Timestamp对象转化为String字符串
 * @param time
 *            要格式的java.sql.Timestamp对象
 * @param strFormat
 *            输出的String字符串格式的限定（如：&quot;yyyy-MM-dd HH:mm:ss&quot;）
 * @return 表示日期的字符串
 */
public static String dateToStr(java.sql.Timestamp time, String strFormat) {
    DateFormat df = new SimpleDateFormat(strFormat);
    String str = df.format(time);
    return str;
}</code></pre><h3 id="String—-gt-java-sql-Timestamp"><a href="#String—-gt-java-sql-Timestamp" class="headerlink" title="String—-&gt;java.sql.Timestamp"></a>String—-&gt;java.sql.Timestamp</h3><pre><code>/**
 * 将String字符串转换为java.sql.Timestamp格式日期,用于数据库保存
 * @param strDate
 *            表示日期的字符串
 * @param dateFormat
 *            传入字符串的日期表示格式（如：&quot;yyyy-MM-dd HH:mm:ss&quot;）
 * @return java.sql.Timestamp类型日期对象（如果转换失败则返回null）
 */
public static java.sql.Timestamp strToSqlDate(String strDate, String dateFormat) {
    SimpleDateFormat sf = new SimpleDateFormat(dateFormat);
    java.util.Date date = null;
    try {
            date = sf.parse(strDate);
    } catch (ParseException e) {
            e.printStackTrace();
    }
    java.sql.Timestamp dateSQL = new java.sql.Timestamp(date.getTime());
    return dateSQL;
}</code></pre><h2 id="java-util-Date与的java-sql-Timestamp互转"><a href="#java-util-Date与的java-sql-Timestamp互转" class="headerlink" title="java.util.Date与的java.sql.Timestamp互转"></a>java.util.Date与的java.sql.Timestamp互转</h2><h3 id="java-util-Date—-gt-java-sql-Timestamp（用String做中间变量，此方法依赖于上面的方法）"><a href="#java-util-Date—-gt-java-sql-Timestamp（用String做中间变量，此方法依赖于上面的方法）" class="headerlink" title="java.util.Date—-&gt;java.sql.Timestamp（用String做中间变量，此方法依赖于上面的方法）"></a>java.util.Date—-&gt;java.sql.Timestamp（用String做中间变量，此方法依赖于上面的方法）</h3><pre><code>/**
 * 将java.util.Date对象转化为java.sql.Timestamp对象
 *
 * @param date
 *            要转化的java.util.Date对象
 * @return 转化后的java.sql.Timestamp对象
 */
public static java.sql.Timestamp dateToTime(java.util.Date date) {
    String strDate = dateToStr(date, &quot;yyyy-MM-dd HH:mm:ss SSS&quot;);
    return strToSqlDate(strDate, &quot;yyyy-MM-dd HH:mm:ss SSS&quot;);
}</code></pre><h3 id="java-sql-Timestamp—-gt-java-util-Date（二者是父子关系，可以直接赋值，自动转换）"><a href="#java-sql-Timestamp—-gt-java-util-Date（二者是父子关系，可以直接赋值，自动转换）" class="headerlink" title="java.sql.Timestamp—-&gt;java.util.Date（二者是父子关系，可以直接赋值，自动转换）"></a>java.sql.Timestamp—-&gt;java.util.Date（二者是父子关系，可以直接赋值，自动转换）</h3><pre><code>/**
 * 将java.sql.Timestamp对象转化为java.util.Date对象
 * 
 * @param time
 *            要转化的java.sql.Timestamp对象
 * @return 转化后的java.util.Date对象
 */
public static java.util.Date timeToDate(java.sql.Timestamp time) {
    return time;
}</code></pre><h2 id="完整的类在这"><a href="#完整的类在这" class="headerlink" title="完整的类在这"></a>完整的类在这</h2><pre><code>import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

/**
 * 关于java.util.Date、java.sql.Timestamp和String之间的互相转换的方法
 * @Description: TODO
 * @CreateTime: 2017年10月25日 下午3:20:44
 * @version V1.0
 */
public class DateUtil {

    /**
     * 将String字符串转换为java.util.Date格式日期
     * 
     * @param strDate
     *            表示日期的字符串
     * @param dateFormat
     *            传入字符串的日期表示格式（如：&quot;yyyy-MM-dd HH:mm:ss&quot;）
     * @return java.util.Date类型日期对象（如果转换失败则返回null）
     */
    public static java.util.Date strToUtilDate(String strDate, String dateFormat) {
        SimpleDateFormat sf = new SimpleDateFormat(dateFormat);
        java.util.Date date = null;
        try {
            date = sf.parse(strDate);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return date;
    }

    /**
     * 将String字符串转换为java.sql.Timestamp格式日期,用于数据库保存
     * 
     * @param strDate
     *            表示日期的字符串
     * @param dateFormat
     *            传入字符串的日期表示格式（如：&quot;yyyy-MM-dd HH:mm:ss&quot;）
     * @return java.sql.Timestamp类型日期对象（如果转换失败则返回null）
     */
    public static java.sql.Timestamp strToSqlDate(String strDate, String dateFormat) {
        SimpleDateFormat sf = new SimpleDateFormat(dateFormat);
        java.util.Date date = null;
        try {
            date = sf.parse(strDate);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        java.sql.Timestamp dateSQL = new java.sql.Timestamp(date.getTime());
        return dateSQL;
    }

    /**
     * 将java.util.Date对象转化为String字符串
     * 
     * @param date
     *            要格式的java.util.Date对象
     * @param strFormat
     *            输出的String字符串格式的限定（如：&quot;yyyy-MM-dd HH:mm:ss&quot;）
     * @return 表示日期的字符串
     */
    public static String dateToStr(java.util.Date date, String strFormat) {
        SimpleDateFormat sf = new SimpleDateFormat(strFormat);
        String str = sf.format(date);
        return str;
    }

    /**
     * 将java.sql.Timestamp对象转化为String字符串
     * 
     * @param time
     *            要格式的java.sql.Timestamp对象
     * @param strFormat
     *            输出的String字符串格式的限定（如：&quot;yyyy-MM-dd HH:mm:ss&quot;）
     * @return 表示日期的字符串
     */
    public static String dateToStr(java.sql.Timestamp time, String strFormat) {
        DateFormat df = new SimpleDateFormat(strFormat);
        String str = df.format(time);
        return str;
    }

    /**
     * 将java.sql.Timestamp对象转化为java.util.Date对象
     * 
     * @param time
     *            要转化的java.sql.Timestamp对象
     * @return 转化后的java.util.Date对象
     */
    public static java.util.Date timeToDate(java.sql.Timestamp time) {
        return time;
    }

    /**
     * 将java.util.Date对象转化为java.sql.Timestamp对象
     * 
     * @param date
     *            要转化的java.util.Date对象
     * @return 转化后的java.sql.Timestamp对象
     */
    public static java.sql.Timestamp dateToTime(java.util.Date date) {
        String strDate = dateToStr(date, &quot;yyyy-MM-dd HH:mm:ss SSS&quot;);
        return strToSqlDate(strDate, &quot;yyyy-MM-dd HH:mm:ss SSS&quot;);
    }

    /**
     * 返回表示系统当前时间的java.util.Date对象
     * @return  返回表示系统当前时间的java.util.Date对象
     */
    public static java.util.Date nowDate(){
        return new java.util.Date();
    }

    /**
     * 返回表示系统当前时间的java.sql.Timestamp对象
     * @return  返回表示系统当前时间的java.sql.Timestamp对象
     */
    public static java.sql.Timestamp nowTime(){
        return dateToTime(new java.util.Date());
    }
}</code></pre>]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>Date、String和sql.Timestamp转换</tag>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven学习笔记</title>
    <url>/blog/2020/01/18/maven-xue-xi-bi-ji/</url>
    <content><![CDATA[<h2 id="1、目前掌握的技术"><a href="#1、目前掌握的技术" class="headerlink" title="1、目前掌握的技术"></a>1、目前掌握的技术</h2><p><img src="https://img-blog.csdn.net/20170727170011085?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="2、目前的技术在开发中存在的问题-why"><a href="#2、目前的技术在开发中存在的问题-why" class="headerlink" title="2、目前的技术在开发中存在的问题[why]"></a>2、目前的技术在开发中存在的问题[why]</h2><ol>
<li>一个项目就是一个工程如果项目非常庞大，就不适合继续使用package来划分模块。最好是每一个模块对应一个项目，利于分工协作。借助于maven就可以将一个项目拆分成多个工程。</li>
<li>项目中需要的jar包必须手动“复制”、”粘贴” 到WEB-INF/lib 项目下带来的问题：同样的jar包文件重复出现在不同的项目工程中，一方面浪费存储空间，另外也让工程比较臃肿。借助Maven，可以将jar包仅仅保存在“仓库”中，有需要使用的工程“引用”这个文件，并不需要重复复制。</li>
<li>jar包需要别人替我们准备好，或到官网下载所有知名框架或第三方工具jar包已经按照统一规范放在了Maven的中央仓库中。</li>
<li>个jar包依赖的其他jar包需要自己手动加到项目中<br>Maven会自动将被依赖的jar包导入进来。</li>
</ol>
<h2 id="3、Maven是什么-what"><a href="#3、Maven是什么-what" class="headerlink" title="3、Maven是什么[what]"></a>3、Maven是什么[what]</h2><ol>
<li>Maven 是 Apache 软件基金会组织维护的一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理 。Maven 这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]。构建工具的发展：Make→Ant→Maven→Gradle</li>
<li>构建：就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、jsp页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。<br>eclipse中的项目与tomcat中编译结果对比：<br><img src="https://img-blog.csdn.net/20170728201331986?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>构建过程中的几个主要环节<br>①清理：删除以前的编译结果，为重新编译做好准备。<br>②编译：将Java源程序编译为字节码文件。<br>③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>④报告：将每一次测试后以标准的格式记录和展示测试结果。<br>⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对象war包。<br>⑥安装：在Maven环境下特指将打包的结果——Jar包或War包安装到本地仓库中。<br>⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。</li>
<li>自动化构建<br>程序员一天的工作：<br><img src="https://img-blog.csdn.net/20170728203846138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>能否将这些程式化的工作交给机器自动完成呢？——当然可以！这就是自动化构建。<br><img src="https://img-blog.csdn.net/20170728203927253?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>此时 Maven 的意义就体现出来了，它可以自动的从构建过程的起点一直执行到终点：<br><img src="https://img-blog.csdn.net/20170728203953999?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
</ol>
<h2 id="4、安装Maven核心程序"><a href="#4、安装Maven核心程序" class="headerlink" title="4、安装Maven核心程序"></a>4、安装Maven核心程序</h2><ol>
<li>检查JAVA_HOME环境变量<blockquote>
<p>cmd输入echo %JAVA_HOME%<br>C:\Program Files\Java\jdk1.8.0_181</p>
</blockquote>
</li>
<li>解压Maven核心程序的压缩包，放在一个<strong>非中文、无空格</strong>的路径下<blockquote>
<p>D:\apache-maven-3.6.3</p>
</blockquote>
</li>
<li>配置Maven相关的环境变量<br>①MAVEN_HOME 或 M2_HOME<br><img src="https://img-blog.csdn.net/20170728211509244?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>②path<br><img src="https://img-blog.csdn.net/20170728211603564?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>验证：运行 mvn -v 命令查看Maven版本<blockquote>
<p>C:\Users\Lenovo&gt;mvn -v<br>Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)<br>Maven home: D:\apache-maven-3.6.3\bin..<br>Java version: 1.8.0_181, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_181\jre<br>Default locale: zh_CN, platform encoding: GBK<br>OS name: “windows 10”, version: “10.0”, arch: “amd64”, family: “windows”</p>
</blockquote>
</li>
</ol>
<h2 id="5、Maven的核心概念"><a href="#5、Maven的核心概念" class="headerlink" title="5、Maven的核心概念"></a>5、Maven的核心概念</h2><ol>
<li>约定的目录结构</li>
<li>POM</li>
<li>坐标</li>
<li>依赖</li>
<li>仓库</li>
<li>生命周期/插件/目标</li>
<li>继承</li>
<li>聚合</li>
</ol>
<h2 id="6、第一个Maven工程"><a href="#6、第一个Maven工程" class="headerlink" title="6、第一个Maven工程"></a>6、第一个Maven工程</h2><ol>
<li>创建约定的目录结构<br><img src="https://img-blog.csdn.net/20170728213202634?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>pom.xml文件为Maven工程的核心配置文件</li>
<li>为什么要遵循约定的目录结构呢？<br>我们在开发中如果需要让第三方工具或框架知道我们自己创建的资源在哪，那么基本上就是两种方式：<br>①以配置文件的方式明确告诉框架 如 &lt; param-value&gt;classpath:spring-context.xml &lt; /param-value&gt;<br>②遵循框架内部已经存在的约定 如log4j的配置文件名规定必须为 log4j.properties 或 log4j.xml ；Maven 使用约定的目录结构</li>
</ol>
<h2 id="7、Maven常用命令"><a href="#7、Maven常用命令" class="headerlink" title="7、Maven常用命令"></a>7、Maven常用命令</h2><ol>
<li>注意：执行与构建过程相关的Maven命令，必须进入pom.xml 所在的目录。</li>
<li>常用命令<br>【1】mvn clean : 清理<br>【2】mvn compile : 编译主程序<br>【3】mvn test-compile : 编译测试程序<br>【4】mvn test : 执行测试<br>【5】mvn package : 打包<br>【6】mvn install ： 安装<br>【7】mvn site ：生成站点</li>
</ol>
<h2 id="8、关于联网问题"><a href="#8、关于联网问题" class="headerlink" title="8、关于联网问题"></a>8、关于联网问题</h2><ol>
<li>Maven 的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须有特定的插件来完成。而插件本身不包含在Maven核心程序中。</li>
<li>当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。</li>
<li>本地仓库的默认位置：[系统登陆用户的家目录] \ .m2\repository</li>
<li>Maven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。</li>
<li>如果此时无法连接外网，则构建失败。</li>
<li>修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件<br>①找到Maven解压目录\conf\settings.xml<br>②在setting.xml 文件中找到 localRepository 标签<br>③将 &lt; localRepository&gt;/path/to/local/repo&lt; /localRepository&gt;从注释中取<br>出<br>④将标签体内容修改为自定义的Maven仓库目录</li>
</ol>
<h2 id="9、POM"><a href="#9、POM" class="headerlink" title="9、POM"></a>9、POM</h2><ol>
<li>含义：Project Object Model 项目对象模型<br>DOM ：Document Object Model 文档对象模型</li>
<li>pom.xml 对于 Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。<br>重要程度相当于web.xml 对于动态web工程</li>
</ol>
<h2 id="10、坐标"><a href="#10、坐标" class="headerlink" title="10、坐标"></a>10、坐标</h2><ol>
<li><p>数学中的坐标：<br>①在平面中，使用X,Y坐标可以唯一的定位平面中任何一个点。<br>②在空间中，使用X,Y，Z三个向量可以唯一的定位空间中的任何一个点。</p>
</li>
<li><p>Maven的坐标：<br>使用下面三个向量在仓库中唯一定位一个Maven工程<br>①groupid:公司或组织域名倒序+项目名</p>
<pre><code> &lt; groupid&gt;com.atguigu.maven&lt; /groupid&gt;</code></pre><p>②artifactid:模块名</p>
<pre><code> &lt; artifactid&gt;Hello&lt; /artifactid&gt;  </code></pre><p>③version：版本  </p>
<pre><code> &lt; version&gt;1.0.0&lt; /version&gt;</code></pre></li>
<li><p>Maven 工程的坐标与仓库中路径的对应关系，以spring为例</p>
<pre><code> &lt; groupId&gt;org.springframework&lt; /groupId&gt;
 &lt; artifactId&gt;spring-core&lt; /artifactId&gt;
 &lt; version&gt;4.0.0.RELEASE&lt; /version&gt;
 org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar</code></pre></li>
</ol>
<p>注意：我们自己的 Maven 工程必须执行安装操作才会进入仓库。安装的命令是：mvn install</p>
<h2 id="11、仓库"><a href="#11、仓库" class="headerlink" title="11、仓库"></a>11、仓库</h2><ol>
<li>仓库的分类<br>①本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务<br>②远程仓库<br>（1）私服：搭建在局域网环境中，为局域网范围内的所有Maven工程服务<br><img src="https://img-blog.csdn.net/20170729222712252?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>（2）中央仓库：假设在Internet上，为全世界所有Maven工程服务<br>（3）中央仓库镜像：为了分担中央仓库流量，提升用户访问速度</li>
<li>仓库中保存的内容：Maven工程<br>①Maven自身所需要的插件<br>②第三方框架或工具的jar包<br>③我们自己开发的Maven工程<br>不管是什么样的 jar 包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。</li>
</ol>
<h2 id="12、依赖"><a href="#12、依赖" class="headerlink" title="12、依赖"></a>12、依赖</h2><ol>
<li>当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖，这是概念上的描述。Maven解析依赖信息时会到仓库中查找被依赖的jar包。<br>对于我们自己开发的Maven工程，要使用mvn install 命令安装后就可以进入仓库。<br><img src="https://img-blog.csdn.net/20170730165534132?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>依赖的范围<br>①从项目结构角度理解compile和test的区别<br><img src="https://img-blog.csdn.net/20170730165755167?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>compile范围依赖<br>》对主程序是否有效：有效<br>》对测试程序是否有效：有效<br>》是否参与打包：参与<br>》是否参与部署：参与<br>》典型例子：spring-core<br>test范围依赖<br>》对主程序是否有效：无效<br>》对测试程序是否有效：有效<br>》是否参与打包：不参与<br>》是否参与部署：不参与<br>》典型例子：Junit<br>②从开发和运行这两个阶段理解compile 和 provided 的区别<br><img src="https://img-blog.csdn.net/20170730170327848?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>》对主程序是否有效：有效<br>》对测试程序是否有效：有效<br>》是否参与打包：不参与<br>》是否参与部署：不参与<br>》典型例子：Servlet-api.jar<br>③有效性总结<br><img src="https://img-blog.csdn.net/20170730170652211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>依赖的传递性<br>A依赖B，B依赖C，A能否使用C呢？要看B依赖C的范围是不是compile<br><img src="https://img-blog.csdn.net/20170730171006616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>依赖的排除<br>如果我们当前工程中引入了一个依赖是A，而A又依赖了B，那么Maven会自动将A依赖的B引入当前工程，但是个别情况下B有可能是一个不稳定版本，或对当前工程有不良影响。这时我们可以在引入A的时候将B排除。<br>①情景举例<br><img src="https://img-blog.csdn.net/20170730172241301?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>②配置方式<pre><code> &lt;dependency&gt;
 &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;
 &lt;artifactId&gt;HelloFriend&lt;/artifactId&gt;
 &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
 &lt;type&gt;jar&lt;/type&gt;
 &lt;scope&gt;compile&lt;/scope&gt;
 &lt;exclusions&gt;
     &lt; exclusion&gt;
         &lt;groupId&gt;commons-logging&lt;/groupId&gt;
         &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;
     &lt;/ exclusion&gt; 
 &lt;/exclusions&gt;
 &lt;/dependency&gt;</code></pre>③排除后的效果<br><img src="https://img-blog.csdn.net/20170730172540566?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>统一管理所依赖 .jar 包的版本<br>对同一个框架的一组jar包最好使用相同的版本。为了方便升级架构，可以将jar包的版本信息统一提取出来<br>①统一声明版本号<br><img src="https://img-blog.csdn.net/20170730173201613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>其中 atguigu.spring.version 部分是自定义标签。<br>②引用前面声明的版本号<br><img src="https://img-blog.csdn.net/20170730173318435?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br><img src="" alt=""><br>③其他用法<br><img src="https://img-blog.csdn.net/20170730173423688?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>依赖的原则，解决jar包冲突<br>①路径最短者优先<br><img src="https://img-blog.csdn.net/20170810171428094?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>②路径相同时先声明者优先<br><img src="https://img-blog.csdn.net/20170810171449146?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
</ol>
<h2 id="13、生命周期"><a href="#13、生命周期" class="headerlink" title="13、生命周期"></a>13、生命周期</h2><ol>
<li>各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序来执行。</li>
<li>Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。</li>
<li>Maven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中各个阶段：不论现在要执行生命周期中的哪一阶段，都是从这个生命周期最初的位置开始执行。</li>
<li>Maven有三套相互独立的生命周期，分别是：<br>①Clean Lifecycle 在进行真正的构建之前进行一些清理工作。<br>②Default Lifecycle 构建的核心部分，编译、测试、打包、安装、部署等等。<br>③Site Lifecycle 生成项目报告，站点，发布站点。</li>
<li>他们相互独立。也可以直接运行 mvn clean install site 运行所有这三套生命周期。</li>
<li>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行 mvn clean，这个 clean 是 Clean 生命周期的一个阶段。有 Clean 生命周期，也有 clean 阶段。</li>
<li>Clean声明周期<br>①pre-clean 执行一些需要在clean之前完成的工作<br>②clean 移除所有上一次构建生成的文件<br>③post-clean 执行一些需要在clean 之后立刻完成的工作</li>
<li>Default声明周期<br>Default 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：<br>validate<br>generate-sources<br>process-sources<br>generate-resources<br>process-resources 复制并处理资源文件，至目标目录，准备打包。<br>compile 编译项目的源代码。<br>process-classes<br>generate-test-sources<br>process-test-sources<br>generate-test-resources<br>process-test-resources 复制并处理资源文件，至目标测试目录。<br>test-compile 编译测试源代码。<br>process-test-classes<br>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。<br>prepare-package<br>package 接受编译好的代码，打包成可发布的格式，如 JAR。<br>pre-integration-test<br>integration-test<br>post-integration-test<br>verify<br>install 将包安装至本地仓库，以让其它项目依赖。<br>deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享或部署到服务器上运行。</li>
<li>Site生命周期<br>①pre-site 执行一些需要在生成站点文档之前完成的工作<br>②site 生成项目的站点文档<br>③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备<br>④site-deploy 将生成的站点文档部署到特定的服务器上<br>这里经常用到的是 site 阶段和 site-deploy 阶段，用以生成和发布 Maven 站点，这可是 Maven 相当强大的功能，Manager 比较喜欢，文档及统计数据自动生成，很好看。</li>
<li>插件和目标<br>Maven的核心仅仅定义了抽象的声明周期，具体的任务都是交由插件完成的。<br>每个插件都实现多个功能，每个功能就是一个插件目标<br>Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。<br>可以将目标看做“调用插件功能的命令”<br>例如：compile 就是插件 maven-compiler-plugin 的一个目标；pre-clean 是插件 maven-clean-plugin 的一个目标。</li>
</ol>
<h2 id="14、在Eclipse中使用Maven"><a href="#14、在Eclipse中使用Maven" class="headerlink" title="14、在Eclipse中使用Maven"></a>14、在Eclipse中使用Maven</h2><ol>
<li>Maven插件Eclipse已经内置。</li>
<li>Maven插件的设置： Window-&gt;Preferences-&gt;Maven<br>①installations : 指定Maven核心程序的位置。默认是插件自带的Maven程序，改为我们自己解压的那个。<br>②user settings : 指定Maven核心程序中 conf/settings.xml 文件的位置，进而获取本地仓库的位置。</li>
<li>基本操作<br>①创建Maven版的Java工程<br>创建时勾选上 Create a simple project(skip archetype selection)<br><img src="https://img-blog.csdn.net/20170810142943257?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>创建的Maven工程默认使用的是JDK1.5，打开Maven核心程序settings.xml文件，找到profiles标签，加入如下配置，即可更改 <pre><code> &lt;profile&gt;
     &lt;id&gt;jdk-1.7&lt;/id&gt;
     &lt;activation&gt;
         &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
         &lt;jdk&gt;1.7&lt;/jdk&gt;
     &lt;/activation&gt;
     &lt;properties&gt;
         &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;
         &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;
         &lt;maven.compiler.compilerVersion&gt;1.7&lt;/maven.compiler.compilerVersion&gt;
     &lt;/properties&gt;
 &lt;/profile&gt;</code></pre>②创建Maven版的Web工程<br>1、New Maven project时，Packaging 选择 war<br><img src="https://img-blog.csdn.net/20170810145801982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>2、调整web目录结构，在项目上点右键 -&gt; properties-&gt;Project Facets -&gt; 把Dynamic Web Module 勾选去掉，并Apply -&gt; 将Dynamic Web Module 重新勾选 -&gt; 点击Further configuration available -&gt; 修改 Content directory为src/main/webapp -&gt; Apply 即在Maven工程上生成动态Web目录结构<br>3、新建jsp文件发现报错：The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path<br>因为缺少Tomcat 运行时环境<br>以Maven方式添加：<br>在pom.xml文件中添加<br><img src="https://img-blog.csdn.net/20170810152056630?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>4、jsp写入EL表达式时发现报错：javax.servlet.jsp cannot be resolved to a type<br>将JSPAPI导入<br>在pom.xml文件中添加<br><img src="https://img-blog.csdn.net/20170810153716289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>注意：scope一定要是provided，不然jar包冲突，运行时会报空指针异常<br>③执行Maven命令<br>选中pom.xml 右键 Run As-&gt;Maven build…-&gt;Goals-&gt;输入 compile -&gt;点击 run</li>
</ol>
<h2 id="15、继承"><a href="#15、继承" class="headerlink" title="15、继承"></a>15、继承</h2><ol>
<li>现状<br>Hello依赖的Junit：4.0<br>HelloFriend依赖的Junit：4.0<br>MakeFriends依赖的Junit：4.9<br>由于test范围的依赖不能传递，所以必然会分散在各个模块工程中，很容易造成版本不一致。</li>
<li>需求：统一管理各个模块工程中对Junit依赖的版本。</li>
<li>解决思路：将Junit依赖统一提取到“父”工程中，在子工程中声明Junit依赖是不指定版本，以父工程中统一设定的为准。同时也便于修改。</li>
<li>操作步骤：<br>①创建一个Maven工程作为父工程。注意：打包方式为pom<br><img src="https://img-blog.csdn.net/20170810175950040?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>②在子工程中声明对父工程的引用<br><img src="https://img-blog.csdn.net/20170810180137704?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>③将子工程的坐标中与父工程坐标中重复的内容删除<br><img src="https://img-blog.csdn.net/20170810180306736?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>④在父工程中统一管理Junit的依赖<br><img src="https://img-blog.csdn.net/20170810180410293?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>⑤在子工程中删除Junit依赖的版本号部分<br><img src="https://img-blog.csdn.net/20170810180504760?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>注意：配置集成后，执行安装命令时要先安装父工程。</li>
</ol>
<h2 id="16、聚合"><a href="#16、聚合" class="headerlink" title="16、聚合"></a>16、聚合</h2><ol>
<li>作用：一键安装各个模块工程。</li>
<li>配置方式：在一个“总的聚合工程”中配置各个参与聚合的模块<br><img src="https://img-blog.csdn.net/20170810191758989?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenhtMTMwNjE5Mjk4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>使用方式：在聚合工程的pom.xml 上点右键-&gt;run as-&gt;maven install</li>
</ol>
<h2 id="17、Maven-Web工程的自动部署"><a href="#17、Maven-Web工程的自动部署" class="headerlink" title="17、Maven_Web工程的自动部署"></a>17、Maven_Web工程的自动部署</h2><p>在pom.xml 中添加如下配置：</p>
<pre><code>          &lt;!--配置当前工程构建过程中的特殊设置   --&gt;
          &lt;build&gt;
            &lt;finalName&gt;AtguiguWeb&lt;/finalName&gt;
            &lt;!-- 配置构建过程中需要使用的插件 --&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;!-- cargo是一家专门从事启动Servlet容器的组织 --&gt;
                    &lt;groupId&gt;org.codehaus.cargo&lt;/groupId&gt;
                    &lt;artifactId&gt;cargo-maven2-plugin&lt;/artifactId&gt;
                    &lt;version&gt;1.2.3&lt;/version&gt;
                    &lt;!-- 针对插件进行的配置 --&gt;
                    &lt;configuration&gt;
                        &lt;!-- 配置当前系统中容器的位置 --&gt;
                        &lt;container&gt;
                            &lt;containerId&gt;tomcat6x&lt;/containerId&gt;
                            &lt;home&gt;D:\DevInstall\apache-tomcat-6.0.39&lt;/home&gt;
                        &lt;/container&gt;
                        &lt;configuration&gt;
                            &lt;type&gt;existing&lt;/type&gt;
                            &lt;home&gt;D:\DevInstall\apache-tomcat-6.0.39&lt;/home&gt;
                            &lt;!-- 如果Tomcat端口为默认值8080则不必设置该属性 --&gt;
                            &lt;properties&gt;
                                &lt;cargo.servlet.port&gt;8989&lt;/cargo.servlet.port&gt;
                            &lt;/properties&gt;
                        &lt;/configuration&gt;
                    &lt;/configuration&gt;
                    &lt;!-- 配置插件在什么情况下执行 --&gt;
                    &lt;executions&gt;  
                        &lt;execution&gt;  
                            &lt;id&gt;cargo-run&lt;/id&gt;
                            &lt;!-- 生命周期的阶段 --&gt;  
                            &lt;phase&gt;install&lt;/phase&gt;  
                            &lt;goals&gt;
                                &lt;!-- 插件的目标 --&gt;  
                                &lt;goal&gt;run&lt;/goal&gt;  
                            &lt;/goals&gt;  
                        &lt;/execution&gt;  
                    &lt;/executions&gt;
                &lt;/plugin&gt;
             &lt;/plugins&gt;
            &lt;/build&gt;</code></pre><p>执行mvn deploy 命令</p>
<h2 id="18、Maven-酷站"><a href="#18、Maven-酷站" class="headerlink" title="18、Maven 酷站"></a>18、Maven 酷站</h2><p>我们可以到 <a href="http://mvnrepository.com/搜索需要的" target="_blank" rel="noopener">http://mvnrepository.com/搜索需要的</a> jar 包的依赖信息。</p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>项目整合</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>请求转发和重定向的区别</title>
    <url>/blog/2020/01/16/qing-qiu-zhuan-fa-he-chong-ding-xiang-de-qu-bie/</url>
    <content><![CDATA[<h1 id="请求转发和重定向的区别"><a href="#请求转发和重定向的区别" class="headerlink" title="请求转发和重定向的区别"></a>请求转发和重定向的区别</h1><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="现实生活的例子"><a href="#现实生活的例子" class="headerlink" title="现实生活的例子"></a>现实生活的例子</h3><p><img src="http://qiniuyun.dajienihao.cn/image/0116/%E9%87%8D%E5%AE%9A%E5%90%91.png" alt=""><br>①：A对B说，帮忙拿下快递</p>
<p>②：B对A说，没有空，你找下C吧</p>
<p>③：A对C说，帮忙拿下快递</p>
<p>④：C然后拿了快递给A</p>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="http://qiniuyun.dajienihao.cn/image/0116/20180527154555552.png" alt=""></p>
<pre><code>//重定向写法： 重新定位方向 参数即跳转的位置
response.sendRedirect(&quot;login_success.html&quot;);</code></pre><ol>
<li><p>地址上显示的是最后的那个资源的路径地址</p>
</li>
<li><p>请求次数最少有两次， 服务器在第一次请求后，会返回302 以及一个地址， 浏览器在根据这个地址，执行第二次访问。</p>
</li>
<li><p>可以跳转到任意路径。 不是自己的工程也可以跳。</p>
</li>
<li><p>效率稍微低一点， 执行两次请求。 </p>
</li>
<li><p>后续的请求，没法使用上一次的request存储的数据，或者 没法使用上一次的request对象，因为这是两次不同的请求。</p>
</li>
<li><p>重定向访问的可能是外部资源 需要加项目路径${pageContext.request.contextPath}</p>
</li>
</ol>
<h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><h3 id="现实生活的例子-1"><a href="#现实生活的例子-1" class="headerlink" title="现实生活的例子"></a>现实生活的例子</h3><p><img src="http://qiniuyun.dajienihao.cn/image/0116/%E8%BD%AC%E5%8F%91.png" alt=""><br>①：A对B说，帮忙拿下快递</p>
<p>②：第二步，B没有空，直接找让C帮A拿下快递</p>
<p>③：C拿到了快递并返回给A</p>
<pre><code>//请求转发的写法： 参数即跳转的位置
request.getRequestDispatcher(&quot;login_success.html&quot;).forward(request, response);</code></pre><h3 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h3><p><img src="http://qiniuyun.dajienihao.cn/image/0116/20180527171706259.png" alt=""></p>
<ol>
<li><p>地址上显示的是请求servlet的地址。  返回200 ok</p>
</li>
<li><p>请求次数只有一次， 因为是服务器内部帮客户端执行了后续的工作。 </p>
</li>
<li><p>只能跳转自己项目的资源路径 。  </p>
</li>
<li><p>效率上稍微高一点，因为只执行一次请求。 </p>
</li>
<li><p>可以使用上一次的request对象。 </p>
</li>
<li><p>请求转发路径写内部枯井 无需加项目路径</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>原生JDBC的使用</title>
    <url>/blog/2020/01/13/yuan-sheng-de-jdbc-de-shi-yong/</url>
    <content><![CDATA[<h2 id="JDBC是什么"><a href="#JDBC是什么" class="headerlink" title="JDBC是什么"></a>JDBC是什么</h2><blockquote>
<p>JAVA Database Connectivity java数据库连接</p>
</blockquote>
<h2 id="为什么会出现JDBC"><a href="#为什么会出现JDBC" class="headerlink" title="为什么会出现JDBC"></a>为什么会出现JDBC</h2><blockquote>
<p>SUN公司提供的一种数据库访问规则、规范, 由于数据库种类较多，并且java语言使用比较广泛，sun公司就提供了一种规范，让其他的数据库提供商去实现底层的访问规则。 我们的java程序只要使用sun公司提供的jdbc驱动即可。</p>
</blockquote>
<h2 id="使用JDBC的基本步骤"><a href="#使用JDBC的基本步骤" class="headerlink" title="使用JDBC的基本步骤"></a>使用JDBC的基本步骤</h2><h3 id="1-注册驱动"><a href="#1-注册驱动" class="headerlink" title="1. 注册驱动"></a>1. 注册驱动</h3><pre><code>   DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></pre><h3 id="2-建立连接"><a href="#2-建立连接" class="headerlink" title="2. 建立连接"></a>2. 建立连接</h3><pre><code>   //DriverManager.getConnection(&quot;jdbc:mysql://localhost/test?user=monty&amp;password=greatsqldb&quot;);
   //建立连接 参数一： 协议 + 访问的数据库 ， 参数二： 用户名 ， 参数三： 密码。
   conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost/student&quot;, &quot;root&quot;, &quot;root&quot;);</code></pre><h3 id="3-创建statement"><a href="#3-创建statement" class="headerlink" title="3. 创建statement"></a>3. 创建statement</h3><pre><code>   //创建statement ， 跟数据库打交道，一定需要这个对象
   st = conn.createStatement();</code></pre><h3 id="4-执行sql-，得到ResultSet"><a href="#4-执行sql-，得到ResultSet" class="headerlink" title="4. 执行sql ，得到ResultSet"></a>4. 执行sql ，得到ResultSet</h3><pre><code>   //执行查询 ， 得到结果集
   String sql = &quot;select * from t_stu&quot;;
   rs = st.executeQuery(sql);</code></pre><h3 id="5-遍历结果集"><a href="#5-遍历结果集" class="headerlink" title="5. 遍历结果集"></a>5. 遍历结果集</h3><pre><code>   //遍历查询每一条记录
       while(rs.next()){
           int id = rs.getInt(&quot;id&quot;);
           String name = rs.getString(&quot;name&quot;);
           int age = rs.getInt(&quot;age&quot;);
           System.out.println(&quot;id=&quot;+id + &quot;===name=&quot;+name+&quot;==age=&quot;+age);    
       }</code></pre><h3 id="6-释放资源"><a href="#6-释放资源" class="headerlink" title="6. 释放资源"></a>6. 释放资源</h3><pre><code>    if (rs != null) {
        try {
            rs.close();
        } catch (SQLException sqlEx) { } // ignore 
        rs = null;
    }
    ...</code></pre><h2 id="JDBC-工具类构建"><a href="#JDBC-工具类构建" class="headerlink" title="JDBC 工具类构建"></a>JDBC 工具类构建</h2><h3 id="1-资源释放工作的整合"><a href="#1-资源释放工作的整合" class="headerlink" title="1. 资源释放工作的整合"></a>1. 资源释放工作的整合</h3><h3 id="2-驱动防二次注册"><a href="#2-驱动防二次注册" class="headerlink" title="2. 驱动防二次注册"></a>2. 驱动防二次注册</h3><pre><code>   DriverManager.registerDriver(new com.mysql.jdbc.Driver());
   Driver 这个类里面有静态代码块，一上来就执行了，所以等同于我们注册了两次驱动。 其实没这个必要的。
   //静态代码块 ---&gt; 类加载了，就执行。 java.sql.DriverManager.registerDriver(new Driver());
    最后形成以下代码即可。
    Class.forName(&quot;com.mysql.jdbc.Driver&quot;);    </code></pre><h3 id="3-使用properties配置文件"><a href="#3-使用properties配置文件" class="headerlink" title="3. 使用properties配置文件"></a>3. 使用properties配置文件</h3><ol>
<li>在src底下声明一个文件 xxx.properties ，里面的内容吐下：<pre><code>   driverClass=com.mysql.jdbc.Driver
   url=jdbc:mysql://localhost/student
   name=root
   password=root</code></pre></li>
<li>在工具类里面，使用静态代码块，读取属性<pre><code> static{
     try {
         //1. 创建一个属性配置对象
         Properties properties = new Properties();
         InputStream is = new FileInputStream(&quot;jdbc.properties&quot;); //对应文件位于工程根目录
         //使用类加载器，去读取src底下的资源文件。 后面在servlet  //对应文件位于src目录底下
         //InputStream is = JDBCUtil.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);
         //导入输入流。
         properties.load(is);
         //读取属性
         driverClass = properties.getProperty(&quot;driverClass&quot;);
         url = properties.getProperty(&quot;url&quot;);
         name = properties.getProperty(&quot;name&quot;);
         password = properties.getProperty(&quot;password&quot;);
     } catch (Exception e) {
         e.printStackTrace();
     }
 }</code></pre></li>
</ol>
<h2 id="数据库的CRUD-sql"><a href="#数据库的CRUD-sql" class="headerlink" title="数据库的CRUD sql"></a>数据库的CRUD sql</h2><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><pre><code>  INSERT INTO t_stu (NAME , age) VALUES (&#39;wangqiang&#39;,28)
    INSERT INTO t_stu VALUES (NULL,&#39;wangqiang2&#39;,28)
        // 1. 获取连接对象
        conn = JDBCUtil.getConn();
        // 2. 根据连接对象，得到statement
        st = conn.createStatement();
        //3. 执行添加
        String sql = &quot;insert into t_stu values(null , &#39;aobama&#39; , 59)&quot;;
        //影响的行数， ，如果大于0 表明操作成功。 否则失败
        int result = st.executeUpdate(sql);
        if(result &gt;0 ){
            System.out.println(&quot;添加成功&quot;);
        }else{
            System.out.println(&quot;添加失败&quot;);
        }</code></pre><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><pre><code>  DELETE FROM t_stu WHERE id = 6
        // 1. 获取连接对象
        conn = JDBCUtil.getConn();
        // 2. 根据连接对象，得到statement
        st = conn.createStatement();
        //3. 执行添加
        String sql = &quot;delete from t_stu where name=&#39;aobama&#39;&quot;;
        //影响的行数， ，如果大于0 表明操作成功。 否则失败
        int result = st.executeUpdate(sql);
        if(result &gt;0 ){
            System.out.println(&quot;删除成功&quot;);
        }else{
            System.out.println(&quot;删除失败&quot;);
        }</code></pre><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><pre><code>  SELECT * FROM t_stu
        // 1. 获取连接对象
        conn = JDBCUtil.getConn();
        // 2. 根据连接对象，得到statement
        st = conn.createStatement();
        // 3. 执行sql语句，返回ResultSet
        String sql = &quot;select * from t_stu&quot;;
        rs = st.executeQuery(sql);
        // 4. 遍历结果集
        while (rs.next()) {
            String name = rs.getString(&quot;name&quot;);
            int age = rs.getInt(&quot;age&quot;);
            System.out.println(name + &quot;   &quot; + age);
        }</code></pre><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><pre><code>  UPDATE t_stu SET age = 38 WHERE id = 1;
        // 1. 获取连接对象
        conn = JDBCUtil.getConn();
        // 2. 根据连接对象，得到statement
        st = conn.createStatement();
        //3. 执行添加
        String sql = &quot;update t_stu set age = 26 where name =&#39;qyq&#39;&quot;;
        //影响的行数， ，如果大于0 表明操作成功。 否则失败
        int result = st.executeUpdate(sql);
        if(result &gt;0 ){
            System.out.println(&quot;更新成功&quot;);
        }else{
            System.out.println(&quot;更新失败&quot;);
        }</code></pre><h2 id="使用单元测试，测试代码"><a href="#使用单元测试，测试代码" class="headerlink" title="使用单元测试，测试代码"></a>使用单元测试，测试代码</h2><ol>
<li><p>定义一个类， TestXXX , 里面定义方法 testXXX.</p>
</li>
<li><p>添加junit的支持。 </p>
<pre><code>右键工程 --- add Library --- Junit --- Junit4</code></pre></li>
<li><p>在方法的上面加上注解 ， 其实就是一个标记。</p>
<pre><code>@Test
public void testQuery() {
    ...
}</code></pre></li>
<li><p>光标选中方法名字，然后右键执行单元测试。  或者是打开outline视图， 然后选择方法右键执行。</p>
</li>
</ol>
<h2 id="Dao模式"><a href="#Dao模式" class="headerlink" title="Dao模式"></a>Dao模式</h2><blockquote>
<p>Data Access Object 数据访问对象</p>
</blockquote>
<ol>
<li>新建一个dao的接口， 里面声明数据库访问规则</li>
</ol>
<pre><code>    /**
     * 定义操作数据库的方法
     */
    public interface UserDao {
        /**
         * 查询所有
         */
        void findAll();
    }</code></pre><ol start="2">
<li>新建一个dao的实现类，具体实现早前定义的规则</li>
</ol>
<pre><code>    public class UserDaoImpl implements UserDao{
    @Override
    public void findAll() {
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            //1. 获取连接对象
            conn = JDBCUtil.getConn();
            //2. 创建statement对象
            st = conn.createStatement();
            String sql = &quot;select * from t_user&quot;;
            rs = st.executeQuery(sql);        
            while(rs.next()){
                String userName = rs.getString(&quot;username&quot;);
                String password = rs.getString(&quot;password&quot;);
                System.out.println(userName+&quot;=&quot;+password);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            JDBCUtil.release(conn, st, rs);
        }
    }
}</code></pre><ol start="3">
<li>直接使用实现<br> @Test<br> public void testFindAll(){<br> UserDao dao = new UserDaoImpl();<pre><code> dao.findAll();</code></pre> }</li>
</ol>
<h2 id="Statement的安全问题"><a href="#Statement的安全问题" class="headerlink" title="Statement的安全问题"></a>Statement的安全问题</h2><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>Statement执行 ，其实是拼接sql语句的。  先拼接sql语句，然后在一起执行。 </p>
<pre><code>    String sql = &quot;select * from t_user where username=&#39;&quot;+ username  +&quot;&#39; and password=&#39;&quot;+ password +&quot;&#39;&quot;;

    UserDao dao = new UserDaoImpl();
    dao.login(&quot;admin&quot;, &quot;100234khsdf88&#39; or &#39;1=1&quot;);

    SELECT * FROM t_user WHERE username=&#39;admin&#39; AND PASSWORD=&#39;100234khsdf88&#39; or &#39;1=1&#39; 

    前面先拼接sql语句， 如果变量里面带有了 数据库的关键字，那么一并认为是关键字。 不认为是普通的字符串。 
    rs = st.executeQuery(sql);</code></pre><h3 id="PrepareStatement"><a href="#PrepareStatement" class="headerlink" title="PrepareStatement"></a>PrepareStatement</h3><p>该对象就是替换前面的statement对象。<br>相比较以前的statement， 预先处理给定的sql语句，对其执行语法检查。 在sql语句里面使用 ? 占位符来替代后续要传递进来的变量。 后面进来的变量值，将会被看成是字符串，不会产生任何的关键字。</p>
<pre><code>         String sql = &quot;insert into t_user values(null , ? , ?)&quot;;
         ps = conn.prepareStatement(sql);
         //给占位符赋值 从左到右数过来，1 代表第一个问号， 永远你是1开始。
         ps.setString(1, userName);
         ps.setString(2, password);</code></pre><p>​    </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>JDBC入门</li>
<li>抽取工具类  </li>
<li>Statement CRUD 演练crud</li>
<li>Dao模式  声明与实现分开</li>
<li>PrepareStament 预处理sql语句，解决上面statement出现的问题</li>
</ol>
]]></content>
      <categories>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>原生JDBC的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓自定义view五子棋项目</title>
    <url>/blog/2019/12/29/an-zhuo-zi-ding-yi-view-wu-zi-qi-xiang-mu-xiang-xi/</url>
    <content><![CDATA[<p>当初学编程的，都想做一个游戏，俄罗斯方块？贪吃蛇？不不不，今天我所讲的是五子棋双人对战，对比那些来说，应该算比较简单的了。<br>相信很多人都有看过，不过视频中，我发现有些代码是不需要的，而且还存在一些bug，针对视频所存在的bug我都做了调整，经测试，目前无bug。<br>创建一个类，然后继承View，需要实现构造方法，我们选择两个参数的构造方法就行了<br>下面贴出代码：</p>
<pre><code>public panel(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();//初始化方法
    }</code></pre><p>所需定义的内容：</p>
<pre><code>private int mPanelWidth;
private float mLineHeight;//棋盘行距
private int MAX_LINE = 10;//棋盘行数
private Paint mPaint = new Paint();//绘制对象
private Bitmap mWhitePiece;//白色棋子
private Bitmap mBlackPiece;//黑色棋子
private boolean mIsWhite = true;//白棋先手，当前轮到白棋出子
private List&lt;Point&gt; mWhiteArray = new ArrayList&lt;&gt;();//放白色棋子落子的坐标
private List&lt;Point&gt; mBlackArray = new ArrayList&lt;&gt;();//放黑色棋子落子的坐标
private float ratioPieceOfLineHeight = 3 * 1.0f / 4;//棋子占据的比例
private boolean mIsGameOver;//判断游戏结束
private boolean mIsWhiteWinner;//true白子胜利，false黑子胜利
private int MAX_COUNT_IN_LINE = 5;//五子棋数</code></pre><p>  对画笔的初始化：</p>
<pre><code> private void init() {//初始化方法
        mPaint.setColor(Color.rgb(0, 0, 0));//设置颜色
        mPaint.setAntiAlias(true);//抗锯齿
        mPaint.setDither(true);//设置防抖动
        mPaint.setStyle(Paint.Style.STROKE);//绘制棋盘线条，画笔为描边样式
        mWhitePiece = BitmapFactory.decodeResource(getResources(), R.drawable.stone_w2);//设置白色棋子图片
        mBlackPiece = BitmapFactory.decodeResource(getResources(), R.drawable.stone_b1);//设置黑色棋子图片
    }</code></pre><p> 对于自定义view有一定基础的小伙伴都知道，自定义一般都要实现2个方法，1：onSizeChanged（视图大小的改变）；2：onMeasure（告诉父view，子视图占用多大的空间）<br>下面上代码，我都有详细注解，就不一个一个解释了：<br>onMeasure：</p>
<pre><code>    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {//设置棋盘大小
        int widthSize = MeasureSpec.getSize(widthMeasureSpec);//获取宽度
        int widthMode = MeasureSpec.getMode(widthMeasureSpec);//根据测量值提取模式
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);//获取高度
        int heightMode = MeasureSpec.getMode(heightMeasureSpec);//根据测量值提取模式
        int width = Math.min(widthSize, heightSize);//取最小值获取设置正方形棋盘
        if (widthMode == MeasureSpec.UNSPECIFIED)//当模式为未指定模式时就为棋盘长宽就为高度
            width = heightSize;
        else if (heightMode == MeasureSpec.UNSPECIFIED)//当模式为未指定模式时就为棋盘长宽就为宽度
            width = widthSize;
        setMeasuredDimension(width, width);//取宽高的最小值绘制棋盘
    }</code></pre><p> onSizeChanged：</p>
<pre><code> protected void onSizeChanged(int w, int h, int oldw, int oldh) {//当宽高发生改变进行回调
        super.onSizeChanged(w, h, oldw, oldh);
        mPanelWidth = w;
        mLineHeight = mPanelWidth * 1.0f / MAX_LINE;//棋盘行距
        int pieceWidth = (int) (mLineHeight * ratioPieceOfLineHeight);//棋子比列
        mWhitePiece = Bitmap.createScaledBitmap(mWhitePiece, pieceWidth, pieceWidth, false);//设置棋子大小
        mBlackPiece = Bitmap.createScaledBitmap(mBlackPiece, pieceWidth, pieceWidth, false);//设置棋子大小
    }</code></pre><p> 好了，下面我们进图画图操作，需要的操作是，先画棋盘，在画棋子，然后判断游戏结束。</p>
<pre><code>  protected void onDraw(Canvas canvas) {//绘制方法
        super.onDraw(canvas);
        drawBoard(canvas);//绘制棋盘
        drawPiece(canvas);//绘制棋子
        checkGameOver();//检查游戏是否结束
    }</code></pre><p> 绘制棋盘：</p>
<pre><code>  private void drawBoard(Canvas canvas) {//绘制棋盘方法
        int w = mPanelWidth;//棋盘宽度
        float lineHeight = mLineHeight;//棋盘行距
        for (int i = 0; i &lt; MAX_LINE; i++) {
            int startX = (int) (lineHeight / 2);//起点坐标
            int endX = (int) (w - lineHeight / 2);//终点坐标
            int y = (int) ((0.5 + i) * lineHeight);//y轴起点坐标
            canvas.drawLine(startX, y, endX, y, mPaint);//绘制x轴线条
            canvas.drawLine(y, startX, y, endX, mPaint);//绘制y轴线条
        }
    }</code></pre><p>绘制棋子：</p>
<pre><code>private void drawPiece(Canvas canvas) {//绘制棋子方法
        for (int i = 0; i &lt; mWhiteArray.size(); i++) {
            Point whitePoint = mWhiteArray.get(i);//拿到棋子
            canvas.drawBitmap(mWhitePiece,
                    (whitePoint.x + (1 - ratioPieceOfLineHeight) / 2) * mLineHeight,
                    (whitePoint.y + (1 - ratioPieceOfLineHeight) / 2) * mLineHeight, null);//棋子坐标计算
        }
        for (int i = 0; i &lt; mBlackArray.size(); i++) {
            Point blackPoint = mBlackArray.get(i);//拿到棋子
            canvas.drawBitmap(mBlackPiece,
                    (blackPoint.x + (1 - ratioPieceOfLineHeight) / 2) * mLineHeight,
                    (blackPoint.y + (1 - ratioPieceOfLineHeight) / 2) * mLineHeight, null);//棋子坐标计算
        }
    }</code></pre><p>判断游戏是否结束:</p>
<pre><code>private void checkGameOver() {//判断游戏是否结束及和棋
        boolean whiteWin = checkFiveInLine(mWhiteArray);//白子成功五子连珠
        boolean blackWin = checkFiveInLine(mBlackArray);//黑子成功五子连珠
        int max = MAX_LINE * MAX_LINE;//最大落子数的和
        if (whiteWin || blackWin) {//有人胜利
            mIsGameOver = true;//游戏结束
            mIsWhiteWinner = whiteWin;
            String text = mIsWhiteWinner ? &quot;白棋胜利&quot; : &quot;黑棋胜利&quot;;//白子赢了提示白棋胜利，否者黑棋胜利
            if (mIsGameOver) {
                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
                builder.setIcon(R.drawable.dy);
                builder.setTitle(&quot;游戏结束，&quot; + text);
                builder.setMessage(&quot;请选项下面选项！！！！&quot;);
                builder.setNegativeButton(&quot;退出游戏&quot;, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        System.exit(0);
                    }
                });
                builder.setNeutralButton(&quot;查看棋盘！&quot;, new DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialogInterface, int i) {
                        dialogInterface.dismiss();
                    }
                });
                builder.setPositiveButton(&quot;再来一局&quot;, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        reStart();
                    }
                });
                builder.setCancelable(false);
                builder.show();
            }
        } else if ((mBlackArray.size() + mWhiteArray.size()) == max) {//当白棋子数和黑棋字数相加等于最大数时无人胜利，双方和棋
            AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
            builder.setIcon(R.drawable.dy);
            builder.setTitle(&quot;棋逢对手,将遇良才！&quot;);
            builder.setMessage(&quot;二位和棋，是否再战一句！！！&quot;);
            builder.setNegativeButton(&quot;退出游戏&quot;, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    System.exit(0);
                }
            });
            builder.setNeutralButton(&quot;查看棋盘！&quot;, new DialogInterface.OnClickListener() {

                public void onClick(DialogInterface dialogInterface, int i) {
                    dialogInterface.dismiss();
                }
            });
            builder.setPositiveButton(&quot;再来一局&quot;, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    reStart();
                }
            });
            builder.setCancelable(false);
            builder.show();
        }
    }</code></pre><p>游戏结束的判断的依据：</p>
<pre><code>private boolean checkFiveInLine(List&lt;Point&gt; points) {//判断是否五子连珠
        for (Point p : points) {
            int x = p.x;
            int y = p.y;
            boolean win = checkHorizontal(x, y, points);//判断xy位置的棋子是否有左右相邻的五个一致
            if (win)
                return true;
            win = checkVertiacal(x, y, points);//判断xy位置的棋子是否有上下相邻的五个一致
            if (win)
                return true;
            win = checkLeftDiagonal(x, y, points);//判断xy位置的棋子是否有左斜相邻的五个一致
            if (win)
                return true;
            win = checkRightDiagonal(x, y, points);//判断xy位置的棋子是否有右斜相邻的五个一致
            if (win)
                return true;
        }
        return false;
    }</code></pre><p>判断是否有横向五子连珠：</p>
<pre><code>private boolean checkHorizontal(int x, int y, List&lt;Point&gt; points) {//判断x，y位置的棋子是否有横向相邻的五个一致
        int count = 1;//当前子
        for (int i = 1; i &lt; MAX_COUNT_IN_LINE; i++) {//从当前子往左数最大4个，如果有相同子count加1
            if (points.contains(new Point(x - i, y))) {
                count++;
            } else {
                break;
            }
        }
        if (count == MAX_COUNT_IN_LINE)//如果count为5表示成功连珠
            return true;


        for (int i = 1; i &lt; MAX_COUNT_IN_LINE; i++) {//从当前子往右数最大4个，如果有相同子count加1
            if (points.contains(new Point(x + i, y))) {
                count++;
            } else {
                break;
            }
        }
        if (count == MAX_COUNT_IN_LINE)//如果count为5表示成功连珠
            return true;
        return false;
    }</code></pre><p>其他方向的代码和上面一样只是循环中x，y的值改一下，就不放具体代码了，具体提示一下竖向判断的(x,y-1),(x,y+1）左斜是(x - i, y + i),(x + i, y - i) 右斜是(x - i, y - i),(x + i, y + i)<br>重新开始游戏:</p>
<pre><code>public void reStart() {//重新开始游戏
        mWhiteArray.clear();
        mBlackArray.clear();
        mIsGameOver = false;
        mIsWhiteWinner = false;
        mIsWhite=true;
        invalidate();
    }</code></pre><p>悔棋：</p>
<pre><code>public void withDraw() {//悔棋
        if (mIsGameOver) {
            Toast.makeText(getContext(), &quot;游戏已经结束，不能悔棋&quot;, Toast.LENGTH_LONG).show();
            return;
        }
        if (mBlackArray.size() &gt; 0 || mWhiteArray.size() &gt; 0) {
            if (mIsWhite) {
                mBlackArray.remove(mBlackArray.size() - 1);
                mIsWhite = !mIsWhite;
            } else {
                mWhiteArray.remove(mWhiteArray.size() - 1);
                mIsWhite = !mIsWhite;
            }
            invalidate();
        }
    }</code></pre><p>这里我没有考虑到禁手的问题，感觉如果考虑到禁手的话，算法比较复杂，人机对战。这里呢此类的代码就完成了<br>下面将布局代码发出来</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MainActivity&quot;
    android:background=&quot;@drawable/bg&quot;&gt;
    &lt;TextView
        android:id=&quot;@+id/textview&quot;
        android:textColor=&quot;#000000&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:textSize=&quot;30dp&quot;
        android:layout_centerHorizontal=&quot;true&quot;
        android:layout_above=&quot;@id/wuziqi&quot;
        /&gt;
    &lt;com.example.myapplication.panel
        android:id=&quot;@+id/wuziqi&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;
        android:layout_centerInParent=&quot;true&quot; /&gt;
    &lt;LinearLayout
        android:layout_below=&quot;@id/wuziqi&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_marginLeft=&quot;60dp&quot;
        android:layout_marginRight=&quot;60dp&quot;
        android:layout_height=&quot;wrap_content&quot;&gt;

        &lt;Button
            android:id=&quot;@+id/restart&quot;
            android:text=&quot;重新开始&quot;
            android:onClick=&quot;reStart&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot;/&gt;
        &lt;TextView
            android:layout_weight=&quot;1&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:text=&quot;&quot;/&gt;
        &lt;Button
            android:id=&quot;@+id/withdraw&quot;
            android:text=&quot;悔棋&quot;
            android:onClick=&quot;withdraw&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot;/&gt;
    &lt;/LinearLayout&gt;
&lt;/RelativeLayout&gt;</code></pre><p>mainactivity.java文件的代码也发出来</p>
<pre><code>public class MainActivity extends AppCompatActivity {
    panel panel;
    TextView textView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        panel=findViewById(R.id.wuziqi);
    }

    public void reStart(View view) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setIcon(R.drawable.dy);
        builder.setTitle(&quot;重新开始&quot;);
        builder.setMessage(&quot;重新开始游戏需要双方棋手同意请选择！！！&quot;);
        builder.setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

            }
        });
        builder.setPositiveButton(&quot;重新开始&quot;, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                panel.reStart();
            }
        });
        builder.setCancelable(false);
        builder.show();
    }

    public void withdraw(View view) {

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setIcon(R.drawable.dy);
        builder.setTitle(&quot;悔棋&quot;);
        builder.setMessage(&quot;悔棋需要双方棋手同意请选择！！！&quot;);
        builder.setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

            }
        });
        builder.setPositiveButton(&quot;确定悔棋&quot;, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                panel.withDraw();
            }
        });
        builder.setCancelable(false);
        builder.show();
    }
}</code></pre><p>好了到这里安卓五子棋的项目就完成了，自定义view的难度在于给viwe的大小及测量，完成这些的话其实自定义view并没有这么难。</p>
]]></content>
      <categories>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>安卓</tag>
        <tag>自定义view</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的索引</title>
    <url>/blog/2019/12/21/mysql-de-suo-yin/</url>
    <content><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>在数据库操作中，经常需要查询特定的数据，例如，当执行<code>select * from student where id=10000</code>语句时，MySQL数据库必须从第一条记录开始遍历，直到找出id为10000的数据，这样的效率显然非常低。为此，MySQL允许建立索引来加快数据表的查询和排序。</p>
<h2 id="1-索引的概念"><a href="#1-索引的概念" class="headerlink" title="1.索引的概念"></a>1.索引的概念</h2><p>数据库的索引好比新华字典的音序表，它是对数据库表中一列或多列的值进行排序后的一种结构，其作用就是提高表中数据的查询进度。MySQL的索引分为很多种，具体如下：</p>
<h3 id="1-1普通索引"><a href="#1-1普通索引" class="headerlink" title="1.1普通索引"></a>1.1普通索引</h3><p>普通索引是由<code>key或index</code>定义的索引，他是mysql中的基本索引类型，可以创建在任何数据类型中，其值是否唯一和非空由字段本身的约束条件决定。例如，在grade表的stu_id字段上建立一个普通索引，查询记录时，就可以根据该索引进行查询了。</p>
<h3 id="1-2唯一性索引"><a href="#1-2唯一性索引" class="headerlink" title="1.2唯一性索引"></a>1.2唯一性索引</h3><p>唯一性索引是由<code>UNIQUE</code>定义的索引，该索引所在的字段必须是唯一的。例如，在grade表的id字段建立唯一性索引，那么，id字段的值就必须是唯一的。</p>
<h3 id="1-3全文索引"><a href="#1-3全文索引" class="headerlink" title="1.3全文索引"></a>1.3全文索引</h3><p>全文索引是由<code>FULLTEXT</code>定义的索引，他只能创建在<code>char、varchar或text</code>类型上的字段上，而且只有<code>MYISAM</code>存储引擎支持全文索引。</p>
<h3 id="1-4单列索引"><a href="#1-4单列索引" class="headerlink" title="1.4单列索引"></a>1.4单列索引</h3><p>单列索引指得是在表中单个字段上创建索引，它可以是普通索引、唯一索引或全文索引，只要保证该索引对应表中的一个字段即可。</p>
<h3 id="1-5空间索引"><a href="#1-5空间索引" class="headerlink" title="1.5空间索引"></a>1.5空间索引</h3><p>空间索引是由<code>SPATIAL</code>定义的索引，他只能创建在空间数据类型的字段上，MySQL的空间数据类型有四种，分别是<code>GEOMETRY、POINT、LINESTRING和POLYGON</code>。需要注意的是，创建空间索引的字段，必须将其声明为<code>NOT NULL</code>，并且空间索引只能在<code>MYISAM</code>的表创建。</p>
<blockquote>
<p>需要注意的是，虽然索引可以提高数据的查询速度，但索引会占据一定的磁盘空间，并且在创建和维护索引时，其消耗的时间是随着数据量的增加而增加的。因此使用索引时，应该综合考虑索引的优点和缺点。</p>
</blockquote>
<h2 id="2-创建索引"><a href="#2-创建索引" class="headerlink" title="2.创建索引"></a>2.创建索引</h2><p>要想使用索引提高数据表的查询速度，首先要创建一个索引。创建索引的方法有三种，具体如下。</p>
<h3 id="2-1创建表的时候创建索引"><a href="#2-1创建表的时候创建索引" class="headerlink" title="2.1创建表的时候创建索引"></a>2.1创建表的时候创建索引</h3><p>创建表的时候可以直接创建索引，这中方式最简单、方便，其基本的语法格式如下所示：</p>
<pre><code>create table 表名(字段名 数据类型 [完整约束条件]，
                  字段名 数据类型 [完整约束条件]，
                  ...
                      字段名 数据类型 
                      [UNIQUE|FULLTEXT|SPATIAL] INDEX｜KEY 
                          [别名](字段名1 [(长度)] [ASC]|[DESC])，
）；</code></pre><p>关于上述语法的相关解释具体如下。</p>
<ol>
<li>UNIQUE：可选参数，表示唯一索引。</li>
<li>FULLTEXT：可选参数，表示全文索引。</li>
<li>SPATIAL：可选参数，表示空间索引。</li>
<li>INDEX和KEY：用来表示字段的索引，二选一即可。</li>
<li>别名：可选参数，表示创建的索引名称。</li>
<li>字段名1：指定索引对应字段的名称。</li>
<li>长度：可选参数，用于表示索引的长度。</li>
<li>ASC和DESC：可选参数，其中ASC表示升序排列，DESC表示降序排列。</li>
</ol>
<p>为了帮助读者更好地了解如何在创建表的时候创建索引，接下来，通过具体的案例，分别对MySQL的六种索引类型进行详解，具体如下：</p>
<h4 id="2-1-1-创建普通索引"><a href="#2-1-1-创建普通索引" class="headerlink" title="2.1.1 创建普通索引"></a>2.1.1 创建普通索引</h4><pre><code>create table t1(id int，
                name varchar(20),
                score float,
                INDEX (name)
);</code></pre><h4 id="2-1-2-创建唯一性索引"><a href="#2-1-2-创建唯一性索引" class="headerlink" title="2.1.2 创建唯一性索引"></a>2.1.2 创建唯一性索引</h4><pre><code>create table t2(id int not null,
                name varchar(20) not null,
                score float,
                unique index unique_id(id Asc)
);</code></pre><h4 id="2-1-3-创建全文索引"><a href="#2-1-3-创建全文索引" class="headerlink" title="2.1.3 创建全文索引"></a>2.1.3 创建全文索引</h4><pre><code>create table t3(id int not null,
                name varchar(20) not null,
                score float,
                fulltext index fulltext_name(name)
)engine=myisam;</code></pre><h4 id="2-1-4-创建单列索引"><a href="#2-1-4-创建单列索引" class="headerlink" title="2.1.4 创建单列索引"></a>2.1.4 创建单列索引</h4><pre><code>create table t4(id int not null,
                name varchar(20) not null,
                score float,
                index single_name(name(20))
);</code></pre><h4 id="2-1-5-创建多列索引"><a href="#2-1-5-创建多列索引" class="headerlink" title="2.1.5 创建多列索引"></a>2.1.5 创建多列索引</h4><pre><code>create table t5(id int not null,
                name varchar(20) not null,
                score float,
                index multi(name(20),id)
);</code></pre><h4 id="2-1-6-创建空间索引"><a href="#2-1-6-创建空间索引" class="headerlink" title="2.1.6 创建空间索引"></a>2.1.6 创建空间索引</h4><pre><code>create table t6(id int,
                space GEOMETRY not null,
                SPATIAL index sp(space）
)engine=myisam；</code></pre><h3 id="2-2-创建使用create-index语句在已存在的表上创建索引"><a href="#2-2-创建使用create-index语句在已存在的表上创建索引" class="headerlink" title="2.2 创建使用create index语句在已存在的表上创建索引"></a>2.2 创建使用create index语句在已存在的表上创建索引</h3><p>若想在一个已经存在的表上创建索引，可以使用<code>create index语句，create index</code>语句创建索引的具体语法格式如下所示：</p>
<pre><code>create [UNIQUE|FULLTEXT|SPATIAL] index 索引名
on 表名 （字段名 [(长度)] [ASC|DESC]);</code></pre><p>在上述语法中<code>UNIUE、FULLTEXT和SPATIAL</code>都是可选参数，分别用于表示唯一性索引、全文索引和空间索引；index用于指明字段为索引。<br>为了便于学习如何使用<code>create index</code>语句在已经存在的表创建索引，接下来创建一个book表，该表中没有任何的索引，创建book表的sql语句如下所示：</p>
<pre><code>create table book(
                bookid int not null,
                bookname varchar(255) not null,
                authors varchar(255) not null,
                info varchar(255) null,
                comment varchar(255) null,
                publicyear year not null
);</code></pre><h4 id="2-2-1-创建普通索引"><a href="#2-2-1-创建普通索引" class="headerlink" title="2.2.1 创建普通索引"></a>2.2.1 创建普通索引</h4><p><code>create index index_id on book (bookid);</code></p>
<h4 id="2-2-2-创建唯一性索引"><a href="#2-2-2-创建唯一性索引" class="headerlink" title="2.2.2 创建唯一性索引"></a>2.2.2 创建唯一性索引</h4><p><code>create unique index uniqueidx on book (bookid);</code></p>
<h4 id="2-2-3-创建单列索引"><a href="#2-2-3-创建单列索引" class="headerlink" title="2.2.3 创建单列索引"></a>2.2.3 创建单列索引</h4><p><code>create index singleidx on book(comment);</code></p>
<h4 id="2-2-4-创建多列索引"><a href="#2-2-4-创建多列索引" class="headerlink" title="2.2.4 创建多列索引"></a>2.2.4 创建多列索引</h4><p><code>create index mulitidx on book(authors(20),info(20));</code></p>
<h4 id="2-2-5-创建全文索引"><a href="#2-2-5-创建全文索引" class="headerlink" title="2.2.5 创建全文索引"></a>2.2.5 创建全文索引</h4><p><code>create fulltext index fulltextidx on book(info);</code></p>
<h4 id="2-2-6-创建空间索引"><a href="#2-2-6-创建空间索引" class="headerlink" title="2.2.6 创建空间索引"></a>2.2.6 创建空间索引</h4><p><code>create SPATIAL index spatidx on t7(g);</code></p>
<h3 id="2-3-使用alter-table-语句在已经存在的表上创建索引"><a href="#2-3-使用alter-table-语句在已经存在的表上创建索引" class="headerlink" title="2.3 使用alter table 语句在已经存在的表上创建索引"></a>2.3 使用alter table 语句在已经存在的表上创建索引</h3><p>在已经存在的表上创建索引，除了可以使用<code>create index</code>语句外，还可以使用<code>alter table</code>语句。使用<code>alter table</code>语句创建索引的语法格式如下所示：</p>
<pre><code>alter table 表名 add [UNIQUE|FULLTEXT|SPATIAL] index
                索引名 （字段名 [(长度)] [ASC|DESC])</code></pre><p>在上述语法中<code>UNIUE、FULLTEXT和SPATIAL</code>都是可选参数，分别用于表示唯一性索引、全文索引和空间索引；add表示像表中添加字段。<br>接下类同样以book表为例，对不同类型的索引进行详解。</p>
<h4 id="2-3-1-创建普通索引"><a href="#2-3-1-创建普通索引" class="headerlink" title="2.3.1 创建普通索引"></a>2.3.1 创建普通索引</h4><p><code>alter table book add index index_id(bookid);</code></p>
<h4 id="2-3-2-创建唯一性索引"><a href="#2-3-2-创建唯一性索引" class="headerlink" title="2.3.2 创建唯一性索引"></a>2.3.2 创建唯一性索引</h4><p><code>alter table book add unique uniqueidx(bookid);</code></p>
<h4 id="2-3-3-创建单列索引"><a href="#2-3-3-创建单列索引" class="headerlink" title="2.3.3 创建单列索引"></a>2.3.3 创建单列索引</h4><p><code>alter table book add index singleidx (comment(50));</code></p>
<h4 id="2-3-4-创建多列索引"><a href="#2-3-4-创建多列索引" class="headerlink" title="2.3.4 创建多列索引"></a>2.3.4 创建多列索引</h4><p><code>alter table book add index multidx(autros(50),info(50));</code></p>
<h4 id="2-3-5-创建全文索引"><a href="#2-3-5-创建全文索引" class="headerlink" title="2.3.5 创建全文索引"></a>2.3.5 创建全文索引</h4><p><code>alter table book add fulltext index fulltextidx(info);</code></p>
<h4 id="2-3-6-创建空间索引"><a href="#2-3-6-创建空间索引" class="headerlink" title="2.3.6 创建空间索引"></a>2.3.6 创建空间索引</h4><p><code>alter table t8 add spatial index spatidx(space);</code></p>
<h2 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="3.删除索引"></a>3.删除索引</h2><p>由于索引会占用一定的磁盘空间，因此，为了避免影响数据库性能，应该及时删除不在使用的索引。删除索引的方式有两种，具体如下:</p>
<h3 id="3-1使用alter-table删除索引"><a href="#3-1使用alter-table删除索引" class="headerlink" title="3.1使用alter table删除索引"></a>3.1使用alter table删除索引</h3><p>使用<code>alter table``删除索引的基本语法格式如下所示：</code>alter table 表名 drop index 索引名```</p>
<pre><code>alter table book index fulltextidx；</code></pre><h3 id="3-2使用drop-index删除索引"><a href="#3-2使用drop-index删除索引" class="headerlink" title="3.2使用drop index删除索引"></a>3.2使用drop index删除索引</h3><p>使用<code>drop index</code> 删除索引的基本语法格式如下：<br><code>drop index 索引名 on 表名；</code></p>
<pre><code>drop index spatidx on t8;</code></pre>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>表的索引</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql表的约束</title>
    <url>/blog/2019/12/18/biao-de-yue-shu/</url>
    <content><![CDATA[<h2 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h2><p>为了防止数据表中插入错误的数据，在mysql中定义了一些维护数据库完整性的规则，即表的约束。<br><img src="http://qiniuyun.dajienihao.cn/image/1218/%E8%A1%A8%E7%9A%84%E7%BA%A6%E6%9D%9F.jpg" alt=""></p>
<h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><h4 id="单字段主键"><a href="#单字段主键" class="headerlink" title="单字段主键"></a>单字段主键</h4><p>单字段主键指的是由一个字段构成的主键，其基本语法格式如下所示:<br><code>字段名 数据类型 primary key；</code></p>
<pre><code> mysql-&gt;create table example(
      -&gt;id int primary key,
      -&gt;name varchar(20),
      -&gt;grade float);</code></pre><h4 id="多字段主键"><a href="#多字段主键" class="headerlink" title="多字段主键"></a>多字段主键</h4><p>多字段主键指的是多个字段组合而成的主键，其基本的语法格式如下所示:<br><code>primary key（字段名1,字段2名,...,字段名n）；</code></p>
<pre><code>     mysql-&gt;create table example1(
         -&gt;stu_id int,
         -&gt;course_id int,
         -&gt;grade float,
         -&gt;primary key(stu_id,course_id));</code></pre><blockquote>
<p>注意：每个数据表中最多只能有一个主键约束，定义为primary key的字段不能有重复值且不能为null值;</p>
</blockquote>
<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>由于外键约束涉及多表操作，这里就不进行说明了。</p>
<h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p>非空约束值得是字段的值不能为null，在MySQL中，非空约束是通过notnull定义的，其基本语法格式如下：<br><code>字段名 数据类型 not null；</code></p>
<pre><code>    mysql-&gt;create table example2(
         -&gt;id int primary key,
         -&gt;name varchar(20) not null,
         -&gt;grade float);</code></pre><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>唯一约束用于保证数据表中字段的唯一性，即表中字段的值不能重复出现。唯一约束是通过    unique定义的，其基本语法的格式如下所示：<br><code>字段名 数据类型 unique；</code></p>
<pre><code>mysql&gt;create table example3(
    -&gt;id int primary key,
    -&gt;stu_id int unique,
    -&gt;name varchar(20)not null);</code></pre><h3 id="自增约束"><a href="#自增约束" class="headerlink" title="自增约束"></a>自增约束</h3><p>在数据表中，若想为表中插入新的记录自动生成唯一的ID,可以使用auto_increment约束来实现。auto_increment约束的字段可以是任何整数类型。默认情况下，该字段的值是从1开始自增的。使用auto_increment设置表字段值自动增加的基本语法格式如下所示：<br><code>字段名 数据类型 auto_increment；</code></p>
<pre><code>    mysql&gt;create table example5(
        -&gt;id int primary key auto_increment,
        -&gt;stu_id int unique,
        -&gt;grade float);</code></pre><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p>默认约束用于非数据表中字段指定默认值，即当在表中插入一条新记录是，如果么哦呦给这个字段赋值，那么，数据库系统会自动给这个字段插入默认值。默认值是通过default关键字定义的，其基本的语法格式如下所示：<br><code>字段名 数据类型 default 默认值；</code></p>
<pre><code>    mysql&gt;create table example4(
        -&gt;id int primary key,
        -&gt;stu_id int unique,
        -&gt;grade float default 0);</code></pre>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>表的约束</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据类型详解</title>
    <url>/blog/2019/12/14/mysql-shu-ju-lei-xing-xiang-jie/</url>
    <content><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>使用mysql数据库存储数据时，不同的类型决定了不同mysql不同的存储方式不同。为此mysql数据库提供了多种数据类型，其中包括整数类型、浮点数类型、定点数类型、日期和时间类型和二进制类型。下面将对此进行详解。</p>
<h2 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h2><p>在Mysql数据库中，经常需要存储整数数值。根据数值取值范围的不同，Mysql中的整数类型可分为五种，分别是TINYINT、SMALLINT、MEDIUMINT、INT和BIGINT。<br><img src="http://qiniuyun.dajienihao.cn/image/1211/image.png" alt=""><br>从表中可以看出，不同的整数类型占用的字节数和取值范围都不同。需要注意的是，不同整数类型的取值范围是可以根据字节数算出来的。</p>
<h2 id="2-浮点数类型和定点数类型"><a href="#2-浮点数类型和定点数类型" class="headerlink" title="2.浮点数类型和定点数类型"></a>2.浮点数类型和定点数类型</h2><p>在mysql数据库中小数都是使用浮点数和定点数来表示的。浮点数的类型可以分为单精度浮点数类型（FLOAT）和双精度浮点数类型（DOUBLE）。而定点数类型只有DECMIMAL（M，D）<br><img src="http://qiniuyun.dajienihao.cn/image/1214/%E6%B5%AE%E7%82%B9%E5%9E%8B%E5%92%8C%E5%AE%9A%E7%82%B9%E5%9E%8B.jpg241642558434741.png" alt=""></p>
<p>从表中可以看出DECIMAL类型的取值范围与DOUBLE类型的取值范围相同，需要注意的是DECIMAL的有效取值范围是由M和D决定的。其中，M表示的是数据的长度，D表示小数点后的长度。比如将DECIMAL（6，2）的数据3.14159插入数据库中，现实的结果为3.14。</p>
<h2 id="3-日期与时间类型"><a href="#3-日期与时间类型" class="headerlink" title="3.日期与时间类型"></a>3.日期与时间类型</h2><p>为了方便在数据库中存储时间和日期，mysql提供了表示日期和时间的数据类型。分别是YEAR、DATE、TIME、DATETIME和TIMESTAMP。<br><img src="http://qiniuyun.dajienihao.cn/20191121112931554.jpg" alt=""><br>从表中可以看出每种日期和时间类型的取值范围都是不同的。需要注意的是如果插入的数值不合法，系统会自动将对应的零值插入数据库中。</p>
<h2 id="4-字符串和二进制类型"><a href="#4-字符串和二进制类型" class="headerlink" title="4.字符串和二进制类型"></a>4.字符串和二进制类型</h2><p>为了存储字符串、图片和声音等数据，mysql提供了字符串类型和二进制类型。<br><img src="http://qiniuyun.dajienihao.cn/image/1214/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%B1%BB%E5%9E%8B.jpg" alt=""><br>表中列举的字符串和二进制类型，不同的数据类型具有不同的特点。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库及表的基本操作</title>
    <url>/blog/2019/12/11/mysql-shu-ju-ku-ji-biao-de-ji-ben-cao-zuo/</url>
    <content><![CDATA[<h2 id="mysql简单操作"><a href="#mysql简单操作" class="headerlink" title="mysql简单操作"></a>mysql简单操作</h2><h3 id="mysql服务的启动与暂停"><a href="#mysql服务的启动与暂停" class="headerlink" title="mysql服务的启动与暂停"></a>mysql服务的启动与暂停</h3><pre><code>net start mysql
net stop mysql</code></pre><h3 id="mysql登录"><a href="#mysql登录" class="headerlink" title="mysql登录"></a>mysql登录</h3><pre><code>-u用户名 -p密码</code></pre><h3 id="创建和查看数据库"><a href="#创建和查看数据库" class="headerlink" title="创建和查看数据库"></a>创建和查看数据库</h3><pre><code>create database 数据库名称
show crate database 数据库名称</code></pre><h3 id="修改数据库编码"><a href="#修改数据库编码" class="headerlink" title="修改数据库编码"></a>修改数据库编码</h3><pre><code>alter database 数据库名称 default character set 编码方式 collate 编码方式_bin</code></pre><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><pre><code>drop database 数据库名称</code></pre><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre><code>create table 表名（
字段1，数据类型[完整性约束条件]
字段2，数据类型[完整性约束条件]
.......
）</code></pre><h3 id="查看库中表"><a href="#查看库中表" class="headerlink" title="查看库中表"></a>查看库中表</h3><pre><code>show tables</code></pre><h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><pre><code>1.show create table 表名（后加\G可以使结果整齐美观）
2.desc 表名</code></pre><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><pre><code>alter table 表名 rename [to] 新表名</code></pre><h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><pre><code>alter table 表名 change 旧字段名 新字段名 数据类型</code></pre><h3 id="修改字段的数据类型"><a href="#修改字段的数据类型" class="headerlink" title="修改字段的数据类型"></a>修改字段的数据类型</h3><pre><code>alter table 表名 modify 字段名 数据类型</code></pre><h3 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h3><pre><code>alter table 表名 add 新字段名 数据类型[约束条件][first|after 已存在字段名]</code></pre><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><pre><code>alter table 表名 drop 字段名</code></pre><h3 id="修改字段的排列位置"><a href="#修改字段的排列位置" class="headerlink" title="修改字段的排列位置"></a>修改字段的排列位置</h3><pre><code>alter table 表名 modify 字段名1 数据类型 first|after 字段名2</code></pre><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><pre><code>drop table 表名   </code></pre>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC设计模式</title>
    <url>/blog/2019/12/08/mvc-she-ji-mo-shi/</url>
    <content><![CDATA[<h2 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h2><p><strong>MVC</strong>全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</p>
<ul>
<li><p>Model（模型） 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</p>
</li>
<li><p>View（视图） - 视图代表模型包含的数据的可视化。</p>
</li>
<li><p>Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p>
</li>
</ul>
<p><img src="http://qiniuyun.dajienihao.cn/image/1208/mvc%E6%B5%81%E7%A8%8B.png" alt=""></p>
<h2 id="MVC的优缺点"><a href="#MVC的优缺点" class="headerlink" title="MVC的优缺点"></a>MVC的优缺点</h2><p>毕竟没有什么设计模式是完美的，优点和缺点总是各有千秋。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h4 id="1-低耦合"><a href="#1-低耦合" class="headerlink" title="1.低耦合"></a>1.低耦合</h4><p>通过将视图层和业务层分离，允许更改视图层代码而不必重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变，只需要改动MVC的模型层（及控制器）即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。</p>
<p>模型层是自包含的，并且与控制器和视图层相分离，所以很容易改变应用程序的数据层和业务规则。如果想把数据库从 MySQL 移植到 Oracle，或者改变基于 RDBMS 的数据源到 LDAP，只需改变模型层即可。一旦正确的实现了模型层，不管数据来自数据库或是 LDAP服务器，视图层都将会正确的显示它们。由于运用 MVC 的应用程序的三个部件是相互独立，改变其中一个部件并不会影响其它两个，所以依据这种设计思想能构造出良好的松耦合的构件。</p>
<h4 id="2-重用性高"><a href="#2-重用性高" class="headerlink" title="2.重用性高"></a>2.重用性高</h4><p>随着技术的不断进步，当前需要使用越来越多的方式来访问应用程序了。MVC模式允许使用各种不同样式的视图来访问同一个服务端的代码，这得益于多个视图（如WEB（HTTP）浏览器或者无线浏览器（WAP））能共享一个模型。</p>
<p>比如，用户可以通过电脑或通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式（流程）是一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面（视图）使用。例如，很多数据可能用 HTML 来表示，但是也有可能用 WAP 来表示，而这些表示的变化所需要的是仅仅是改变视图层的实现方式，而控制层和模型层无需做任何改变。</p>
<p>由于已经将数据和业务规则从表示层分开，所以可以最大化的进行代码重用了。另外，模型层也有状态管理和数据持久性处理的功能，所以，基于会话的购物车和电子商务过程，也能被Flash网站或者无线联网的应用程序所重用。</p>
<h4 id="3-生命周期成本低"><a href="#3-生命周期成本低" class="headerlink" title="3.生命周期成本低"></a>3.生命周期成本低</h4><p>MVC模式使开发和维护用户接口的技术含量降低。</p>
<h4 id="4-部署快"><a href="#4-部署快" class="headerlink" title="4.部署快"></a>4.部署快</h4><p>使用MVC模式进行软件开发，使得软件开发时间得到相当大的缩减，它使后台程序员集中精力于业务逻辑，界面程序员集中精力于表现形式上。</p>
<h4 id="5-可维护性高"><a href="#5-可维护性高" class="headerlink" title="5.可维护性高"></a>5.可维护性高</h4><p>分离视图层和业务逻辑层使得WEB应用更易于维护和修改。</p>
<h4 id="6-有利软件工程化管理"><a href="#6-有利软件工程化管理" class="headerlink" title="6.有利软件工程化管理"></a>6.有利软件工程化管理</h4><p>由于不同的组件（层）各司其职，每一层不同的应用会具有某些相同的特征，这样就有利于通过工程化、工具化的方式管理程序代码。控制器同时还提供了一个好处，就是可以使用控制器来联接不同的模型和视图，来实现用户的需求，这样控制器可以为构造应用程序提供强有力的手段。给定一些可重用的模型和视图，控制器可以根据用户的需求选择模型进行处理，然后选择视图将处理结果显示给用户。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><h4 id="1-没有明确的定义"><a href="#1-没有明确的定义" class="headerlink" title="1.没有明确的定义"></a>1.没有明确的定义</h4><p>完全理解MVC模式并不是很容易。使用MVC模式需要精心的计划，由于它的内部原理比较复杂，所以需要花费一些时间去思考软件的架构。同时由于模型和视图要严格的分离，这样也给调试应用程序带来了一定的困难。每个构件在使用之前都需要经过彻底的测试。</p>
<h4 id="2-不适合小、中型应用程序"><a href="#2-不适合小、中型应用程序" class="headerlink" title="2.不适合小、中型应用程序"></a>2.不适合小、中型应用程序</h4><p>花费大量时间将MVC模式应用到规模并不是很大的应用程序通常会得不偿失。</p>
<h4 id="3-增加系统结构和实现的复杂性"><a href="#3-增加系统结构和实现的复杂性" class="headerlink" title="3.增加系统结构和实现的复杂性"></a>3.增加系统结构和实现的复杂性</h4><p>对于简单的界面来说，非要严格遵循MVC模式，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。</p>
<h4 id="4-视图对模型数据的低效率访问"><a href="#4-视图对模型数据的低效率访问" class="headerlink" title="4.视图对模型数据的低效率访问"></a>4.视图对模型数据的低效率访问</h4><p>依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。</p>
]]></content>
      <categories>
        <category>MVC</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>eclipse导入普通javaweb项目报错问题</title>
    <url>/blog/2019/11/23/eclipse-dao-ru-pu-tong-javaweb-xiang-mu-bao-cuo-wen-ti/</url>
    <content><![CDATA[<h2 id="Eclipse导入javaweb项目代码报错解决方案"><a href="#Eclipse导入javaweb项目代码报错解决方案" class="headerlink" title="Eclipse导入javaweb项目代码报错解决方案"></a>Eclipse导入javaweb项目代码报错解决方案</h2><p>相信大家在前期学习javaweb的时候导入项目都会碰到一个问题，那就是导入Javaweb项目时代码没有报错但项目图标就是有红叉。</p>
<p>以下是我导入项目发生的错误，我带大家看一下<br><img src="http://qiniuyun.dajienihao.cn/1122%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99.png" alt=""><br>导入项目时会出现这样的错误，jsp页面全部报错！下面我把我如何解决的方法告诉大家：</p>
<h3 id="1-首先，点开你导入项目的项目名，右键选择Build-Path-gt-Configure-Build-Path"><a href="#1-首先，点开你导入项目的项目名，右键选择Build-Path-gt-Configure-Build-Path" class="headerlink" title="1.首先，点开你导入项目的项目名，右键选择Build Path--------&gt;Configure Build Path"></a><strong>1.首先，点开你导入项目的项目名，右键选择<code>Build Path--------&gt;Configure Build Path</code></strong></h3><p><img src="http://qiniuyun.dajienihao.cn/1122lib.png" alt=""></p>
<h4 id="1-选中有红叉的jre点击remove"><a href="#1-选中有红叉的jre点击remove" class="headerlink" title="1.选中有红叉的jre点击remove"></a>1.选中有红叉的jre点击remove</h4><h4 id="2-然后点击Add-Library"><a href="#2-然后点击Add-Library" class="headerlink" title="2.然后点击Add Library"></a>2.然后点击Add Library</h4><h4 id="3-选择JRE-System-Library-点击next"><a href="#3-选择JRE-System-Library-点击next" class="headerlink" title="3.选择JRE System Library 点击next"></a>3.选择JRE System Library 点击next</h4><p><img src="http://qiniuyun.dajienihao.cn/1122addlib.png" alt=""></p>
<h4 id="4-点击Installed选择你的你本机的jre在点击Apply即可"><a href="#4-点击Installed选择你的你本机的jre在点击Apply即可" class="headerlink" title="4.点击Installed选择你的你本机的jre在点击Apply即可"></a>4.点击Installed选择你的你本机的jre在点击Apply即可</h4><p><img src="http://qiniuyun.dajienihao.cn/addjre.png" alt=""></p>
<h3 id="2-在再左边找到Project-Facets"><a href="#2-在再左边找到Project-Facets" class="headerlink" title="2.在再左边找到Project Facets"></a><strong>2.在再左边找到Project Facets</strong></h3><h4 id="1-点击java栏右边下拉框-选择你的版本（我这里是1-8版本所以我选择1-8版本）"><a href="#1-点击java栏右边下拉框-选择你的版本（我这里是1-8版本所以我选择1-8版本）" class="headerlink" title="1.点击java栏右边下拉框 选择你的版本（我这里是1.8版本所以我选择1.8版本）"></a>1.点击java栏右边下拉框 选择你的版本（我这里是1.8版本所以我选择1.8版本）</h4><p><img src="http://qiniuyun.dajienihao.cn/add1.8.png" alt=""></p>
<h4 id="2-再点击Run-Times选择你的Tomcat版本-如果没有的的话new一个然后Apply就发现-报错已经全部消失了"><a href="#2-再点击Run-Times选择你的Tomcat版本-如果没有的的话new一个然后Apply就发现-报错已经全部消失了" class="headerlink" title="2.再点击Run Times选择你的Tomcat版本 如果没有的的话new一个然后Apply就发现 报错已经全部消失了"></a>2.再点击Run Times选择你的Tomcat版本 如果没有的的话new一个然后Apply就发现 报错已经全部消失了</h4><p><img src="http://qiniuyun.dajienihao.cn/finsh.png" alt=""></p>
<h3 id="3-到这里就已经成功了嗷，如果还有问题的话可以私聊我"><a href="#3-到这里就已经成功了嗷，如果还有问题的话可以私聊我" class="headerlink" title="3.到这里就已经成功了嗷，如果还有问题的话可以私聊我"></a>3.到这里就已经成功了嗷，如果还有问题的话可以私聊我</h3>]]></content>
      <categories>
        <category>编程工具</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>后端</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>java反射基础</title>
    <url>/blog/2019/10/31/java-ji-chu-fan-she/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Java反射(<code>Reflection</code>)机制就是在运行状态中，对于任意一个类，都能够知道这个类的属性和方法。对于任意一个对象能够调用它的任意一个属性和方法。这种动态获取的信息和动态调用对象的方法的功能称为Java语言的反射机制。Java程序中一般的对象的类型都是在编译期就确定下来的，而Java反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。</p>
<p>反射的核心是JVM在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。反射机制就是通过<code>java.lang.Class</code>类来实现的，在<code>Java</code>中，<code>Object</code>类是所有类的根类，而<code>Class</code>类就是描述Java类的类。</p>
<blockquote>
<p>注：因为<code>Class</code>类也是类，所以<code>Object</code>也包括<code>Class</code>类。</p>
</blockquote>
<h3 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2. 主要功能"></a>2. 主要功能</h3><p>Java反射框架主要提供以下功能：</p>
<ul>
<li>在运行时判断任意一个对象所属的类；</li>
<li>在运行时构造任意一个类的对象；</li>
<li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用<code>private</code>方法）；</li>
<li>在运行时调用任意一个对象的方法；</li>
<li>修改构造函数、方法、属性的可见性。</li>
</ul>
<h3 id="3-主要用途"><a href="#3-主要用途" class="headerlink" title="3. 主要用途"></a>3. 主要用途</h3><p><strong>反射最重要的用途就是开发各种通用框架</strong>。很多框架（比如<code>Spring</code>）都是配置化的（比如通过XML文件配置<code>JavaBean</code>,<code>Action</code>之类的），为了保证框架的通用性，它们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射——运行时动态加载需要加载的对象。对与框架开发人员来说，反射虽小但作用非常大，它是各种容器实现的核心。</p>
<h2 id="二、反射的作用"><a href="#二、反射的作用" class="headerlink" title="二、反射的作用"></a>二、反射的作用</h2><h3 id="1-获取class对象"><a href="#1-获取class对象" class="headerlink" title="1. 获取class对象"></a>1. 获取class对象</h3><p>反射的各种功能都需要通过<code>Class</code>对象来实现，因此，需要知道如何获取<code>Class</code>对象，主要有以下几种方式。</p>
<h4 id="使用-Class-forName-的静态方法"><a href="#使用-Class-forName-的静态方法" class="headerlink" title="使用 Class.forName() 的静态方法"></a>使用 Class.forName() 的静态方法</h4><p><code>Class.forName(String className)</code>方法可以通过类或接口的名称（一个字符串或完全限定名）来获取对应的<code>Class</code>对象。</p>
<pre class=" language-java"><code class="language-java">    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blinkfox.Zealot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="直接获取某个类的class-最安全-性能最好"><a href="#直接获取某个类的class-最安全-性能最好" class="headerlink" title="直接获取某个类的class(最安全/性能最好)"></a>直接获取某个类的class(最安全/性能最好)</h4><pre class=" language-java"><code class="language-java">    Class<span class="token operator">&lt;</span>String<span class="token operator">></span> cls <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></code></pre>
<h4 id="调用某个对象的-getClass-方法"><a href="#调用某个对象的-getClass-方法" class="headerlink" title="调用某个对象的 getClass() 方法"></a>调用某个对象的 getClass() 方法</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isInstance</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="2-判断是否为某个类的实例"><a href="#2-判断是否为某个类的实例" class="headerlink" title="2. 判断是否为某个类的实例"></a>2. 判断是否为某个类的实例</h3><p>一般地，我们用<code>instanceo</code>f关键字来判断是否为某个类的实例。同时我们也可以借助反射中<code>Class</code>对象的<code>isInstance()</code>方法来判断是否为某个类的实例，它是一个<code>Native</code>方法：</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isInstance</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="3-创建实例"><a href="#3-创建实例" class="headerlink" title="3. 创建实例"></a>3. 创建实例</h3><p>通过反射来生成对象主要有两种方式。</p>
<h4 id="使用Class对象的newInstance-方法"><a href="#使用Class对象的newInstance-方法" class="headerlink" title="使用Class对象的newInstance()方法"></a>使用Class对象的newInstance()方法</h4><pre class=" language-java"><code class="language-java">    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    Object str <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance-方法"><a href="#通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance-方法" class="headerlink" title="通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法"></a>通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 获取String所对应的Class对象</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 获取String类带一个String参数的构造器</span>
    Constructor constructor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 根据构造器创建实例</span>
    Object obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"23333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>注：这种方法可以用指定的构造器构造类的实例。</p>
</blockquote>
<h3 id="4-获取方法"><a href="#4-获取方法" class="headerlink" title="4. 获取方法"></a>4. 获取方法</h3><p>获取某个<code>Class</code>对象的方法集合，主要有以下几个方法：</p>
<ul>
<li><code>getDeclaredMethods</code>()方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</li>
</ul>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Method<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SecurityException</code></pre>
<ul>
<li><code>getMethods</code>()方法返回某个类的所有公用（<code>public</code>）方法，包括其继承类的公用方法。</li>
</ul>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Method<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SecurityException
</code></pre>
<ul>
<li><code>getMethod</code>()方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应<code>Class</code>的对象。</li>
</ul>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Method <span class="token function">getMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span></code></pre>
<p>代码示例：</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span>
    <span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span>
    InstantiationException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> MethodClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    Object object <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取MethodClass类的add方法</span>
    Method method <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//getMethods()方法获取的所有方法</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getMethods获取的方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>Method m<span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//getDeclaredMethods()方法获取的所有方法</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getDeclaredMethods获取的方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>Method m<span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">MethodClass</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fuck <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">}</span></code></pre>
<blockquote>
<p>注：通过<code>getMethods()</code>获取的方法可以获取到父类的方法,比如<code>java.lang.Object</code>下定义的各个方法。</p>
</blockquote>
<h3 id="5-获取构造方法"><a href="#5-获取构造方法" class="headerlink" title="5. 获取构造方法"></a>5. 获取构造方法</h3><p>获取类构造器的用法与上述获取方法的用法类似。主要是通过<code>Class</code>类的<code>getConstructor</code>方法得到<code>Constructor</code>类的一个实例，而<code>Constructor</code>类有一个<code>newInstance</code>方法可以创建一个对象实例:</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>Object <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initargs<span class="token punctuation">)</span></code></pre>
<h3 id="6-获取类的成员变量信息"><a href="#6-获取类的成员变量信息" class="headerlink" title="6. 获取类的成员变量信息"></a>6. 获取类的成员变量信息</h3><p>获取的方法同<code>Method</code>相似，主要是这几个方法，在此不再赘述：</p>
<ul>
<li><code>Field getField(String name)</code>: 访问公有的成员变量。</li>
</ul>
<ul>
<li><code>Field[] getDeclaredFields()</code>：所有已声明的成员变量。但不能得到其父类的成员变量。</li>
</ul>
<ul>
<li><p><code>Field[] getFields()</code>和<code>Field[] getDeclaredFields()</code>用法同上。</p>
<h3 id="7-调用方法"><a href="#7-调用方法" class="headerlink" title="7. 调用方法"></a>7. 调用方法</h3><p>当我们从类中获取了一个方法后，我们就可以用<code>invoke()</code>方法来调用这个方法。<code>invoke</code>方法的原型为:</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span>
   InvocationTargetException</code></pre>
<p>代码示例：</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span>
  InstantiationException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>
  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> klass <span class="token operator">=</span> MethodClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//创建 MethodClass 的实例</span>
  Object obj <span class="token operator">=</span> klass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//获取 MethodClass 类的add方法</span>
  Method method <span class="token operator">=</span> klass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//调用 method 对应的方法 => add(1,4)</span>
  Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">class</span> <span class="token class-name">MethodClass</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fuck <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token punctuation">}</span></code></pre>
<h3 id="8-利用反射创建数组"><a href="#8-利用反射创建数组" class="headerlink" title="8. 利用反射创建数组"></a>8. 利用反射创建数组</h3><p>数组在Java里是比较特殊的一种类型，它可以赋值给一个<code>Object Reference</code>。下面我们看一看利用反射创建数组的例子：</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 使用`java.lang.reflect.Array`反射创建长度为25的字符串数组.</span>
  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 往数组里添加内容</span>
  Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Scala"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Clojure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 获取某一项的内容</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<h2 id="三、使用反射获取信息"><a href="#三、使用反射获取信息" class="headerlink" title="三、使用反射获取信息"></a>三、使用反射获取信息</h2><p><code>Class</code>类提供了大量的实例方法来获取该<code>Class</code>对象所对应的详细信息，<code>Class</code>类大致包含如下方法，其中每个方法都包含多个重载版本，因此我们只是做简单的介绍，详细请参考JDK文档。</p>
</li>
</ul>
<h3 id="1-获取类内信息"><a href="#1-获取类内信息" class="headerlink" title="1. 获取类内信息"></a>1. 获取类内信息</h3><ul>
<li>构造器: <code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code></li>
<li>包含的方法: <code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code></li>
<li>包含的属性: <code>Field getField(String name)</code></li>
<li>内部类: <code>Class&lt;?&gt;[] getDeclaredClasses()</code></li>
<li>外部类: <code>Class&lt;?&gt; getDeclaringClass()</code></li>
<li>所实现的接口: <code>Class&lt;?&gt;[] getInterfaces()</code></li>
<li>修饰符: <code>int getModifiers()</code></li>
<li>所在包: <code>Package getPackage()</code></li>
<li>类名: <code>String getName()</code></li>
<li>简称: <code>String getSimpleName()</code></li>
</ul>
<h3 id="2-判断类本身信息的方法"><a href="#2-判断类本身信息的方法" class="headerlink" title="2. 判断类本身信息的方法"></a>2. 判断类本身信息的方法</h3><ul>
<li>是否注解类型: <code>boolean isAnnotation()</code></li>
<li>是否使用了该<code>Annotation</code>修饰: <code>boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code></li>
<li>是否匿名类: <code>boolean isAnonymousClass()</code></li>
<li>是否数组: <code>boolean isArray()</code></li>
<li>是否枚举: <code>boolean isEnum()</code></li>
<li>是否原始类型: <code>boolean isPrimitive()</code></li>
<li>是否接口: <code>boolean isInterface()</code></li>
<li>obj是否是该Class的实例: <code>boolean isInstance(Object obj)</code></li>
</ul>
<h3 id="3-使用反射获取泛型信息"><a href="#3-使用反射获取泛型信息" class="headerlink" title="3. 使用反射获取泛型信息"></a>3. 使用反射获取泛型信息</h3><p>为了通过反射操作泛型以迎合实际开发的需要, <code>Java</code>新增了<code>java.lang.reflect.ParameterizedType、java.lang.reflect.GenericArrayType、java.lang.reflect.TypeVariable、java.lang.reflect.WildcardType</code>几种类型来代表不能归一到<code>Class</code>类型但是又和原始类型同样重要的类型。</p>
<p>-<code>ParameterizedType</code>: 一种参数化类型, 比如<code>Collection</code></p>
<ul>
<li><code>GenericArrayType</code>: 一种元素类型是参数化类型或者类型变量的数组类型</li>
<li><code>TypeVariable</code>: 各种类型变量的公共接口</li>
<li><code>WildcardType</code>: 一种通配符类型表达式, 如<code>?、? extends Number、? super Integer</code></li>
</ul>
<p>代码示例：</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> objectMap<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> map<span class="token punctuation">,</span> String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Bean<span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 测试属性类型
     *
     * @throws NoSuchFieldException
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFieldType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException <span class="token punctuation">{</span>
    Field field <span class="token operator">=</span> Client<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"objectMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Type gType <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getGenericType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 打印type与generic type的区别</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>gType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ParameterizedType pType <span class="token operator">=</span> <span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> gType<span class="token punctuation">;</span>
    Type<span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> pType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Type type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 测试参数类型
     *
     * @throws NoSuchMethodException
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testParamType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span>
    Method testMethod <span class="token operator">=</span> Client<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Type<span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> testMethod<span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Type type <span class="token operator">:</span> parameterTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"type -> "</span> <span class="token operator">+</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Type<span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Type actualType <span class="token operator">:</span> actualTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\tactual type -> "</span> <span class="token operator">+</span> actualType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 测试返回值类型
     *
     * @throws NoSuchMethodException
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span>
    Method testMethod <span class="token operator">=</span> Client<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Type returnType <span class="token operator">=</span> testMethod<span class="token punctuation">.</span><span class="token function">getGenericReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"return type -> "</span> <span class="token operator">+</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>returnType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Type<span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> returnType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Type actualType <span class="token operator">:</span> actualTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\tactual type -> "</span> <span class="token operator">+</span> actualType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>反射</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
</search>
